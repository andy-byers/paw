// types.paw

{
    // nested templates
    fn outer<T>(t: T) {
        fn inner<T2>(t2: T2) {}
        inner(t) // inner::<T>
        inner(1) // inner::<int>
    }
    outer(false)
    outer(1)
    outer(2.0)
    outer('three')

    outer(true)
    outer(2)
    outer(3.0)
    outer('four')
}

//***********************************************
//    primitives
//***********************************************
{
    // test type annotations
    let i: int = 123
    let s: string = 'abc'
    let b: bool = true
    let f: float = 1.0

    // test inferred types
    let I = 123
    let S = 'abc'
    let B = true
    let F = 1.0

    assert(i == I)
    assert(s == S)
    assert(b == B)
    assert(f == F)

    // rebind different types
    let a = 123
    assert(a == 123)
    let a = 456.0
    assert(a == 456.0)
    let a = 'abc'
    assert(a == 'abc')
    {
        // shadow different type
        let a = true
    }
    assert(a == 'abc')
}
{
    let x = 100
    let x = x
    let x = x + 23
    assert(x == 123)
}
// Primitive conversion operators:
{
    let b = bool(0)
    assert(b == false)
    let b = bool(1)
    assert(b == true)
    let b = bool(-11)
    assert(b == true)

    let b = bool(0.0)
    assert(b == false)
    let b = bool(0.1)
    assert(b == true)

    let i = int(1.0)
    assert(i == 1)
    let i = int(1.9)
    assert(i == 1)
    let i = int(-1.9)
    assert(i == -1)

    let f = float(1)
    assert(f < 1.1)
    let f = float(-10)
    assert(f > -10.1)

    let i = 0
    let b = bool(i)
    let i = int(b)
    assert(i == 0)

    let i = 1234
    let b = bool(i)
    let i = int(b)
    assert(i == 1)
}

//***********************************************
//    functions
//***********************************************
{
    fn f() {
        // implicit 'return'
    }
    fn fi(a: int) {
        return
    }
    f()
    fi(1)

    // test 'int' annotation
    fn f_i() -> int {
        return 1
    }
    fn fi_i(a: int) -> int {
        return a + 2
    }
    fn fii_i(a: int, b: int) -> int {
        return a + b + 3
    }
    f_i()
    fi_i(1)
    fii_i(1, 2)

    let f: fn(int, int) -> int = fii_i
    f(1, 2)

    let f = fii_i
    f(3, 4)

    // Recursive calls use the function object in local slot 0. Type must
    // be set before the function is called.
    fn recursion(n: int) -> int {
        if n > 0 {
            return recursion(n - 1)
        }
        return -1
    }

    recursion(10)

    let r = recursion
    r(20)

    let r: fn(int) -> int = recursion
    r(30)
}

//***********************************************
//    structures
//***********************************************
{
    struct A {a: int}
    let a = A{a: 123} {/* this is an empty block */}
    {} {}{}
    // Automatic semicolon insertion causes the next 2 lines to be parsed
    // as an Ident followed by a Block.
    let a = a
    {} 
    let a = a.a
    assert(a == 123)

    // A 'CompositeLit' can start a suffix chain ('.' must be on the 
    // same line as the '}' due to auto ';' insertion)
    struct B {a: A}
    let b = B{a: A{a: 123}}.a.a
    assert(b == 123)
}
{
    struct A {}
    let a = A{}

    let a: A = A {}

    struct A {a: int}
    let a = A{a: 123}

    // ';' can go after the type, to separate attributes visually
    struct A {a: int; b: string} 
    // initializer order doesn't matter
    let a = A{a: 123, b: 'abc'}
    let a = A{b: 'def', a: 456}
}
{
    struct Inner {
        a: int
        b: float
        c: string
    }
    struct Outer {
        a: bool
        b: Inner
    }

    let o = Outer{
        a: false,
        b: Inner{
            a: 1,
            b: 2.0,
            c: 'three',
        },
    }
    assert(o.b.a == 1)
    assert(o.b.b == 2.0)
    assert(o.b.c == 'three')
}

//***********************************************
//    function templates
//***********************************************
{
    fn a<X>() {}
    fn b<X>(x: X) {}
    fn c<X>(x: X) -> X {return x}

    // explicit instantiation:
    a::<int>()
    a::<float>()
    a::<string>()
    b::<int>(1)
    b::<float>(2.0)
    b::<string>('3')
    assert(123 == c::<int>(123))
    assert(1.0 == c::<float>(1.0))
    assert('abc' == c::<string>('abc'))

    // implicit instantiation:
    b(1)
    b(2.0)
    b('3')
    assert(123 == c(123))
    assert(1.0 == c(1.0))
    assert('abc' == c('abc'))
}
{
    fn id<Type>(value: Type) -> Type {
        return value
    }
    assert(id::<bool>(false) == false)
    assert(id(1) == 1)
    assert(id(id::<float>)(2.0) == 2.0)
    assert(id(id::<string>)('3') == '3')

    assert(false == id(id(false)))
    assert(1 == id(id(id(1))))
    assert(2.0 == id(id(id(id::<float>)))(2.0))
    assert('three' == id(id(id(id::<fn(string) -> string>)))(id::<string>)('three'))
}
{
    fn forward<X>(x: X) -> X {
        let x = x
        let y = x
        return y
    }
    assert(-1 == forward::<int>(-1))
    assert(2 == forward::<int>(2))
    assert(-3.0 == forward::<float>(-3.0))
    assert(4.0 == forward::<float>(4.0))

    assert(-5 == forward(-5))
    assert(6 == forward(6))
    assert(-7.0 == forward(-7.0))
    assert(8.0 == forward(8.0))
}
{
    fn test() -> fn() {
        fn upvalue<T>(t: T) -> T {
            return t
        }
        let closure = || {
            assert(upvalue(1) == 1)
            assert(upvalue(2.0) == 2.0)
            assert(upvalue('3') == '3')
            let u1 = upvalue::<int>
            let u2 = upvalue::<float>
            let u3 = upvalue::<string>
            assert(u1(1) == 1)
            assert(u2(2.0) == 2.0)
            assert(u3('3') == '3')
        }
        return closure
    }
    let closure = test()
    closure()
}
{
// TODO: Closure cannot be a template, this should fail to compile!
    let u = 42
    fn func<T>(v: int) {
        assert(v == u)
    }
    func::<bool>(42)
    {
        // Function template instances should be placed adjacent to one
        // another on the stack, right where the template is declared,
        // so that they capture the same upvalues.
        let u = 0
        func::<bool>(42)
        func::<int>(42)
    }
}
{
    fn mapone<A, B>(f: fn(A) -> B, a: A) -> B {
        return f(a)
    }

    fn b2i(b: bool) -> int {
        return 1
    }
    fn i2f(i: int) -> float {
        return 2.0
    }
    fn f2s(f: float) -> string {
        return 'three'
    }
    fn s2b(s: string) -> bool {
        return true
    }
    let i = mapone(b2i, false)
    let f = mapone(i2f, i)
    let s = mapone(f2s, f)
    let b = mapone(s2b, s)
    assert(b == true)
}
{
    // nested templates
    fn outer<T>(t: T) {
        fn inner<T2>(t2: T2) {}
        inner(t) // inner::<T>
        inner(1) // inner::<int>
    }
    outer(false)
    outer(1)
    outer(2.0)
    outer('three')

    outer(true)
    outer(2)
    outer(3.0)
    outer('four')
}
{
    fn fa<A>(a: A) {
        fn fb<B>(b: B) {
            fn fc<C>(c: C) {
                let a = a
                let b = b
                let c = c
            }
            fc(a)
            fc(b)
        }
        fb(a)
    }
    fa(false)
    fa(1)
    fa(2.0)
    fa('three')

    fa(true)
    fa(2)
    fa(3.0)
    fa('four')
}

//***********************************************
//    structure templates
//***********************************************
{
    struct A<X> {}
    struct B<X> {x: X}
    struct C<X, Y> {x: X; y: Y}

    let a: A<int> = A::<int>{}
    let b: B<int> = B::<int>{x: 1}
    let c: C<int, float> = C::<int, float>{x: 1, y: 2.0}

    let a = A::<int>{}
    let b = B::<int>{x: 2}
    let c = C::<int, float>{x: 2, y: 3.0}

    struct A<T> {
        func: fn(T) -> T
    }
    fn func(i: int) -> int {
        return i
    }
    let a = A::<int>{func: func}
    assert(123 == a.func(123))
}
{
    fn func<A>(a: A) {
        struct Adt<B> {
            a: A
            b: B
        }
        let adt = Adt::<bool>{a: a, b: false}
        let adt = Adt::<int>{a: a, b: 1}
        let adt = Adt::<float>{a: a, b: 2.0}
        let adt = Adt::<string>{a: a, b: 'three'}
        let adt = Adt::<A>{a: a, b: a}
    }
    func(true)
    func(2)
    func(3.0)
    func('four')
}
{
    struct A<X> {x: X}
    let a: A<int> = A::<int>{x: 1}
    let a = A::<int>{x: 1}
}
{
    struct A<T> {}
    fn f<T>(a: A<T>) {}

    f::<bool>(A::<bool>{})
    let a = A::<bool>{}
    f::<bool>(a)
    f(A::<bool>{})
    f(a)

    f::<A<int>>(A::<A<int>>{})
    let a = A::<A<int>>{}
    f::<A<int>>(a)
    f(A::<A<int>>{})
    f(a)

    f::<A<A<float>>>(A::<A<A<float>>>{})
    let a = A::<A<A<float>>>{}
    f::<A<A<float>>>(a)
    f(A::<A<A<float>>>{})
    f(a)

    fn f<T>(a: A<A<T>>) {}
    f(A::<A<string>>{})
    f(A::<A<A<float>>>{})

    fn func<T, T2>(t: T, f: fn(T) -> T2) -> T2 {
        return f(t)
    }
    fn f(i: int) -> float {
        return 1.0
    }
    let r = func::<int, float>(1, f)
    assert(r == 1.0)

    let r = func(1, f)
    assert(r == 1.0)
}
{
    struct A<T> {
        t: T
    }
    let a = A::<int> {t: 42}
    let b = A::<A<int>> {t: a}
    let c = A::<A<A<int>>> {t: b}
    let d = A::<A<A<A<int>>>> {t: c}
    let e = d.t
    let f = e.t
    let g = f.t
    let h = g.t
    assert(h == 42)

// TODO: This should not be allowed: requires indirection, which is not yet possible
//    struct B<T> {
//        b: B::<T>
//    }

    struct A<A> {
        a: A
    }
    let a = A::<int>{a: 123}
    assert(a.a == 123)
}
{
    struct A<T> {
        v: T
    }
    let a = A::<string>{v: 'abc'}
    assert(a.v == 'abc')

    a.v = a.v + 'def'
    assert(a.v == 'abcdef')
}
{
    struct Pair<First, Second> {
        first: First
        second: Second
    }
    fn new_pair<A, B>(a: A, b: B) -> Pair<A, B> {
        return Pair::<A, B>{
            first: a,
            second: b,
        }
    }
    assert(false == new_pair(false, true).first)
    assert(1 == new_pair(1, 2).first)
    assert(3.0 == new_pair(2.0, 3.0).second)
    assert('five' == new_pair('four', 'five').second)
}

//***********************************************
//    tuples
//***********************************************
{
    let t0 = ()
    let p1 = (false)
    let t1 = (false,)
    let t2 = (false, 1)

    // Empty: unit type
    let t0: () = t0

    // No comma: parenthesized expression
    let p1: bool = p1

    let t1: (bool,) = t1
    let t2: (bool, int) = t2
}
{
    let t1 = (false,)
    let t2 = (false, 1)
    let t3 = (false, 1, 2.0)
    let t4 = (false, 1, 2.0, 'three')
    assert(t1.0 == t2.0 && t2.0 == t3.0 && t3.0 == t4.0 && t4.0 == false)
    assert(t2.1 == t3.1 && t3.1 == t4.1 && t4.1 == 1)
    assert(t3.2 == t4.2 && t4.2 == 2.0)
    assert(t4.3 == 'three')
}
{
    fn test(t: (int, string)) -> (int, string) {
        let r = t // copy reference
        r.0 = r.0 * 2
        r.1 = r.1 + r.1
        return t
    }
    let t = test((1, 'two'))
    assert(t.0 == 2)
    assert(t.1 == 'twotwo')
}
{
    struct Test<T> {
        v: (T, T)
    }
    let t = Test::<int>{v: (1, 2)}
    assert(t.v.0 == 1)
    assert(t.v.1 == 2)
}

//***********************************************
//    enumerations
//***********************************************
{
    enum E {
        X,
    }
    let e = E::X
    e = E::X
}
{
    enum E {
        X,
        Y,
    }
    let e = E::X
    e = E::Y
}
{
    enum E {
        X,
        Y(int),
    }
    let e = E::X
    e = E::Y(42)
    
    fn test(e: E) -> E {
        let e2 = e
        return e2
    }
    let e = test(E::X)
    let e = test(E::Y(42))

}
{
    enum E<T> {
        X(T),
        Y(T, T),
    }
    let ex = E::<int>::X(1)
    let ey = E::<int>::Y(2, 3)
    
    fn test(e: E<int>) -> E<int> {
        let e2 = e
        return e2
    }
    test(ex)
    test(ey)

    struct S<T> {
        x: E<int>
        y: E<T>
    }
    let s = S::<float>{
        x: E::<int>::X(1),
        y: E::<float>::Y(2.0, 3.0),
    }
}
