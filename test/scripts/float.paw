// float.paw

pub fn test_zeros() {
    assert(0.0 == 0.0);
    assert(0.00 == 0.0);
    assert(0.0e0 == 0.0);
    assert(0.0e1 == 0.0);
}

pub fn test_exponents() {
    assert(1e1 == 10.0);
    assert(10e-1 == 1.0);
    assert(10e+1 == 100.0);
    assert(10e-001 == 1.0);
    assert(10e+001 == 100.0);
}

fn check_parse(s: str, o: Option<float>) {
    match (s.parse_float(), o) {
        (Option::Some(a), Option::Some(b)) => assert(a == b),
        (Option::None, Option::None) => {},
        _ => panic("check failed"),
    }
}

pub fn test_parse_valid() {
    check_parse("0.0", Option::Some(0.0));
    check_parse("1.0", Option::Some(1.0));
    check_parse("10.0", Option::Some(10.0));
    check_parse("1e10", Option::Some(1e10));
    check_parse("1E10", Option::Some(1e10));
    check_parse("1e+10", Option::Some(1e+10));
}

pub fn test_parse_invalid() {
    check_parse("  1.0", Option::None);
    check_parse("1.0  ", Option::None);
    check_parse("  -1.0", Option::None);
    check_parse("-1.0  ", Option::None);
}

pub fn test_parse_integer_as_float() {
    check_parse("0", Option::Some(0.0));
    check_parse("1", Option::Some(1.0));
    check_parse("100", Option::Some(100.0));
}

pub fn test_parse_missing_leading_zero() {
    check_parse(".0", Option::Some(0.0));
}

pub fn test_parse_missing_trailing_zero() {
    check_parse("0.", Option::Some(0.0));
}

pub fn test_digit_separators() {
    assert(10_e1_0_0_ == 10e100);
    assert(1_0_.0_0e100 == 10e100);
}
