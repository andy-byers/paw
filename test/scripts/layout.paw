// layout.paw: Test memory layout of Paw objects

struct Pair<X, Y> {
    pub x: X,
    pub y: Y,
}

struct Trio<X, Y, Z> {
    pub x: X,
    pub y: Y,
    pub z: Z,
}


//
// Test projections
//

pub fn test_box() {
    let b = Trio{
        x: 1,
        y: 2,
        z: 3,
    };

    assert(b.x == 1);
    assert(b.y == 2);
    assert(b.z == 3);

    b.x = 4;
    b.y = 5;
    b.z = 6;

    assert(b.x == 4);
    assert(b.y == 5);
    assert(b.z == 6);
}

pub fn test_value() {
    let v = (1, 2, 3);

    assert(v.0 == 1);
    assert(v.1 == 2);
    assert(v.2 == 3);

    v.0 = 4;
    v.1 = 5;
    v.2 = 6;

    assert(v.0 == 4);
    assert(v.1 == 5);
    assert(v.2 == 6);
}


//
// Test nested projections
//

pub fn test_box_in_box() {
    let bb = Trio{
        x: 1,
        y: Pair{
            x: 2,
            y: 3,
        },
        z: 4,
    };

    assert(bb.x == 1);
    assert(bb.y.x == 2);
    assert(bb.y.y == 3);
    assert(bb.z == 4);

    bb.x = 5;
    bb.y.x = 6;
    bb.y.y = 7;
    bb.z = 8;

    assert(bb.x == 5);
    assert(bb.y.x == 6);
    assert(bb.y.y == 7);
    assert(bb.z == 8);

    bb.y = Pair{
        x: 9, 
        y: 0,
    };

    assert(bb.x == 5);
    assert(bb.y.x == 9);
    assert(bb.y.y == 0);
    assert(bb.z == 8);
}

pub fn test_box_in_value() {
    let bv = (1, Pair{x: 2, y: 3}, 4);

    assert(bv.0 == 1);
    assert(bv.1.x == 2);
    assert(bv.1.y == 3);
    assert(bv.2 == 4);

    bv.0 = 5;
    bv.1.x = 6;
    bv.1.y = 7;
    bv.2 = 8;

    assert(bv.0 == 5);
    assert(bv.1.x == 6);
    assert(bv.1.y == 7);
    assert(bv.2 == 8);

    bv.1 = Pair{
        x: 9,
        y: 0,
    };

    assert(bv.0 == 5);
    assert(bv.1.x == 9);
    assert(bv.1.y == 0);
    assert(bv.2 == 8);
}

pub fn test_value_in_value() {
    let vv = (1, (2, 3), 4);

    assert(vv.0 == 1);
    assert(vv.1.0 == 2);
    assert(vv.1.1 == 3);
    assert(vv.2 == 4);

    vv.0 = 5;
    vv.1.0 = 6;
    vv.1.1 = 7;
    vv.2 = 9;

    assert(vv.0 == 5);
    assert(vv.1.0 == 6);
    assert(vv.1.1 == 7);
    assert(vv.2 == 9);

    vv.1 = (9, 0);

    assert(vv.0 == 5);
    assert(vv.1.0 == 9);
    assert(vv.1.1 == 0);
    assert(vv.2 == 9);
}

pub fn test_value_in_box() {
    let vb = Trio{
        x: 1,
        y: (2, 3),
        z: 4,
    };

    assert(vb.x == 1);
    assert(vb.y.0 == 2);
    assert(vb.y.1 == 3);
    assert(vb.z == 4);

    vb.x = 5;
    vb.y.0 = 6;
    vb.y.1 = 7;
    vb.z = 8;

    assert(vb.x == 5);
    assert(vb.y.0 == 6);
    assert(vb.y.1 == 7);
    assert(vb.z == 8);

    vb.y = (9, 0);

    assert(vb.x == 5);
    assert(vb.y.0 == 9);
    assert(vb.y.1 == 0);
    assert(vb.z == 8);
}

pub fn test_value_in_value_in_box() {
    let vvb = Trio{
        x: 1,
        y: (2, (3, 4), 5),
        z: 6,
    };

    assert(vvb.x == 1);
    assert(vvb.y.0 == 2);
    assert(vvb.y.1.0 == 3);
    assert(vvb.y.1.1 == 4);
    assert(vvb.y.2 == 5);
    assert(vvb.z == 6);

    vvb.x = 7;
    vvb.y.0 = 8;
    vvb.y.1.0 = 9;
    vvb.y.1.1 = 0;
    vvb.y.2 = 1;
    vvb.z = 2;

    assert(vvb.x == 7);
    assert(vvb.y.0 == 8);
    assert(vvb.y.1.0 == 9);
    assert(vvb.y.1.1 == 0);
    assert(vvb.y.2 == 1);
    assert(vvb.z == 2);

    vvb.y = (3, (4, 5), 6);

    assert(vvb.x == 7);
    assert(vvb.y.0 == 3);
    assert(vvb.y.1.0 == 4);
    assert(vvb.y.1.1 == 5);
    assert(vvb.y.2 == 6);
    assert(vvb.z == 2);

    vvb.y.1 = (7, 8);

    assert(vvb.x == 7);
    assert(vvb.y.0 == 3);
    assert(vvb.y.1.0 == 7);
    assert(vvb.y.1.1 == 8);
    assert(vvb.y.2 == 6);
    assert(vvb.z == 2);
}

pub fn test_value_in_box_in_value_in_box() {
    let vbvb = Trio{
        x: 1,
        y: (
            2, 
            Trio{
                x: 3,
                y: (4, 5),
                z: 6,
            },
            7,
        ),
        z: 8,
    };

    assert(vbvb.x == 1);
    assert(vbvb.y.0 == 2);
    assert(vbvb.y.1.x == 3);
    assert(vbvb.y.1.y.0 == 4);
    assert(vbvb.y.1.y.1 == 5);
    assert(vbvb.y.1.z == 6);
    assert(vbvb.y.2 == 7);
    assert(vbvb.z == 8);

    vbvb.x = 9;
    vbvb.y.0 = 0;
    vbvb.y.1.x = 1;
    vbvb.y.1.y.0 = 2;
    vbvb.y.1.y.1 = 3;
    vbvb.y.1.z = 4;
    vbvb.y.2 = 5;
    vbvb.z = 6;

    assert(vbvb.x == 9);
    assert(vbvb.y.0 == 0);
    assert(vbvb.y.1.x == 1);
    assert(vbvb.y.1.y.0 == 2);
    assert(vbvb.y.1.y.1 == 3);
    assert(vbvb.y.1.z == 4);
    assert(vbvb.y.2 == 5);
    assert(vbvb.z == 6);

    vbvb.y = (
        7, 
        Trio{
            x: 8,
            y: (9, 0),
            z: 1,
        },
        2,
    );

    assert(vbvb.x == 9);
    assert(vbvb.y.0 == 7);
    assert(vbvb.y.1.x == 8);
    assert(vbvb.y.1.y.0 == 9);
    assert(vbvb.y.1.y.1 == 0);
    assert(vbvb.y.1.z == 1);
    assert(vbvb.y.2 == 2);
    assert(vbvb.z == 6);

    vbvb.y.1 = Trio{
        x: 3,
        y: (4, 5),
        z: 6,
    };

    assert(vbvb.x == 9);
    assert(vbvb.y.0 == 7);
    assert(vbvb.y.1.x == 3);
    assert(vbvb.y.1.y.0 == 4);
    assert(vbvb.y.1.y.1 == 5);
    assert(vbvb.y.1.z == 6);
    assert(vbvb.y.2 == 2);
    assert(vbvb.z == 6);

    vbvb.y.1.y = (7, 8);

    assert(vbvb.x == 9);
    assert(vbvb.y.0 == 7);
    assert(vbvb.y.1.x == 3);
    assert(vbvb.y.1.y.0 == 7);
    assert(vbvb.y.1.y.1 == 8);
    assert(vbvb.y.1.z == 6);
    assert(vbvb.y.2 == 2);
    assert(vbvb.z == 6);
}

pub fn test_list() {
    let vb = [
        1, 
        2,
        3, 
        4,
    ];

    assert(vb[0] == 1);
    assert(vb[1] == 2);
    assert(vb[2] == 3);
    assert(vb[3] == 4);

    vb[0] = 5;
    vb[1] = 6;
    vb[2] = 7;
    vb[3] = 8;

    assert(vb[0] == 5);
    assert(vb[1] == 6);
    assert(vb[2] == 7);
    assert(vb[3] == 8);
}

pub fn test_value_in_list() {
    let vc = [
        (1, 2),
        (3, 4),
    ];

    assert(vc[0].0 == 1);
    assert(vc[0].1 == 2);
    assert(vc[1].0 == 3);
    assert(vc[1].1 == 4);

    vc[0].0 = 5;
    vc[0].1 = 6;
    vc[1].0 = 7;
    vc[1].1 = 8;

    assert(vc[0].0 == 5);
    assert(vc[0].1 == 6);
    assert(vc[1].0 == 7);
    assert(vc[1].1 == 8);

    vc[0] = (9, 0);
    vc[1] = (1, 2);

    assert(vc[0].0 == 9);
    assert(vc[0].1 == 0);
    assert(vc[1].0 == 1);
    assert(vc[1].1 == 2);
}

pub fn test_value_in_value_in_list() {
    let vvc = [
        (1, (2, 3), 4),
        (5, (6, 7), 8),
    ];

    assert(vvc[0].0 == 1);
    assert(vvc[0].1.0 == 2);
    assert(vvc[0].1.1 == 3);
    assert(vvc[0].2 == 4);
    assert(vvc[1].0 == 5);
    assert(vvc[1].1.0 == 6);
    assert(vvc[1].1.1 == 7);
    assert(vvc[1].2 == 8);

    vvc[0].0 = 9;
    vvc[0].1.0 = 0;
    vvc[0].1.1 = 1;
    vvc[0].2 = 2;
    vvc[1].0 = 3;
    vvc[1].1.0 = 4;
    vvc[1].1.1 = 5;
    vvc[1].2 = 6;

    assert(vvc[0].0 == 9);
    assert(vvc[0].1.0 == 0);
    assert(vvc[0].1.1 == 1);
    assert(vvc[0].2 == 2);
    assert(vvc[1].0 == 3);
    assert(vvc[1].1.0 == 4);
    assert(vvc[1].1.1 == 5);
    assert(vvc[1].2 == 6);

    vvc[0].1 = (7, 8);
    vvc[1].1 = (9, 0);

    assert(vvc[0].0 == 9);
    assert(vvc[0].1.0 == 7);
    assert(vvc[0].1.1 == 8);
    assert(vvc[0].2 == 2);
    assert(vvc[1].0 == 3);
    assert(vvc[1].1.0 == 9);
    assert(vvc[1].1.1 == 0);
    assert(vvc[1].2 == 6);

    vvc[0] = (1, (2, 3), 4);
    vvc[1] = (5, (6, 7), 8);

    assert(vvc[0].0 == 1);
    assert(vvc[0].1.0 == 2);
    assert(vvc[0].1.1 == 3);
    assert(vvc[0].2 == 4);
    assert(vvc[1].0 == 5);
    assert(vvc[1].1.0 == 6);
    assert(vvc[1].1.1 == 7);
    assert(vvc[1].2 == 8);
}

pub fn test_value_in_box_in_list() {
    let vbc = [
        Pair{y: (2, 3), x: (1,)},
        Pair{y: (5, 6), x: (4,)},
    ];

    assert(vbc[0].x.0 == 1);
    assert(vbc[0].y.0 == 2);
    assert(vbc[0].y.1 == 3);
    assert(vbc[1].x.0 == 4);
    assert(vbc[1].y.0 == 5);
    assert(vbc[1].y.1 == 6);

    vbc[0].x.0 = 7;
    vbc[0].y.0 = 8;
    vbc[0].y.1 = 9;
    vbc[1].x.0 = 0;
    vbc[1].y.0 = 1;
    vbc[1].y.1 = 2;

    assert(vbc[0].x.0 == 7);
    assert(vbc[0].y.0 == 8);
    assert(vbc[0].y.1 == 9);
    assert(vbc[1].x.0 == 0);
    assert(vbc[1].y.0 == 1);
    assert(vbc[1].y.1 == 2);

    vbc[0].x = (3,);
    vbc[0].y = (4, 5);
    vbc[1].x = (6,);
    vbc[1].y = (7, 8);

    assert(vbc[0].x.0 == 3);
    assert(vbc[0].y.0 == 4);
    assert(vbc[0].y.1 == 5);
    assert(vbc[1].x.0 == 6);
    assert(vbc[1].y.0 == 7);
    assert(vbc[1].y.1 == 8);

    vbc[0] = Pair{x: (9,), y: (0, 1)};
    vbc[1] = Pair{x: (2,), y: (3, 4)};

    assert(vbc[0].x.0 == 9);
    assert(vbc[0].y.0 == 0);
    assert(vbc[0].y.1 == 1);
    assert(vbc[1].x.0 == 2);
    assert(vbc[1].y.0 == 3);
    assert(vbc[1].y.1 == 4);
}

pub fn test_list_in_value() {
    let cv = (
        [1, 2],
        [3, 4],
    );    

    assert(cv.0[0] == 1);
    assert(cv.0[1] == 2);
    assert(cv.1[0] == 3);
    assert(cv.1[1] == 4);

    cv.0[0] = 5;
    cv.0[1] = 6;
    cv.1[0] = 7;
    cv.1[1] = 8;

    assert(cv.0[0] == 5);
    assert(cv.0[1] == 6);
    assert(cv.1[0] == 7);
    assert(cv.1[1] == 8);

    cv.0 = [9, 0];
    cv.1 = [1, 2];

    assert(cv.0[0] == 9);
    assert(cv.0[1] == 0);
    assert(cv.1[0] == 1);
    assert(cv.1[1] == 2);
}

pub fn test_list_in_value_in_value() {
    let cvv = (
        ([1, 2], [3]),
        ([4], [5]),
    );    

    assert(cvv.0.0[0] == 1);
    assert(cvv.0.0[1] == 2);
    assert(cvv.0.1[0] == 3);
    assert(cvv.1.0[0] == 4);
    assert(cvv.1.1[0] == 5);

    cvv.0.0[0] = 6;
    cvv.0.0[1] = 7;
    cvv.0.1[0] = 8;
    cvv.1.0[0] = 9;
    cvv.1.1[0] = 0;

    assert(cvv.0.0[0] == 6);
    assert(cvv.0.0[1] == 7);
    assert(cvv.0.1[0] == 8);
    assert(cvv.1.0[0] == 9);
    assert(cvv.1.1[0] == 0);

    cvv.0.0 = [1];
    cvv.0.1 = [2];
    cvv.1.0 = [3];
    cvv.1.1 = [4];

    assert(cvv.0.0[0] == 1);
    assert(cvv.0.1[0] == 2);
    assert(cvv.1.0[0] == 3);
    assert(cvv.1.1[0] == 4);

    cvv.0 = ([3], [4, 5]);
    cvv.1 = ([], [6]);

    assert(cvv.0.0[0] == 3);
    assert(cvv.0.1[0] == 4);
    assert(cvv.0.1[1] == 5);
    assert(cvv.1.1[0] == 6);
}

pub fn test_list_in_value_in_box() {
    let cvv = Pair{
        x: ([1, 2], [3]),
        y: ([4], [5]),
    };    

    assert(cvv.x.0[0] == 1);
    assert(cvv.x.0[1] == 2);
    assert(cvv.x.1[0] == 3);
    assert(cvv.y.0[0] == 4);
    assert(cvv.y.1[0] == 5);

    cvv.x.0[0] = 6;
    cvv.x.0[1] = 7;
    cvv.x.1[0] = 8;
    cvv.y.0[0] = 9;
    cvv.y.1[0] = 0;

    assert(cvv.x.0[0] == 6);
    assert(cvv.x.0[1] == 7);
    assert(cvv.x.1[0] == 8);
    assert(cvv.y.0[0] == 9);
    assert(cvv.y.1[0] == 0);

    cvv.x.0 = [1];
    cvv.x.1 = [2];
    cvv.y.0 = [3];
    cvv.y.1 = [4];

    assert(cvv.x.0[0] == 1);
    assert(cvv.x.1[0] == 2);
    assert(cvv.y.0[0] == 3);
    assert(cvv.y.1[0] == 4);

    cvv.x = ([3], [4, 5]);
    cvv.y = ([], [6]);

    assert(cvv.x.0[0] == 3);
    assert(cvv.x.1[0] == 4);
    assert(cvv.x.1[1] == 5);
    assert(cvv.y.1[0] == 6);
}

pub fn test_list_in_box() {
    let cb = Pair {
        x: [1, 2],
        y: [3, 4],
    };    

    assert(cb.x[0] == 1);
    assert(cb.x[1] == 2);
    assert(cb.y[0] == 3);
    assert(cb.y[1] == 4);

    cb.x[0] = 5;
    cb.x[1] = 6;
    cb.y[0] = 7;
    cb.y[1] = 8;

    assert(cb.x[0] == 5);
    assert(cb.x[1] == 6);
    assert(cb.y[0] == 7);
    assert(cb.y[1] == 8);

    cb.x = [9, 0];
    cb.y = [1, 2];

    assert(cb.x[0] == 9);
    assert(cb.x[1] == 0);
    assert(cb.y[0] == 1);
    assert(cb.y[1] == 2);
}

pub fn test_range_getter() {
    let c = [
        (1, 2, 3),
        (4, 5, 6),
        (7, 8, 9),
    ];

    assert(c[..-1][0].0 == 1);
    assert(c[..-1][0].1 == 2);
    assert(c[..-1][0].2 == 3);
    assert(c[1..-1][0].0 == 4);
    assert(c[1..-1][0].1 == 5);
    assert(c[1..-1][0].2 == 6);
    assert(c[2..][0].0 == 7);
    assert(c[2..][0].1 == 8);
    assert(c[2..][0].2 == 9);
}

pub fn test_range_setter() {
    let c = [
        (1, 2),
        (3, 4),
        (5, 6),
        (7, 8),
        (9, 0),
    ];

    let check_eq = |a: [(int, int)], b: [(int, int)]| {
        assert(#a == #b);
        for i in 0..#a {
            assert(a[i].0 == b[i].0);
            assert(a[i].1 == b[i].1);
        }
    };

    c[1..4] = [];
    check_eq(c, [(1, 2), (9, 0)]);

    c[..1] = [(2, 3), (4, 5)];
    check_eq(c, [(2, 3), (4, 5), (9, 0)]);

    c[-2..] = [(3, 4), (5, 6), (7, 8)];
    check_eq(c, [(2, 3), (3, 4), (5, 6), (7, 8)]);
}

enum Enum<T> {
    First,
    Second(T),
    Third((T, T)),
}

fn match_enum(e: Enum<int>) -> int {
    match e {
        Enum::First => 1,
        Enum::Second(a) => a,
        Enum::Third((a, b)) => a + b,
    }
}

pub fn test_enum() {
    let a = Enum::<int>::First;
    let b = Enum::<int>::Second(123);
    let c = Enum::<int>::Third((456, 789));

    assert(match_enum(Enum::First) == 1);
    assert(match_enum(Enum::Second(2)) == 2);
    assert(match_enum(Enum::Third((3, 4))) == 7);
}

pub fn test_basic_upvalues() {
    let up = (1, (2, 3), 4);

    let outer = || up;
    let inner = || up.1;

    let elements = (
        || up.0,
        || up.1.0,
        || up.1.1,
        || up.2,
    );

    assert(outer().0 == 1);
    assert(outer().1.0 == 2);
    assert(outer().1.1 == 3);
    assert(outer().2 == 4);

    assert(inner().0 == 2);
    assert(inner().1 == 3);

    assert(elements.0() == 1);
    assert(elements.1() == 2);
    assert(elements.2() == 3);
    assert(elements.3() == 4);
}

pub fn test_sanity_check_upvalues() {
    let _ = "filler a";
    let v1 = 1;
    let _ = "filler b";
    let f = || {    
        // locals: v2
        // upvalues: v1
        let _ = "filler c";
        let v2 = 2;
        let _ = "filler d";
        || {
            // locals: v3
            // upvalues: v1, v2
            let _ = "filler e";
            let v3 = 3;
            let _ = "filler f";
            v1 + v2 + v3
        }
    };
    assert(f()() == 6);
}

pub fn test_upvalues() {
    let t = ((1, 2), 3);
    assert((|| t.0.0)() == 1);
    assert((|| t.0.1)() == 2);
    assert((|| t.1)() == 3);
    assert((|| t.1)() == 3);
    assert((|| || t.0.0)()() == 1);
    assert((|| || t.0.1)()() == 2);
    assert((|| || t.1)()() == 3);
    assert((|| || t.1)()() == 3);
    (|| {
        let t2 = (4, ((5, 6),));
        assert((|| t2.1.0.0)() == 5);
        assert((|| t.0.0)() == 1);
        assert((|| t.0.1)() == 2);
        assert((|| t.1)() == 3);
        assert((|| t.1)() == 3);
    })();
}

pub fn test_value_in_list_in_upvalue() {
    let vc = [(1, 2), (3, 4)];
    (|| {
        assert(vc[0].0 == 1);
        assert(vc[0].1 == 2);
        assert(vc[1].0 == 3);
        assert(vc[1].1 == 4);

        vc[0].0 = 5;
        vc[0].1 = 6;
        vc[1].0 = 7;
        vc[1].1 = 8;

        assert(vc[0].0 == 5);
        assert(vc[0].1 == 6);
        assert(vc[1].0 == 7);
        assert(vc[1].1 == 8);
    })()
}

pub fn test_nested_upvalues() {
    let f = || {    
        let x = 3;
        let y = 4;
        let z = 5;
        || x + y + z
    };
    assert(f()() >= 3 + 4 + 5);

    let t = (1, 2);
    let f = || {
       t.0 + t.1
    };
    assert(f() == 3);

    let t = (1, 2, 3);
    let f = || { // upvalues: t (local)
        let t2 = (4, 5);
        || { // upvalues: t (nonlocal), t2 (local)
           t.0 + t.1 + t.2 + t2.0 + t2.1
        }
    };
    assert(f()() == 15);
}

pub fn test_reuse_upvalue() {
    let t = (1, 2);
    let f = || {
        let t2 = (t.1, t.0);
        || {
            t2.0 + t2.1
        }
    };
    assert(f()() == 3);

    let t = (1, 2);
    let f = || {
        let t2 = (t.0, t.1);
        || {
            t2.0 = 3;
            t2.1 = 4;
            t2.0 + t2.1
        }
    };
    assert(f()() == 7);
    assert(t.0 == 1);
    assert(t.1 == 2);
}

pub fn test_get_value_in_upvalue() {
    let outer = (1, (2, 3), 4);
    let f = || {
        let inner = ((5,), 6);
        || {
           outer.0 + outer.1.0 + outer.1.1 + outer.2
               + inner.0.0 + inner.1
        }
    };
    assert(f()() == 21);
}

pub fn test_set_value_in_upvalue() {
    let outer = (1, (2, 3), 4);
    let f = || {
        let inner = ((5, (6,)), 7);
        || {
            outer.1.1 = outer.1.1 + 1;    
            inner.0.0 = inner.0.0 + 1;
            outer.0 + outer.1.0 + outer.1.1 + outer.2
                + inner.0.0 + inner.0.1.0 + inner.1
        }
    };
    assert(f()() == 30);
    assert(f()() == 31);
    assert(outer.1.1 == 5);
}

pub fn test_map() {
    let c = [1: 1, 2: 2, 3: 3];
    assert(c[1] == 1);
    assert(c[2] == 2);
    assert(c[3] == 3);

    c[2] = 20;
    c[3] = 30;
    c[4] = 40;
    assert(c[1] == 1);
    assert(c[2] == 20);
    assert(c[3] == 30);
    assert(c[4] == 40);
}

pub fn test_value_in_map() {
    let c = [1: (123, 234)];
    assert(c[1].0 == 123);
    assert(c[1].1 == 234);

    c[1].0 = 100;
    c[2] = (300, 400);

    assert(c[1].0 == 100);
    assert(c[1].1 == 234);
    assert(c[2].0 == 300);
    assert(c[2].1 == 400);
}

inline struct Struct {
    pub x: (int, [Option<Struct>]),
}

pub fn test_misc() {
   let s = Struct{x: (1, [Option::None])}; 
    assert(s.x.0 == 1);
    assert(s.x.1[0].is_none());

    s.x.1[0] = Option::Some(Struct{x: (2, [Option::None])});
    assert(s.x.0 == 1);
    assert(s.x.1[0].unwrap().x.0 == 2);
    assert(s.x.1[0].unwrap().x.1[0].is_none());
}

pub fn test_return_not_overwritten() {
    // "i" and "s" interfere in the following closure:
    //      in: f i s
    //     out: 1 s i
    let f = |i: int, s: str| {
        Option::Some((s, i))
    };

    let t = f(1, "two");
    assert(t.unwrap().0 == "two");
    assert(t.unwrap().1 == 1);
}

pub fn test_return_not_overwritten_2() {
    let f = |a: (bool, int), b: Option<str>, c: (float, str, int)| {
        Option::Some((c.2, c.1, c.0, b?, a.1, a.0))
    };

    let t = f((true, 2), Option::Some("three"), (4.0, "five", 6));
    assert(t.unwrap().0 == 6);
    assert(t.unwrap().1 == "five");
    assert(t.unwrap().2 == 4.0);
    assert(t.unwrap().3 == "three");
    assert(t.unwrap().4 == 2);
    assert(t.unwrap().5 == true);
}

inline struct SpecialCase1 {
    pub string: str,
    pub list: [int],
}

pub fn test_special_case_1() {
    let data = [
        SpecialCase1{
            string: "a",
            list: [1, 2],
        },
        SpecialCase1{
            string: "b",
            list: [3, 4, 5],
        },
    ];

    assert(#data[0].list == 2);
    assert(#data[1].list == 3);
}

inline struct SpecialCase2 {
    pub a: (int, int),
    pub b: int,
}

pub fn test_special_case_2() {
    let f = |x: SpecialCase2| x.b; 
    let x = SpecialCase2{
        a: (1, 2),
        b: 3, 
    };
    assert(f(x) == 3);
}

struct SpecialCase3 {
    pub value: Inner3,
}

inline enum Inner3 {
    First,
    Second(int),

    pub fn method(self) {}
}

pub fn test_special_case_3() {
    let s = SpecialCase3{
        value: Inner3::First,
    };

    s.value.method();
}

enum ZeroOrTwo {
    Zero,
    Two(str, str),
}

pub fn test_enum_special_case_1() {
    let list = [];
    list.push(ZeroOrTwo::Zero);

    match list[0] {
        ZeroOrTwo::Zero => (),
        _ => (),
    }
}

inline enum OneOrTwo {
    One(str),
    Two(str, str),
}

pub fn test_enum_special_case_2() {
    let list = [OneOrTwo::One("x")];

    match list[0] {
        OneOrTwo::One(x) => (),
        _ => (),
    }
}

inline struct Empty {
    pub fn method(self) {}
}

pub fn test_empty_struct() {
    let e = Empty;
    e.method();

    let f = |x| x;
    e = f(e);
}

