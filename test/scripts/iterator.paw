// iterator.paw

pub fn test_iterator_for_loop() {
    let i = 1;
    for e in [1, 2, 3] {
        assert(e == i);
        i = i + 1;
    }

    let i = 0;
    for k in [1: 1, 2: 2, 3: 3] {
        i = i + 1 ;
    }
    assert(i == 3);

    let a = [1, 2, 3];
    let b = [];
    for e in a {
        b.push(e);
        a.pop();
    }
    assert(#b == 2);
    assert(b[0] == 1);
    assert(b[1] == 2);
}

pub fn test_misc() {
    let N = 2;
    {
        let a = [];
        for i = 0, N {
            for j in [0] {
                a.push(i + j);
            }
        }
        assert(#a == 2);
        assert(a[0] == 0);
        assert(a[1] == 1);
    }
    {
        let a = [];
        for i = 0, N {
            let j = 0;
            while j < N {
                a.push(i + j);
                j = j + 1;
            }
        }
        assert(#a == 4);
        assert(a[0] == 0);
        assert(a[1] == 1);
        assert(a[2] == 1);
        assert(a[3] == 2);
    }
    {
        let a = [];
        for i = 0, N {
            for j in [0] {
                let k = 0;
                while k < N {
                    a.push(i + j + k);
                    k = k + 1;
                }
            }
        }
        assert(#a == 4);
        assert(a[0] == 0);
        assert(a[1] == 1);
        assert(a[2] == 1);
        assert(a[3] == 2);
    }
    {
        let I = [0, 1, 2, 3];
        for i = 0, 4 {
            assert(i == I[i]);
        }

        let n = 0;
        let I = [2, 3];
        for i = 2, 4 {
            assert(i == I[n]);
            n = n + 1;
        }

        let n = 0;
        let I = [1, 3];
        for i = 1, 4, 2 {
            assert(i == I[n]);
            n = n + 1;
        }
    }

    {
        let n = 0;
        for i = 0, 8 {
            n = n + 1;
            break;
        }
        assert(n == 1);
    }

    {
        let test = |n| {
            let f = || -1;
            for _ = 0, 10 {
                if n == 0 {
                    let _0 = 0;
                    f = || n + _0;
                    break;
                } else if n == 1 {
                    if n == 1 {
                        let _1 = 1;
                        f = || n + _1;
                        break;
                    }
                } else if n == 2 {
                    if n == 2 {
                        if n == 2 {
                            let _2 = 2;
                            f = || n + _2;
                            break;
                        }
                    }
                }
            }
            return f();
        };
        assert(test(0) == 0);
        assert(test(1) == 2);
        assert(test(2) == 4);
    }
    {
        let a = 42;
        while true {
            let b = 1;
            while true {
                break;
            }
            {
                assert(b == 1);
                break;
            }
            let c = 2;
            let d = 3;
        }
        assert(a == 42);
    }
}

