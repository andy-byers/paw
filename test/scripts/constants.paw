// constants.paw

fn fold_int_special_cases(i: int) {
    assert(i + 0 == i);
    assert(0 + i == i);
    assert(i - 0 == i);
    assert(i * 0 == 0);
    assert(0 * i == 0);
    assert(i / 1 == i);
    assert(i % 1 == 0);

    assert(i & 0 == 0);
    assert(0 & i == 0);
    assert(i | 0 == i);
    assert(0 | i == i);
    assert(i ^ 0 == i);
    assert(0 ^ i == i);
    assert(i << 0 == i);
    assert(i >> 0 == i);
    if i >= 0 {
        assert(0 << i == 0);
        assert(0 >> i == 0);
    }

    assert(i - i == 0);
    assert(i / i == 1);
    assert(i % i == 0);

    assert(i & i == i);
    assert(i | i == i);
    assert(i ^ i == 0);
}

pub fn test_fold_int_special_cases() {
    fold_int_special_cases(123);
    fold_int_special_cases(-456);
}

// NOTE: Float multiplication with 0 cannot be folded, because the sign of the
//       non-constant variable cannot be known until runtime. Could result in
//       either 0.0 or -0.0.
fn fold_float_special_cases(f: float) {
    assert(f + 0.0 == f);
    assert(0.0 + f == f);
    assert(f - 0.0 == f);
    assert(f / 1.0 == f);

    assert(f - f == 0.0);
    assert(f / f == 1.0);
    assert(f % f == 0.0);

}

pub fn test_fold_float_special_cases() {
    fold_float_special_cases(12.3);
    fold_float_special_cases(-45.6);
}

fn fold_str_special_cases(s: str) {
    assert(s ++ "" == s);
    assert("" ++ s == s);
}

pub fn test_fold_str_special_cases() {
    fold_str_special_cases("abc");
}

