// readme.paw

use io;

fn println(msg: str) {
    print(msg + '\n');
}

fn show_usage() {
    println('usage: readme PATHNAME');
    println('PATHNAME = path to README.md');
}

fn read_file_to_string(pathname: str) -> str {
    let file = io::File::open(pathname, 'r');

    let result = '';
    let chunk = '';
    do {
        chunk = file.read(1024);
        result = result + chunk;
    } while chunk != '';

    return result;
}

fn isspace(s: str) -> bool {
    assert(#s == 1);
    return s[0] == ' '
        || s[0] == '\n'
        || s[0] == '\r'
        || s[0] == '\f'
        || s[0] == '\t'
        || s[0] == '\v';

}

fn stripped(s: str) -> str {
    let begin = 0;
    while begin < #s && isspace(s[begin]) {
        begin = begin + 1;
    }
    let end = #s;
    while end > 0 && isspace(s[end - 1]) {
        end = end - 1;
    }
    return s[begin:end];

}

fn contains(haystack: str, needle: str) -> bool {
    return haystack.find(needle) >= 0;
}

fn split_into_sources(contents: str) -> Option<[str]> {
    let in_source = false;
    let lines = contents.split('\n');
    let result = [];
    let source = '';
    for i in range(0, #lines, 1) {
        let line = stripped(lines[i]);
        if in_source {
            if contains(line, '```') {
                if line != '```' {
                    println('expected "```" but found "' + line + '"');
                    return Option::None;
                }
                in_source = false;
                result.push(source);
                source = '';
            } else {
                source = source + line + '\n';
            }
        } else if (contains(line, '```')) {
            if line != '```paw' {
                println('expected "```paw" but found "' + line + '"');
                return Option::None;
            }
            in_source = true;
        }
    }
    if in_source {
        println('unterminated code block');
        return Option::None;
    }
    return Option::Some(result);
}

fn dump_source_file(filename: str, source: str) {
    let file = io::File::open(filename, 'w');
    file.write(source);
}

pub fn main(args: [str]) -> int {
    if #args != 2 {
        println('expected positional argument "PATHNAME"');
        show_usage();
        return -1;
    }
    let contents = read_file_to_string(args[1]);
    match split_into_sources(contents) {
        Option::Some(sources) => {
            for i in range(0, #sources, 1) {
                let filename = 'source_' + i.to_string() + '.paw';
                dump_source_file(filename, sources[i]);
            }
        },
        Option::None => {
            return -1;
        },
    }
}

