// struct.paw

struct Empty;

struct Integer {
    pub value: int,
}

pub fn test_struct_fields() {
    let i: Integer = Integer{value: 123};
    let i = Integer{value: 123};
}

struct NestedInt {
    pub value: Integer,
}

pub fn test_struct_syntax() {
    let i = Integer{value: 123}; {/* this is an empty block */}
    {} {}{}
    let i = i;
    {}
    let i = i.value;
    assert(i == 123);

    // A 'CompositeLit' can start a suffix chain ('.' must be on the 
    // same line as the '}' due to auto ';' insertion)
    let nested = NestedInt{value: Integer{value: 123}}.value.value;
    assert(nested == 123);
}

struct Inner {
    pub a: int,
    pub b: str,
    pub c: Empty,
}

struct Outer {
    pub a: bool,
    pub b: Inner,
}

pub fn test_nested_struct() {
    let o = Outer{
        a: false,
        b: Inner{
            a: 1,
            b: 'two',
            c: Empty,
        },
    };
    assert(o.b.a == 1);
    assert(o.b.b == 'two');
}

