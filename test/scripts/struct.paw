// struct.paw

struct Empty;

pub fn test_unit_struct() {
    let empty: Empty = Empty;
    let empty = Empty;
    let f = |x, y| {};
    f(Empty, Empty);
}

struct Integer {
    value: int,
}

pub fn test_struct_fields() {
    let i: Integer = Integer{value: 123};
    let i = Integer{value: 123};
}

struct NestedInt {
    value: Integer,
}

pub fn test_struct_syntax() {
    let i = Integer{value: 123}; {/* this is an empty block */}
    {} {}{}
    let i = i;
    {}
    let i = i.value;
    assert(i == 123);

    // A 'CompositeLit' can start a suffix chain ('.' must be on the 
    // same line as the '}' due to auto ';' insertion)
    let nested = NestedInt{value: Integer{value: 123}}.value.value;
    assert(nested == 123);
}

struct Inner {
    a: int,
    b: str,
    c: Empty,
}

struct Outer {
    a: bool,
    b: Inner,
}

pub fn test_nested_struct() {
    let o = Outer{
        a: false,
        b: Inner{
            a: 1,
            b: 'two',
            c: Empty,
        },
    };
    assert(o.b.a == 1);
    assert(o.b.b == 'two');
}

pub fn instantiate_in_signature<T>(s: Struct<T>) -> Struct<int> {
    return Struct{v: 42};
}

struct Struct<T> {
    v: T
}

pub fn test_instantiate_in_signature() {
    let s = instantiate_in_signature(Struct{v: true});
    assert(s.v == 42);
}


