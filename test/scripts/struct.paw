
struct Empty {}

fn test_empty_struct() {
    let empty: Empty = Empty {}
    let empty = Empty{}
}

struct Integer {
    value: int,
}

fn test_struct_fields() {
    let i: Integer = Integer{value: 123}
    let i = Integer{value: 123}
}

struct NestedInt {
    value: Integer,
}

fn test_struct_syntax() {
    let i = Integer{value: 123} {/* this is an empty block */}
    {} {}{}
    // Automatic semicolon insertion causes the next 2 lines to be parsed
    // as an Ident followed by a Block.
    let i = i
    {} 
    let i = i.value
    assert(i == 123)

    // A 'CompositeLit' can start a suffix chain ('.' must be on the 
    // same line as the '}' due to auto ';' insertion)
    let nested = NestedInt{value: Integer{value: 123}}.value.value
    assert(nested == 123)
}

struct Inner {
    a: int,
    b: float,
    c: str,
}

struct Outer {
    a: bool,
    b: Inner,
}

fn test_nested_struct() {
    let o = Outer{
        a: false,
        b: Inner{
            a: 1,
            b: 2.0,
            c: 'three',
        },
    }
    assert(o.b.a == 1)
    assert(o.b.b == 2.0)
    assert(o.b.c == 'three')
}
