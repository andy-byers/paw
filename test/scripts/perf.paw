
let driver = Driver()
let N = 500

driver['perf-fornum'] = fn(n) {
    for i = 0,n {}
}

driver['perf-array-push'] = fn(n) {
    let a = []
    for i = 0,n {
        a.push(i)
    }
}

driver['perf-array-insert-front'] = fn(n) {
    let a = []
    for i = 0,n {
        a.insert(0, i)
    }
}

driver['perf-array-insert-middle'] = fn(n) {
    let a = []
    for i = 0,n {
        a.insert(#a // 2, i)
    }
}

driver['perf-map-setitem'] = fn(n) {
    let m = {}
    for i = 0,n {
        m[i] = i
    }
}

{
    fn f() {}
    driver['perf-call-0'] = fn(n) {
        for i = 0,n {
            f()
        }
    }

    fn f(a) {}
    driver['perf-call-1'] = fn(n) {
        for i = 0,n {
            f(i)
        }
    }

    fn f(a, b) {}
    driver['perf-call-2'] = fn(n) {
        for i = 0,n {
            f(i, i)
        }
    }

    fn f(a, b, c) {}
    driver['perf-call-3'] = fn(n) {
        for i = 0,n {
            f(i, i, i)
        }
    }
}

{
    -- Data for tests, captured by the test case functions in 
    -- this block
    let int_arr = []
    let str_arr = []
    let int_map = {}
    let str_map = {}
    for i = 0,N {
        int_arr.push(i)
        int_map[i] = i

        let s = str(i)
        str_arr.push(s)
        str_map[s] = s
    }

    driver['perf-array-iter'] = fn(n) {
        for x in int_arr {}
    }

    driver['perf-map-iter'] = fn(n) {
        for x in int_map {}
    }

    driver['perf-map-get-int'] = fn(n) {
        for x in int_arr {
            let _ = int_map[x]
        }
    }

    driver['perf-map-get-str'] = fn(n) {
        for x in str_arr {
            let _ = str_map[x]
        }
    }

    fn add_accessors(nattr) {
        class Class {}
        let obj = Class()
        for i = 0,nattr {
            setattr(obj, str(i), i)
        }
        driver['perf-obj-getattr-' ++ nattr] = fn(n) {
            for i = 0,n {
                let _ = getattr(obj, str(i % nattr))
            }
        }
        driver['perf-obj-setattr-' ++ nattr] = fn(n) {
            for i = 0,n {
                setattr(obj, str(i % nattr), i + 1)
            }
        }

        let obj = Class()
        for i = 0,nattr {
            setattr(obj, str(i), fn() {})
        }
        driver['perf-obj-invoke-' ++ nattr] = fn(n) {
            for i = 0,n {
                getattr(obj, str(i % nattr))()
            }
        }
    }
    add_accessors(10)
    add_accessors(100)
    add_accessors(1000)
}

driver.dispatch(N, null, null)
