// primitive.paw

pub fn test_operations() {
    let a = 1;
    a + 1; // unused result
    let b = 2 + 3;
    a + b + 2; // unused result
    let c = a + b * a + b;
    a + b + c + 2 + 3; // unused result
    assert(c == 1 + (2 + 3) * 1 + (2 + 3));
    assert(c == 11);
    assert(b == 5);
    assert(a == 1);

    a = 100;
    b = b + a;
    assert(c == 11);
    assert(b == 105);
    assert(a == 100);
}

pub fn test_initializer_annotations() {
    let i: int = 123;
    let s: str = "abc";
    let b: bool = true;
    let f: float = 1.0;

    assert(i == 123);
    assert(s == "abc");
    assert(b == true);
    assert(f == 1.0);
}

pub fn test_initializer_inference() {
    let i = 123;
    let s = "abc";
    let b = true;
    let f = 1.0;

    assert(i == 123);
    assert(s == "abc");
    assert(b == true);
    assert(f == 1.0);
}

pub fn test_shadowed_identifiers() {
    let a = "abc";
    {
        let a = true;
        let a = "def";
    }
    assert(a == "abc");
}

pub fn test_rebound_identifiers() {
    let a = 123;
    assert(a == 123);
    let a = 456.0;
    assert(a == 456.0);
    let a = "abc";
    assert(a == "abc");

    let x = 100;
    let x = x;
    let x = x + 23;
    assert(x == 123);
}

pub fn test_conversions() {
    let b = 0 as bool;
    assert(b == false);
    let b = 1 as bool;
    assert(b == true);
    let b = -11 as bool;
    assert(b == true);

    let b = 0.0 as bool;
    assert(b == false);
    let b = 0.1 as bool;
    assert(b == true);

    let i = 1.0 as int;
    assert(i == 1);
    let i = 1.9 as int;
    assert(i == 1);
    let i = -1.9 as int;
    assert(i == -1);

    let f = 1 as float;
    assert(f < 1.1);
    let f = -10 as float;
    assert(f > -10.1);

    let i = 0;
    let b = i as bool;
    let i = b as int;
    assert(i == 0);

    let i = 1234;
    let b = i as bool;
    let i = b as int;
    assert(i == 1);
}

pub fn test_lots_of_strings() {
    let alphabet = "abcdefghijklmnopqrstuvwxyz";

    // put strings in a list so they don"t get collected
    let v = [];
    for i in 0..#alphabet {
        for j in 0..#alphabet {
            let s = alphabet[..i] + alphabet[j..]
                  + alphabet[i..] + alphabet[..j];
            v.push(s);
        }
    }
}

