// operator.paw

{
    let s = ''
    s = s + 'abc'
    s = s + s
    assert(s == 'abcabc')
}

// Arithmetic operator precedence:
{
    assert(5 == 1 + 2 * 3 - 4 / 2)
    assert(8 == 1 << 2 * 2 >> 1)
    assert(-3 == 1 | ~2 ^ 3 & 4)

    // '==' and '!=' bind tighter than '&&' and '||'
    assert(1 == 1 && 2 == 2) 

    // Bitwise operators bind tighter than comparisons
    assert(4 & 5 == 4)
//    assert(!(4 & int(5 == 4)))
// TODO: int() conversion
}

// Comparisons:
{
    fn test_icmp(a: int, b: int) {
        assert(a == a)
        assert(a != b)
        assert(a <= a)
        assert(a <= b)
        assert(a >= a)
        assert(b >= a)
        assert(a < b)
        assert(b > a)
    }
    test_icmp(1, 2)
    test_icmp(-1, 1)
    test_icmp(123, 124)

    fn test_scmp(a: string, b: string) {
        assert(a == a)
        assert(a != b)
        assert(a <= a)
        assert(a <= b)
        assert(a >= a)
        assert(b >= a)
        assert(a < b)
        assert(b > a)
    }
    test_scmp('a', 'b')
    test_scmp('ab', 'abc')
    test_scmp('abc', 'abd')
}

// TODO
//// Conversions:
//{
//    assert(1 == int(true)) 
//    assert(1.0 == float(true)) 
//    assert(1 == int(1))      
//    assert(1.0 == float(1))      
//}

{
    assert(0b0111 == (0b0110 | 0b0011))
    assert(0b0010 == (0b0110 & 0b0011))
    assert(0b0101 == (0b0110 ^ 0b0011))
}

// Conditional expressions:
{
    assert('true' == (true ?? 'true' :: 'false'))
    assert('false' == (false ?? 'true' :: 'false'))

    assert('true' == (1 + 1 + 1 == 3 ?? 'true' :: 'false'))
    assert('false' == (0 + 0 + 0 == 3 ?? 'true' :: 'false'))

    assert(42 == (true ?? 40 + 2 :: 0))
    assert(0 == (false ?? 40 + 2 :: 0))
    assert(42 == (false ?? 0 :: 40 + 2))
    assert(0 == (true ?? 0 :: 40 + 2))

    assert(0 == (true ?? 0 :: false ?? 1 :: 2))
    assert(1 == (false ?? 0 :: true ?? 1 :: 2))
    assert(2 == (false ?? 0 :: false ?? 1 :: 2))

    assert(0 == (true ?? true ?? 0 :: 1 :: 2))
    assert(1 == (true ?? false ?? 0 :: 1 :: 2))
    assert(2 == (false ?? false ?? 0 :: 1 :: 2))

    let x = false ?? 1 :: 0
    assert(x == 0)
    let x = true ?? 1 :: 0
    assert(x == 1)

    fn test(v: int) -> int {
        return v == 1 ?? 10 :: 
               v == 2 ?? 20 ::
               v == 3 ?? 30 :: 40
    }
    assert(40 == test(0))
    assert(10 == test(1))
    assert(20 == test(2))
    assert(30 == test(3))
    assert(40 == test(4))
}
