// operator.paw

pub fn test_operator_precedence() {
    assert(5 == 1 + 2 * 3 - 4 / 2);
    assert(8 == 1 << 2 * 2 >> 1);
    assert(-3 == 1 | ~2 ^ 3 & 4);

    // '==' and '!=' bind tighter than '&&' and '||'
    assert(1 == 1 && 2 == 2) ;

    // Bitwise operators bind tighter than comparisons
    assert(4 & 5 == 4);
    assert(!((4 & (5 == 4) as int) as bool));
}

fn check_cmpi(a: int, b: int) {
    assert(a == a);
    assert(a != b);
    assert(a <= a);
    assert(a <= b);
    assert(a >= a);
    assert(b >= a);
    assert(a < b);
    assert(b > a);
}

fn check_cmpf(a: float, b: float) {
    assert(a == a);
    assert(a != b);
    assert(a <= a);
    assert(a <= b);
    assert(a >= a);
    assert(b >= a);
    assert(a < b);
    assert(b > a);
}

fn check_cmps(a: str, b: str) {
    assert(a == a);
    assert(a != b);
    assert(a <= a);
    assert(a <= b);
    assert(a >= a);
    assert(b >= a);
    assert(a < b);
    assert(b > a);
}

pub fn test_comparisons() {
    check_cmpi(1, 2);
    check_cmpi(-1, 1);
    check_cmpi(123, 124);

    check_cmpf(1.1, 2.2);
    check_cmpf(-1.1, 1.2);
    check_cmpf(123.1, 124.2);

    check_cmps('a', 'b');
    check_cmps('ab', 'abc');
    check_cmps('abc', 'abd');
}

pub fn test_conversions() {
    assert(1 == true as int);
    assert(1.0 == true as float);
    assert(1 == 1 as int);
    assert(1.0 == 1 as float);
}

pub fn test_bitwise_ops() {
    assert(0b0111 == 0b0110 | 0b0011);
    assert(0b0010 == 0b0110 & 0b0011);
    assert(0b0101 == 0b0110 ^ 0b0011);
}

pub fn test_add_strings() {
    let s = '';
    s = s + 'abc';
    s += s;
    assert(s == 'abcabc');
}


pub fn test_operator_assignment() {
    // prevent constant folding
    let value = || 10; 

    let v = value();
    v += 1;
    assert(v == 11);

    let v = value();
    v -= 4;
    assert(v == 6);

    let v = value();
    v *= 10;
    assert(v == 100);

    let v = value();
    v /= -5;
    assert(v == -2);

    let v = value();
    v %= 3;
    assert(v == 1);

    let v = value();
    v &= 1;
    assert(v == 0);

    let v = value();
    v |= 1;
    assert(v == 11);

    let v = value();
    v ^= 10;
    assert(v == 0);

    let v = value();
    v <<= 1;
    assert(v == 20);

    let v = value();
    v >>= 1;
    assert(v == 5);
}

pub fn test_operator_assignment_projections() {
    // prevent constant folding
    let value = || [(10,)]; 

    let v = value();
    v[0].0 += 101;
    assert(v[0].0 == 111);
}

