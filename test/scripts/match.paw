// match.paw

enum Num {
    Zero,
    Succ(Num),
    Add(Num, Num),
    Mul(Num, Num),
}

fn check_basic(a: Num) -> int {
    match a {
        Num::Zero            => 1,
        Num::Succ(Num::Zero) => 2,
        Num::Succ(x)         => 3,
        x                    => 4,
    }
}

pub fn test_basic() {
    assert(check_basic(Num::Zero) == 1);
    assert(check_basic(Num::Succ(Num::Zero)) == 2);
    assert(check_basic(Num::Succ(Num::Succ(Num::Zero))) == 3);
    assert(check_basic(Num::Add(Num::Zero, Num::Zero)) == 4);
}

fn eval_num(num: Num) -> int {
    match num {
        Num::Zero      => 0,
        Num::Succ(x)   => eval_num(x) + 1,
        Num::Add(x, y) => eval_num(x) + eval_num(y),
        Num::Mul(x, y) => eval_num(x) * eval_num(y),
    }
}

pub fn test_bindings() {
    let zero = Num::Zero;
    let one = Num::Succ(zero);
    let two = Num::Succ(one);

    assert(eval_num(zero) == 0);
    assert(eval_num(one) == 1);
    assert(eval_num(two) == 2);
    assert(eval_num(Num::Add(one, two)) == 3);
    assert(eval_num(Num::Mul(one, two)) == 2);
    assert(eval_num(Num::Mul(Num::Succ(two), two)) == 6);
}

fn check_jacobs_example(a: Num) -> int {
    match a {
        Num::Add(Num::Zero, Num::Zero) => 1,
        Num::Mul(Num::Zero, x)         => 2,
        Num::Add(Num::Succ(x), y)      => 3,
        Num::Mul(x, Num::Zero)         => 4,
        Num::Mul(Num::Add(x, y), z)    => 5,
        Num::Add(x, Num::Zero)         => 6,
        x                              => 7,
    }
}

pub fn test_jacobs_example() {
    let check = check_jacobs_example;
    assert(check(Num::Add(Num::Zero, Num::Zero)) == 1);
    assert(check(Num::Mul(Num::Zero, Num::Zero)) == 2);
    assert(check(Num::Add(Num::Succ(Num::Zero), Num::Zero)) == 3);
    assert(check(Num::Mul(Num::Succ(Num::Zero), Num::Zero)) == 4);
    assert(check(Num::Mul(Num::Add(Num::Zero, Num::Zero), Num::Succ(Num::Zero))) == 5);
    assert(check(Num::Add(Num::Add(Num::Zero, Num::Zero), Num::Zero)) == 6);
    assert(check(Num::Mul(Num::Succ(Num::Zero), Num::Succ(Num::Zero))) == 7);
}

struct Single<T> {
    pub value: T,
}

struct Multiple<T> {
    pub a: T,
    pub b: T,
    pub c: T,
}

fn check_struct_bindings(target: Multiple<int>) -> int {
    match target {
        Multiple{c: 1, b, a: c} => b + c - 1,
        Multiple{c: c, b: x, a} => a + x + c,
    }
}

pub fn test_struct_bindings() {
    let check = check_struct_bindings;
    assert(check(Multiple{a: 1, b: 2, c: 3}) == 1 + 2 + 3);
    assert(check(Multiple{a: 2, b: 2, c: 2}) == 2 + 2 + 2);
    assert(check(Multiple{a: 3, b: 2, c: 1}) == 3 + 2 - 1);
}

// Meaning of "ret" parameter in "check_single_arm_*" functions:
//     false: ensure that control jumps out of the match once an arm is taken
//            (otherwise, result value will be too high)
//     true:  ensure that control doesn"t jump to an earlier arm and fall through
//            to the correct one (otherwise, result value will be too low)

enum Flat {A, B, C, D}

fn check_single_arm_flat(value: Flat, ret: bool) -> int {
    let result = -1;
    match value {
        Flat::A => {result = 1;},
        Flat::B => {result = 2; if ret {return result;}},
        Flat::C => {result = 3; if ret {return result;}},
        Flat::D => {},
    }
    return result;
}

pub fn test_single_arm_flat() {
    let check = check_single_arm_flat;

    assert(check(Flat::A, false) == 1);
    assert(check(Flat::B, false) == 2);
    assert(check(Flat::C, false) == 3);

    assert(check(Flat::A, true) == 1);
    assert(check(Flat::B, true) == 2);
    assert(check(Flat::C, true) == 3);
}

enum Nested {
    Zero,
    One(Flat),
    Two(Flat, Flat),
}

fn check_single_arm_nested(value: Nested, ret: bool) -> int {
    let result = -1;
    match value {
        Nested::Zero => {result = 1; if ret {return result;}},
        Nested::One(Flat::A) => {result = 2; if ret {return result;}},
        Nested::One(Flat::B) => {result = 3; if ret {return result;}},
        Nested::One(Flat::C) => {result = 4; if ret {return result;}},
        Nested::Two(Flat::A, _) => {result = 5; if ret {return result;}},
        Nested::Two(Flat::B, _) => {result = 6; if ret {return result;}},
        Nested::Two(Flat::C, _) => {result = 7; if ret {return result;}},
        _ => {result = 8;},
    }
    return result;
}

pub fn test_single_arm_nested() {
    let check = check_single_arm_nested;

    let i = 0;
    while i < 2 {
        let b = i as bool;
        assert(check(Nested::Zero, b) == 1);
        assert(check(Nested::One(Flat::A), b) == 2);
        assert(check(Nested::One(Flat::B), b) == 3);
        assert(check(Nested::One(Flat::C), b) == 4);
        assert(check(Nested::Two(Flat::A, Flat::A), b) == 5);
        assert(check(Nested::Two(Flat::B, Flat::B), b) == 6);
        assert(check(Nested::Two(Flat::C, Flat::C), b) == 7);
        i = i + 1;
    }
}

fn match_exact_int(i: int) -> int {
    match i {
        -1 => -10,
        0 => 0,
        1 => 10,
        _ => 100,
    }
}

pub fn test_exact_int() {
    assert(match_exact_int(-10) == 100);
    assert(match_exact_int(-1) == -10);
    assert(match_exact_int(0) == 0);
    assert(match_exact_int(1) == 10);
    assert(match_exact_int(10) == 100);
}

fn match_char(c: char) -> int {
    match c {
        '\0' => 1,
        'x' => 2,
        '\xFF' => 3,
        ' ' => 4,
        c => c as int,
    }
}

pub fn test_match_char() {
    assert(match_char('a') == 97);
    assert(match_char('\0') == 1);
    assert(match_char('x') == 2);
    assert(match_char('\xFF') == 3);
    assert(match_char(' ') == 4);
}

fn match_int_binding(i: int) -> int {
    match i {
        1 => 1,
        2 => 2,
        3 => 3,
        x => x * 2,
    }
}

pub fn test_int_binding() {
    assert(match_int_binding(-10) == -20);
    assert(match_int_binding(-1) == -2);
    assert(match_int_binding(0) == 0);
    assert(match_int_binding(1) == 1);
    assert(match_int_binding(2) == 2);
    assert(match_int_binding(3) == 3);
    assert(match_int_binding(10) == 20);
}

pub fn test_target_is_evaluated_once() {
    let value = 0;
    let f = || {
        value = value + 1;
        return value;
    };
    match f() {
        _ => {},
    }
    assert(value == 1);
}

fn check_match_tuple(target: (int, str, float)) -> int {
    match target {
        (2, "two", 3.0) => {return 1;},
        (1, "three", 3.0) => {return 2;},
        (1, "two", 3.0) => {return 3;},
        (1, "two", 4.0) => {return 4;},
        (_, _, _) => {return 5;}
    };
}

pub fn test_tuple() {
    assert(check_match_tuple((2, "two", 3.0)) == 1);
    assert(check_match_tuple((1, "three", 3.0)) == 2);
    assert(check_match_tuple((1, "two", 3.0)) == 3);
    assert(check_match_tuple((1, "two", 4.0)) == 4);
}

fn check_match_tuple_2(target: (int, int)) -> int {
    match target {
        (1, b) => {return b;},
        (a, 2) => {return a;},
        (3, b) => {return b;},
        (a, b) => {return a + b;}
    };
}

pub fn test_tuple_2() {
    assert(check_match_tuple_2((1, 1)) == 1);
    assert(check_match_tuple_2((1, 2)) == 2);
    assert(check_match_tuple_2((2, 2)) == 2);
    assert(check_match_tuple_2((3, 2)) == 3);
    assert(check_match_tuple_2((3, 4)) == 4);
    assert(check_match_tuple_2((3, 5)) == 5);
    assert(check_match_tuple_2((4, 3)) == 7);
    assert(check_match_tuple_2((4, 4)) == 8);
}

fn check_match_tuple_3(target: (((int,), int), int)) -> int {
    match target {
        (((1,), b), 2) => {return b;},
        (((a,), 3), 3) => {return a;},
        (((4,), 4), c) => {return c;},
        (((a,), b), c) => {return a + b + c;},
    };
}

pub fn test_tuple_3() {
    assert(check_match_tuple_3((((1,), 1), 2)) == 1);
    assert(check_match_tuple_3((((2,), 3), 3)) == 2);
    assert(check_match_tuple_3((((4,), 4), 3)) == 3);
    assert(check_match_tuple_3((((1,), 2), 1)) == 4);
}

pub fn test_closure_inside_match() {
    let f;

    match 1 { x => f = || x }

    assert(f() == 1);
}

pub fn test_nested_closure_inside_match() {
    let f;

    let x = 1;
    match x {
        y => f = || {
            match y { z => || x + y + z }
        },
    }

    assert(f()() == 3);
}

pub fn match_int_min_literal() {
    match -9223372036854775808 {
        -9223372036854775808 => (),
        _ => (),
    }
}
