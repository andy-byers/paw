// match.paw

struct Single<T> {
    pub value: T,
}

fn check_match_struct_with_one_field(target: Single<int>) -> int {
    match target {
        Single{value: 1 | 2 | 3} => {return 1;},
        Single{value: v} => {return v;},
    };
}

pub fn test_match_struct_with_one_field() {
    let check = check_match_struct_with_one_field;
    assert(check(Single{value: 0}) == 0);
    assert(check(Single{value: 1}) == 1);
    assert(check(Single{value: 2}) == 1);
    assert(check(Single{value: 3}) == 1);
    assert(check(Single{value: 4}) == 4);
}

struct Multiple<T> {
    pub a: T,
    pub b: T,
    pub c: T,
}

fn check_match_struct_with_multiple_fields(target: Multiple<int>) -> int {
    match target {
        Multiple{
            b: 1 | 2 | 3,
            c: 1 | 2 | 3,
            a: 1 | 2 | 3,
        } => {
            return 1;
        },

        Multiple{b: 5, a: 4, c: 6}
        | Multiple{b: 6, a: 5, c: 7} 
        | Multiple{b: 7, a: 6, c: 8} => {
            return 2;
        },

        _ => {
            return 3;
        },
    };
}

pub fn test_match_struct_with_multiple_fields() {
    let check = check_match_struct_with_multiple_fields;
    assert(check(Multiple{a: 1, b: 1, c: 1}) == 1);
    assert(check(Multiple{a: 1, b: 2, c: 3}) == 1);
    assert(check(Multiple{a: 3, b: 2, c: 1}) == 1);
    assert(check(Multiple{a: 4, b: 5, c: 6}) == 2);
    assert(check(Multiple{a: 5, b: 6, c: 7}) == 2);
    assert(check(Multiple{a: 6, b: 7, c: 8}) == 2);
    assert(check(Multiple{b: 6, c: 7, a: 8}) == 3);
    assert(check(Multiple{a: 7, b: 8, c: 9}) == 3);
    assert(check(Multiple{a: 0, b: 1, c: 2}) == 3);
}

fn check_struct_bindings(target: Multiple<int>) -> int {
    match target {
        Multiple{c: 1, b, a: c} => {
            return b + c - 1;
        },
        Multiple{c: c, b: x, a} => {
            return a + x + c;
        },
    }
}

pub fn test_struct_bindings() {
    let check = check_struct_bindings;
    assert(check(Multiple{a: 1, b: 2, c: 3}) == 1 + 2 + 3);
    assert(check(Multiple{a: 2, b: 2, c: 2}) == 2 + 2 + 2);
    assert(check(Multiple{a: 3, b: 2, c: 1}) == 3 + 2 - 1);
}

// Meaning of 'ret' parameter in 'check_single_arm_*' functions:
//     false: ensure that control jumps out of the match once an arm is taken
//            (otherwise, result value will be too high)
//     true:  ensure that control doesn't jump to an earlier arm and fall through
//            to the correct one (otherwise, result value will be too low)

enum Flat {A, B, C, D}

fn check_single_arm_flat(value: Flat, ret: bool) -> int {
    let result = -1;
    match value {
        Flat::A => {result = 1; if ret {return result;}},
        Flat::B => {result = 2; if ret {return result;}},
        Flat::C => {result = 3; if ret {return result;}},
        Flat::D => {}
    }
    return result;
}

pub fn test_single_arm_flat() {
    let check = check_single_arm_flat;

    assert(check(Flat::A, false) == 1);
    assert(check(Flat::B, false) == 2);
    assert(check(Flat::C, false) == 3);

    assert(check(Flat::A, true) == 1);
    assert(check(Flat::B, true) == 2);
    assert(check(Flat::C, true) == 3);
}

enum Nested {
    Zero,
    One(Flat),
    Two(Flat, Flat),
}

fn check_single_arm_nested(value: Nested, ret: bool) -> int {
    let result = -1;
    match value {
        Nested::Zero => {result = 1; if ret {return result;}},
        Nested::One(Flat::A) => {result = 2; if ret {return result;}},
        Nested::One(Flat::B) => {result = 3; if ret {return result;}},
        Nested::One(Flat::C) => {result = 4; if ret {return result;}},
        Nested::Two(Flat::A, _) => {result = 5; if ret {return result;}},
        Nested::Two(Flat::B, _) => {result = 6; if ret {return result;}},
        Nested::Two(Flat::C, _) => {result = 7; if ret {return result;}},
        _ => {result = 8;},
    }
    return result;
}

pub fn test_single_arm_nested() {
    let check = check_single_arm_nested;

    for b in [false, true] {
        assert(check(Nested::Zero, b) == 1);
        assert(check(Nested::One(Flat::A), b) == 2);
        assert(check(Nested::One(Flat::B), b) == 3);
        assert(check(Nested::One(Flat::C), b) == 4);
        assert(check(Nested::Two(Flat::A, Flat::A), b) == 5);
        assert(check(Nested::Two(Flat::B, Flat::B), b) == 6);
        assert(check(Nested::Two(Flat::C, Flat::C), b) == 7);
    }
}


enum Num {
    Zero,
    Succ(Num),
    Add(Num, Num),
    Mul(Num, Num),
}

fn check_basic(a: Num) -> int {
    match a {
        Num::Zero            => {return 1;},
        Num::Succ(Num::Zero) => {return 2;},
        Num::Succ(x)         => {return 3;},
        x                    => {return 4;},
    };
}

pub fn test_basic() {
    assert(check_basic(Num::Zero) == 1);
    assert(check_basic(Num::Succ(Num::Zero)) == 2);
    assert(check_basic(Num::Succ(Num::Succ(Num::Zero))) == 3);
    assert(check_basic(Num::Add(Num::Zero, Num::Zero)) == 4);
}

fn numval(num: Num) -> int {
    match num {
        Num::Zero      => {return 0;},
        Num::Succ(x)   => {return numval(x) + 1;},
        Num::Add(x, y) => {return numval(x) + numval(y);},
        Num::Mul(x, y) => {return numval(x) * numval(y);},
    };
}

pub fn test_match_with_all_variants() {
    let zero = Num::Zero;
    let one = Num::Succ(zero);
    let two = Num::Succ(one);

    assert(numval(Num::Add(one, two)) == 3);
    assert(numval(Num::Mul(one, two)) == 2);
    assert(numval(Num::Mul(Num::Succ(two), two)) == 6);
}

fn check_jacobs_example(a: Num) -> int {
    match a {
        Num::Add(Num::Zero, Num::Zero) => {return 1;},
        Num::Mul(Num::Zero, x)         => {return 2;},
        Num::Add(Num::Succ(x), y)      => {return 3;},
        Num::Mul(x, Num::Zero)         => {return 4;},
        Num::Mul(Num::Add(x, y), z)    => {return 5;},
        Num::Add(x, Num::Zero)         => {return 6;},
        x                              => {return 7;},
    };
}

pub fn test_jacobs_example() {
    let check = check_jacobs_example;
    assert(check(Num::Add(Num::Zero, Num::Zero)) == 1);
    assert(check(Num::Mul(Num::Zero, Num::Zero)) == 2);
    assert(check(Num::Add(Num::Succ(Num::Zero), Num::Zero)) == 3);
    assert(check(Num::Mul(Num::Succ(Num::Zero), Num::Zero)) == 4);
    assert(check(Num::Mul(Num::Add(Num::Zero, Num::Zero), Num::Succ(Num::Zero))) == 5);
    assert(check(Num::Add(Num::Add(Num::Zero, Num::Zero), Num::Zero)) == 6);
    assert(check(Num::Mul(Num::Succ(Num::Zero), Num::Succ(Num::Zero))) == 7);
}

fn match_exact_int(i: int) -> int {
    match i {
        -1 => {return -10;},
        0 => {return 0;},
        1 => {return 10;},
        _ => {return 100;},
    };
}

pub fn test_exact_int() {
    assert(match_exact_int(-10) == 100);
    assert(match_exact_int(-1) == -10);
    assert(match_exact_int(0) == 0);
    assert(match_exact_int(1) == 10);
    assert(match_exact_int(10) == 100);
}

fn match_either_int(i: int) -> int {
    match i {
        0 | 2 => {return 1;},
        1 | 3 => {return 2;},
        4 | 6 => {return 3;},
        _ => {return 4;},
    };
}

pub fn test_either_int() {
    assert(match_either_int(-1) == 4);
    assert(match_either_int(0) == 1);
    assert(match_either_int(1) == 2);
    assert(match_either_int(2) == 1);
    assert(match_either_int(3) == 2);
    assert(match_either_int(4) == 3);
    assert(match_either_int(5) == 4);
    assert(match_either_int(6) == 3);
    assert(match_either_int(7) == 4);
}

pub fn test_target_is_evaluated_once() {
    let value = 0;
    match value = value + 1 {
        0 => {},
        1 => {},
        2 => {},
        x => {},
    };
    assert(value == 1);
}

fn check_match_tuple(target: (int, str, float)) -> int {
    match target {
        (2, 'two', 3.0) => {return 1;},
        (1, 'three', 3.0) => {return 2;},
        (1, 'two', 3.0) => {return 3;},
        (1, 'two', 4.0) => {return 4;},
        (_, _, _) => {return 5;}
    };
}

pub fn test_tuple() {
    assert(check_match_tuple((2, 'two', 3.0)) == 1);
    assert(check_match_tuple((1, 'three', 3.0)) == 2);
    assert(check_match_tuple((1, 'two', 3.0)) == 3);
    assert(check_match_tuple((1, 'two', 4.0)) == 4);
}

fn match_either_variant(target: Nested) -> int {
    match target {
        Nested::Zero => {return 1;},

        Nested::One(Flat::A | Flat::B) => {return 2;},
        Nested::One(Flat::C) => {return 3;},

        Nested::Two(Flat::A, Flat::A)
        | Nested::Two(Flat::A, Flat::B) => {return 4;},

        Nested::Two(
            Flat::B | Flat::C, 
            Flat::B | Flat::C) => {return 5;},

        _ => {return 6;},
    };
}

pub fn test_either_variant() {
    let check = match_either_variant;
    assert(check(Nested::Zero) == 1);

    assert(check(Nested::One(Flat::A)) == 2);
    assert(check(Nested::One(Flat::B)) == 2);
    assert(check(Nested::One(Flat::C)) == 3);

    assert(check(Nested::Two(Flat::A, Flat::A)) == 4);
    assert(check(Nested::Two(Flat::A, Flat::B)) == 4);
    assert(check(Nested::Two(Flat::B, Flat::A)) == 6);
    assert(check(Nested::Two(Flat::C, Flat::A)) == 6);

    assert(check(Nested::Two(Flat::B, Flat::B)) == 5);
    assert(check(Nested::Two(Flat::B, Flat::C)) == 5);
    assert(check(Nested::Two(Flat::C, Flat::B)) == 5);
    assert(check(Nested::Two(Flat::C, Flat::C)) == 5);
}

