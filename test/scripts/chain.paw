// chain.paw

pub fn test_option() {
    let positive = |i: int| -> Option<int> {
        if i > 0 { 
            Some(i) 
        } else { 
            None 
        }
    };

    let positive_even = |i: int| -> Option<int> {
        i = positive(i)?;
        if i % 2 == 0 { 
            Some(i) 
        } else { 
            None 
        }
    };

    assert(positive_even(-2).is_none());
    assert(positive_even(1).is_none());
    assert(positive_even(2).unwrap() == 2);
}

pub fn test_result() {
    let positive = |i: int| -> Result<int, str> {
        if i > 0 { 
            Ok(i) 
        } else { 
            Err("not positive") 
        }
    };

    let positive_even = |i: int| -> Result<int, str> {
        i = positive(i)?;
        if i % 2 == 0 { 
            Ok(i) 
        } else { 
            Err("not even")
        }
    };

    assert(positive_even(-2).unwrap_err() == "not positive");
    assert(positive_even(1).unwrap_err() == "not even");
    assert(positive_even(2).unwrap() == 2);
}

struct Padding;

inline struct Padded<T> {
    pub padding: Padding,
    pub padding2: Padding,
    pub value: T,

    pub fn new(value: T) -> Self {
        Self{value, padding: Padding, padding2: Padding}
    }
}

pub fn test_different_option() {
    let positive = |p: Padded<int>| -> Option<Padded<int>> {
        if p.value > 0 { 
            Some(p) 
        } else { 
            None 
        }
    };

    assert(positive(Padded::new(-2)).is_none());

    let positive_even = |p: Padded<int>| -> Option<int> {
        p = positive(p)?;
        if p.value % 2 == 0 { 
            Some(p.value) 
        } else { 
            None 
        }
    };

    assert(positive_even(Padded::new(-2)).is_none());
    assert(positive_even(Padded::new(1)).is_none());
    assert(positive_even(Padded::new(2)).unwrap() == 2);
}

pub fn test_different_result() {
    let positive = |p: Padded<int>| -> Result<Padded<int>, str> {
        if p.value > 0 { 
            Ok(p) 
        } else { 
            Err("not positive") 
        }
    };

    let positive_even = |p: Padded<int>| -> Result<int, str> {
        p = positive(p)?;
        if p.value % 2 == 0 { 
            Ok(p.value) 
        } else { 
            Err("not even")
        }
    };

    assert(positive_even(Padded::new(-2)).unwrap_err() == "not positive");
    assert(positive_even(Padded::new(1)).unwrap_err() == "not even");
    assert(positive_even(Padded::new(2)).unwrap() == 2);
}
