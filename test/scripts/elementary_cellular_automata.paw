// elementary_cellular_automata.paw

const INVERT_COLORS: bool = true;
const PADDING_VALUE: int = 0;

const OFF: int = 0;
const ON: int = 1;

pub fn main(args: [str]) {
    //
    //  4 | 8
    // ---+---
    //  1 | 2
    //
    let charset = [
        " ", "▖", "▗", "▄", 
        "▘", "▌", "▚", "▙", 
        "▝", "▞", "▐", "▟",
        "▀", "▛", "▜", "█",
    ];    

    let num = if #args >= 2 {
        args[1].parse_int().unwrap()
    } else {
        110
    };

    let (rows, cols) = if #args >= 3 {
        let parts = args[2].split(",");
        let m = parts[0].parse_int().unwrap();
        let n = if #parts == 2 { 
            parts[1].parse_int().unwrap() 
        } else { 
            m 
        };
        (m * 2, n * 2)
    } else {
        (96, 160)
    };

    let rule = [];
    for i in 0..8 {
        rule.push((num >> i) & 1);
    }

    let grid = [];
    while #grid < cols {
        grid.push(OFF);
    }
    grid[cols / 2] = ON;

    let coord = |r, c| r*cols + c;

    for r in 0..rows-1 {
        for c in 0..cols {
            let i = coord(r, c);

            let middle = grid[i];
            let high = if c > 0 { grid[i - 1] } else { PADDING_VALUE };
            let low = if c < cols-1 { grid[i + 1] } else { PADDING_VALUE };

            grid.push(rule[low + middle*2 + high*4]);
        }
    }

    for i in 0..rows/2 {
        for j in 0..cols/2 {
            let (r, c) = (i * 2, j * 2);
            let upper = coord(r, c);
            let lower = coord(r + 1, c);

            let LL = grid[lower];
            let Lr = grid[lower + 1] << 1;
            let uL = grid[upper] << 2;
            let ur = grid[upper + 1] << 3;

            let index = LL + Lr + uL + ur;
            if INVERT_COLORS { index = -index - 1; }
            print(charset[index]);
        }
        print("\n");
    }
}
