// vector.paw

{
    let vec = Vector[int]{}
    assert(0 == #vec)
}
{
    let vec = Vector[int]{1, 2, 3}
    assert(1 == vec[0])
    assert(2 == vec[1])
    assert(3 == vec[2])
    assert(1 == vec[-3])
    assert(2 == vec[-2])
    assert(3 == vec[-1])
}
{
    fn check(vec: Vector[Vector[int]]) {
        assert(1 == vec[0][0])
        assert(4 == vec[1][0])
        assert(6 == vec[2][0])
        assert(2 == vec[-3][-2])
        assert(3 == vec[-3][-1])
        assert(5 == vec[-2][-1])
    }
    let vec = Vector[Vector[int]]{
        Vector[int]{1, 2, 3},
        Vector[int]{4, 5},
        Vector[int]{6},
    }
    check(vec);

//    let vec = Vector[Vector[int]]{
//        {1, 2, 3},
//        {4, 5},
//        {6},
//    }
//    check(vec);
//
//    check(Vector[Vector[int]]{
//        {1, 2, 3},
//        {4, 5},
//        {6},
//    })
}
//{
//    fn map[T](f: fn(T) -> T, vec: Vector[T]) {
//        for i = 0, #vec {
//            vec[i] = f(vec[i])
//        }
//    }
//    fn times2(i: int) -> int {
//        return i * 2
//    }
//    let v = Vector[int]{1, 2, 3}
//    map(times2, v)
//    assert(v[0] == 2)
//    assert(v[1] == 4)
//    assert(v[2] == 6)
//    
//}
//{
//    let vec = Vector[int]{1, 2, 3}
//    vec.push(4)
//    vec.push(5)
//    vec.push(6)
//    assert(#vec == 6)
//    assert(vec[0] == 1)
//    assert(vec[5] == 6)
//    assert(vec[-6] == 1)
//    assert(vec[-1] == 6)
//}
//
//{
//    let vec = Vector[int]{}
//    for i = 0, 100 {
//        vec.push(i)
//    }
//    assert(#vec == 100)
//    for i = 0, 100 {
//        assert(i in vec)
//    }
//    let clone = vec.clone()
//    for i = 0, 50 {
//        vec.pop(i)
//    }
//    for i = 0, 100, 2 {
//        vec.insert(i, i)
//    }
//    assert(vec == clone)
//}
//
//{
//    assert(Vector[int]{1, 2, 3}.clone() == Vector[int]{1, 2, 3})
//    assert(Vector[int]{1, 2, 3} != Vector[int]{1, 2})
//    assert(Vector[int]{1, 2, 3} != Vector[int]{1, 2, 4})
//}
//
//// Inclusion/contains operator:
//{
//    assert(3 in Vector[int]{1, 2, 3})
//    assert(!(4 in Vector[int]{1, 2, 3}))
//}
//
//// Arithmetic on arrays:
//{
//    assert(Vector[int]{} + Vector[int]{} == Vector[int]{})
//    assert(Vector[int]{} + Vector[int]{} + Vector[int]{} == Vector[int]{})
//
//    assert(Vector[int]{} + Vector[int]{1, 2, 3} == Vector[int]{1, 2, 3})
//    assert(Vector[int]{1} + Vector[int]{2, 3} == Vector[int]{1, 2, 3})
//    assert(Vector[int]{1, 2} + Vector[int]{3} == Vector[int]{1, 2, 3})
//    assert(Vector[int]{1, 2, 3} + Vector[int]{} == Vector[int]{1, 2, 3})
//}
//
//// Slice syntax:
//{
//    fn check(vec: Vector[int], begin: int, end: int) {
//        let b = vec[begin:end]
//        begin = begin ?: 0    // vec[None:n] == vec[:n] == vec[0:n]
//        end   = end   ?: #vec // vec[n:None] == vec[n:] == vec[n:#vec]
//        for i = begin, end {
//            assert(vec[i] == b[0])
//            b.pop(0)
//        }
//    }
//    let vec = Vector[int]{1, 2, 3}
//
//    for i = 0, 3 {
//        for j = 0, 3 {
//            check(vec, i, j)
//        }
//    }
//    let result = vec.clone()
//    result.pop()
//    assert(vec[0:-1] == result)
//    result.pop()
//    assert(vec[0:-2] == result)
//    result.pop()
//    assert(vec[0:-3] == result)
//
//    let result = vec.clone()
//    result.pop(0)
//    assert(vec[1:#vec] == result)
//    result.pop(0)
//    assert(vec[2:#vec] == result)
//    result.pop(0)
//    assert(vec[3:#vec] == result)
//
//    let result = vec.clone()
//    result.pop()
//    assert(vec[:-1] == result)
//    result.pop()
//    assert(vec[:-2] == result)
//    result.pop()
//    assert(vec[:-3] == result)
//
//    let result = vec.clone()
//    result.pop(0)
//    assert(vec[1:] == result)
//    result.pop(0)
//    assert(vec[2:] == result)
//    result.pop(0)
//    assert(vec[3:] == result)
//
//    let result = vec.clone()
//    assert(vec[0:None] == result)
//    assert(vec[None:#vec] == result)
//    assert(vec[0:] == result)
//    assert(vec[:#vec] == result)
//    assert(vec[:] == result)
//    assert(vec[:1] == Vector[int]{1})
//    assert(vec[1:-1] == Vector[int]{2})
//    assert(vec[-1:] == Vector[int]{3})
//}
//
//{
//    fn check(i, j, answer) {
//        let vec = Vector[int]{1, 2, 3}
//        vec[i:j] = Vector[int]{4, 5, 6}
//        assert(vec == answer)
//    }
//    check(0, 0, Vector[int]{4, 5, 6, 1, 2, 3})
//    check(0, 1, Vector[int]{4, 5, 6, 2, 3})
//    check(0, 2, Vector[int]{4, 5, 6, 3})
//    check(0, 3, Vector[int]{4, 5, 6})
//    check(3, 3, Vector[int]{1, 2, 3, 4, 5, 6})
//    check(2, 3, Vector[int]{1, 2, 4, 5, 6})
//    check(1, 3, Vector[int]{1, 4, 5, 6})
//    check(0, 3, Vector[int]{4, 5, 6})
//}
//
//{
//    fn check(i: int, j: int, answer: Vector[int]) {
//        let vec = Vector[int]{1, 2, 3}
//        vec[i:j] = vec
//        assert(vec == answer)
//    }
//    check(1, 3, Vector[int]{1, 1, 2, 3})
//    check(2, 3, Vector[int]{1, 2, 1, 2, 3})
//    check(3, 3, Vector[int]{1, 2, 3, 1, 2, 3})
//
//    check(0, 2, Vector[int]{1, 2, 3, 3})
//    check(0, 1, Vector[int]{1, 2, 3, 2, 3})
//    check(0, 0, Vector[int]{1, 2, 3, 1, 2, 3})
//
//    check(0, 3, Vector[int]{1, 2, 3})
//    check(1, 2, Vector[int]{1, 1, 2, 3, 3})
//
//    let vec = Vector[int]{1, 2, 3, 4, 5}
//    vec[1:3] = vec
//    assert(vec == [1, 1, 2, 3, 4, 5, 4, 5])
//}
//
