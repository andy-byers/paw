// infer_assoc_items.paw

struct Unit;

pub fn test_option() {
    let o: Option = Option::Some(123);

    // Option<?0> := Option<int>
    //         ?0 := int
    let o = Option::Some(1); 

    //         Option<?1> := Option<Option<?2>>
    //                 ?1 := Option<?2>
    // Option<Option<?2>> := Option<Option<Unit>>
    //         Option<?2> := Option<Unit>
    //                 ?2 := Unit 
    let o = Option::None;
    o = Option::Some(Option::None); 
    o = Option::Some(Option::Some(Unit));
}

pub fn test_result() {
    // o: Result<int, str>
    let o = Result::Ok(1); 
    o = Result::Err('two');

    // o: Result<Result<bool, bool>, Unit>
    let o = Result::Err(Unit);
    o = Result::Ok(Result::Ok(true)); 
    o = Result::Ok(Result::Err(false));
}

struct Obj<T> {inner: T}

impl<X> Obj<X> {
    pub fn new(x: X) -> Self {
        return Obj{inner: x};
    }

    pub fn get(self) -> X {
        return self.inner;
    }
}

pub fn test_user_adt() {
    let o = Obj::new(123);
    assert(o.get() == 123);
}

fn infer_using_result() -> Option<Unit> {
    return Option::None;
}

pub fn test_infer_functions() {
    infer_using_result();

    let f = |x| Option::Some(x);
    assert(f(123).unwrap() == 123);
}

