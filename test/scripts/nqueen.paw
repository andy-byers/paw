// Translated from https://github.com/attractivechaos/plb2/blob/master/src/lua/nqueen.lua
fn nq_solve(n: int) -> int {
	let m = 0;
    let a = [];
    let l = [];
    let c = [];
    let r = [];
	let y0 = (1 << n) - 1;
	while #a < n {
        a.push(-1);
        l.push(0);
        c.push(0);
        r.push(0);
	}
	let k = 0;
	while k >= 0 {
		let y = ((l[k] | c[k]) | r[k]) & y0;
		if ((y ^ y0) >> (a[k] + 1)) != 0 {
			let i = a[k] + 1;
			while i < n && (y & (1 << i)) != 0 {
				i = i + 1;
			}
			if k < n - 1 {
				let z = 1 << i;
				a[k] = i;
				k = k + 1;
				l[k] = (l[k - 1] | z) << 1;
				c[k] = c[k - 1] | z;
				r[k] = (r[k - 1] | z) >> 1;
			} else {
				m = m + 1;
				k = k - 1;
			}
		} else {
			a[k] = -1;
			k = k - 1;
		}
	}
	return m;
}

pub fn main(args: [str]) {
    let n = if #args > 1 {
        args[1].parse_int(10)
    } else {
        5
    };
    print('\{nq_solve(n)}\n');
}
