// test_registers.paw

fn check_basic_guard(a: bool) -> int {
    if a {
        return 1;
    }
    return 2;
}

pub fn test_basic_guard() {
    let check = check_basic_guard;
    assert(check(true) == 1);
    assert(check(false) == 2);
}

//fn check_nested_guards(a: bool, b: bool) -> int {
//    if a {
//        if b {
//            return 1;
//        }
//        return 2;
//    }
//    return 3;
//}
//
//pub fn test_nested_guards() {
//    let check = check_nested_guards;
//    assert(check(true, true) == 1);
//    assert(check(true, false) == 2);
//    assert(check(false, true) == 3);
//    assert(check(false, false) == 3);
//}
//
//fn check_branches(a: bool, b: bool) -> int {
//    let result = 0;
//    if a {
//        result = 20;
//        if b {
//            result = result + 2;
//        } else {
//            result = result + 1;
//        }
//    } else {
//        result = 10;
//    }
//    return result;
//}
//
//pub fn test_branches() {
//    let check = check_branches;
//    assert(check(false, false) == 10);
//    assert(check(false, true) == 10);
//    assert(check(true, false) == 21);
//    assert(check(true, true) == 22);
//}
//
//fn check_branches_2(a: bool, b: bool) -> int {
//    let result = 0; // 0 not observed
//    if a {
//        result = 20;
//        if b {
//            return -1;
//        } else {
//            result = result + 1;
//        }
//    } else {
//        return -2;
//    }
//    return result;
//}
//
//pub fn test_branches_2() {
//    let check = check_branches_2;
//    assert(check(false, false) == -2);
//    assert(check(false, true) == -2);
//    assert(check(true, false) == 21);
//    assert(check(true, true) == -1);
//}
//
//pub fn test_logical() {
//    assert(!(false && false && false));
//    assert(!(false && true && true));
//    assert(!(true && false && true));
//    assert(!(false || false || false));
//
//    assert(false || true || false);
//    assert(true || false || false);
//    assert(true || true || false);
//    assert(true && true && true);
//}
//
//pub fn test_while() {
//    let count = 42;
//    let result = 0;
//    while count > 0 {
//        result = result + 1;
//        count = count - 1;
//    }
//    assert(count == 0);
//    assert(result == 42);
//}
//
//pub fn test_dowhile() {
//    let count = 0;
//    let result = 0;
//    do {
//        result = result + 1;
//        count = count - 1;
//    } while count > 0;
//    assert(count == -1);
//    assert(result == 1);
//}
//
//fn check_cfg(a: int, b: int) -> int {
//    let r = 0;
//    if a == 0 {
//        while b > 0 {
//            r = r + 1;
//            b = b - 1;
//        }
//    } else if a == 1 {
//        if b == 0 {
//            return 10;
//        } else if b == 1 {
//            return 20;
//        }
//    }
//    return r;
//}
//
//fn check_cfg2(a: int) -> int {
//    let r = 0;
//    if true {
//        while a > 0 {
//            r = r + 1;
//            a = a - 1;
//        }
//    }
//    return r;
//}
//
//
//pub fn test_cfg() {
//    assert(check_cfg2(-1) == 0);
//    assert(check_cfg2(0) == 0);
//    assert(check_cfg2(1) == 1);
//    assert(check_cfg2(5) == 5);
//}
//
//
//fn check_cmpi(a: int, b: int) {
//    assert(a == a);
//    assert(a != b);
//    assert(a <= a);
//    assert(a <= b);
//    assert(a >= a);
//    assert(b >= a);
//    assert(a < b);
//    assert(b > a);
//}
//
//fn check_cmpf(a: float, b: float) {
//    assert(a == a);
//    assert(a != b);
//    assert(a <= a);
//    assert(a <= b);
//    assert(a >= a);
//    assert(b >= a);
//    assert(a < b);
//    assert(b > a);
//}
//
//fn check_cmps(a: str, b: str) {
//    assert(a == a);
//    assert(a != b);
//    assert(a <= a);
//    assert(a <= b);
//    assert(a >= a);
//    assert(b >= a);
//    assert(a < b);
//    assert(b > a);
//}
//
//pub fn test_comparisons() {
//    check_cmpi(1, 2);
//    check_cmpi(-1, 1);
//    check_cmpi(123, 124);
//
//    check_cmpf(1.1, 2.2);
//    check_cmpf(-1.1, 1.2);
//    check_cmpf(123.1, 124.2);
//
//    check_cmps("a", "b");
//    check_cmps("ab", "abc");
//    check_cmps("abc", "abd");
//}
//
//fn poly<Ty>(value: Ty) -> Ty {
//    return value;
//}
//
//fn poly2<T>(a: T, b: T) {
//    let pa = poly(a);
//    let pb = poly(b);
//}
//
//pub fn test_match() {
//    poly2(123, 456);
//}
//
//struct Unit;
//
//struct A {
//    pub a: int,
//    pub b: int,
//    pub c: [Unit],
//}
//
//pub fn test_option() {
//    let a = A{a: 1, b: 4, c: []};
//    let a = A{b: 5, a: 2, c: [Unit]};
//    let a = A{c: [Unit, Unit], a: 3, b: 6};
//}
//
//fn getelem<Ty>(value: [Ty]) -> Option<Ty> {
//    if #value > 1 {
//        return Option::Some(value[1]);
//    } else if #value > 0 {
//        return Option::Some(value[0]);
//    }
//    return Option::None;
//}
//
//pub fn test_struct() {
//    let list = [];
//    let opt = getelem(list);
////    assert(opt.is_none());
//    // propagate type argument to "list"
//    let _: Option<int> = opt; 
//}
//
//pub fn rec1<A, B>(a: A, b: B) {
//    rec2(a, b);
//}
//
//pub fn rec2<A2, B2>(a: A2, b: B2) {
//    if false {
//        rec1(b, a);
//    }
//}
//
//pub fn test_poly_rec() {
//    rec1(1, 1);
//    rec1(true, 2.0);
//}
//
//pub fn rec(i: int) {
//    if i > 0 {
//        rec(i - 1);
//    }
//}
//
//pub fn test_rec() {
//    rec(-1);
//    rec(1);
//    rec(10);
//}
//
//fn check_upvalues(a: int, b: int, c: int) -> int {
//    let f = |x: int| {
//        let g = |y: int| {
//            let h = |z: int| {
//                return x + y + z + a + b + c;
//            };
//            return h(y + c);
//        };
//        return g(x + b);
//    };
//    return f(a);
//}
//
//pub fn test_upvalues() {
//    let check = |a, b, c| assert(check_upvalues(a, b, c) == 4*a + 3*b + 2*c);
//    check(1, 1, 1);
//    check(1, 2, 3);
//    check(-1, -2, -3);
//}
//
//fn make_list<Ty>(value: Ty) -> fn() -> [Ty] {
//    return || [value];
//}
//
//pub fn test_closure_2() {
//    let k = make_list(true);
//    assert(k()[0] == true);
//    let k = make_list(42);
//    assert(k()[0] == 42);
//}
//
//pub fn test_while_xyz() {
//    let i = 0;
//    let f = |x| x * 100;
//    while i < 100 && f(i) < 1200 {
//        i = i + 1;
//    }
//    assert(i == 12);
//}
//
//struct Object<X, Y, Z> {
//    pub x: X,
//    pub y: Y,
//    pub z: Z,
//}
//
//pub fn test_obj_3245892346920() 
//{
//    let o = Object{x: 1.0, y: "abc", z: true};
//    assert(o.x == 1.0);
//    assert(o.y == "abc");
//    assert(o.z == true);
//}
//
//enum Choice<Ty> {
//    First,
//    Second([(Ty, Ty)])
//}
//
//pub fn test_obj_32458923423() 
//{
//    let c = Choice::Second([(1, 1), (2, 2), (3, 3)]);
//}
//
//
//pub fn test_continue() {
//    let i = 0;
//    let x = 0;
//    while i < 10 {
//        if i == 7 {
//            i = i + 1;
//            continue;
//        } else if i >= 6 {
//            x = x + 1;
//        }
//        i = i + 1;
//    }
//    assert(i == 10);
//    assert(x == 3);
//}
//
//pub fn test_break() {
//    let i = 0;
//    let x = 0;
//    while i < 10 {
//        if i == 7 {
//            break;
//        } else if i >= 6 {
//            x = x + 1;
//        }
//        i = i + 1;
//    }
//    assert(i == 7);
//    assert(x == 1);
//}
//
////pub fn test_option_is_some() {
////    let o = Option::Some(123);
////    assert(o.is_some());
////}
//
//
//
//pub fn test_while2() {
//    let f = || {
//        let f = || || -1;
//        while true {
//            let a = 1;
//            f = || {
//                let g = || -1;
//                while true {
//                    let b = 2;
//                    g = || a + b;
//                    break;
//                }
//                return g;
//            };
//            a = f()();
//            break;
//        }
//        return f;
//    };
//    assert(f()()() == 5);
//}
//
//pub fn test_while3() {
//    let f = || -1;
//    while true {
//        let a = 1;
//        while true {
//            let b = 2;
//            f = || a + b;
//            break;
//        }
//        a = f();
//        break;
//    }
//    assert(f() == 5);
//}
//
//
//pub fn test_break_upvalue_7483294723895612() {
//    let f = |_: int| -1;
//    while true {
//        let state = 0;
//        f = |x| {
//            state = state + x;
//            return state;
//        };
//        break;
//    }
//    assert(f(0) == 0);
//    assert(f(0) == 0);
//    assert(f(1) == 1);
//    assert(f(0) == 1);
//    assert(f(1) == 2);
//    assert(f(-10) == -8);
//}
//
//pub fn test_break_upvalue_578423905219457834() {
//    let f = |_: int| -1;
//    let state = 0;
//    while true {
//        f = |x| {
//            state = state + x;
//            return state;
//        };
//        break;
//    }
//    assert(f(0) == 0);
//    assert(state == 0);
//    assert(f(1) == 1);
//    assert(state == 1);
//    state = 10;
//    assert(f(-5) == 5);
//    assert(f(10) == 15);
//    assert(state == 15);
//}
//
//struct Obj {
//    inner: int,
//}
//
//impl Obj {
//    pub fn new() -> Self {
//        return Obj{inner: 42};
//    }
//
//    pub fn k(self) -> int {
//        return self.inner;
//    }
//}
//
//pub fn test_mtd() {
//    let m = Obj::new();
//    assert(m.k() == 42);
//}


//struct Vec<Ty> {
//    inner: [Ty],
//}

////impl<T> Vec<T> {
////    pub fn new() -> Self {
////        return Self{inner: []};
////    }
////
////    pub fn push(self, value: T) -> Self {
////        self.inner.push(value);
////        return self;
////    }
////
//////    pub fn pop(self) -> Self {
//////        self.inner.pop();
//////        return self;
//////    }
////}

//impl<X> Vec<X> {
//    pub fn xyz(x: X) -> X {
//        return x;
//    }
//}
//
//pub fn test_ajsfdklavczxyuoewrqmn()
//{
//    // Vec<?0>
//    // ?0 := int
//    // Vec<int>::xyz(int) -> int
//
//    let v = Vec::xyz(123);
//    assert(v == 123);
//}
//
//////impl Vec<int> {
//////    pub fn k() -> int {
//////        return 42;
//////    }
//////}
////
////pub fn test_method_abcdefg() {
//////    let v: int = Vec::k();
////    let v: int = Vec::x();
//////    v.push(1);
////}

//
//fn check_break_upvalue_inner(x: int) -> (fn(str) -> int) {
//    let i = 0;
//    let f = |_: str| -1;
//    while i < 100 {
//        if i == x {
//            let inner = i;
//            f = |action: str| {
//                if action == "inc" {
//                    inner = inner + 1;
//                } else if action == "dec" {
//                    inner = inner - 1;
//                }
//                return inner;
//            };
//            break; // close "inner"
//        }
//        i = i + 1;
//    }
//    return f;
//}
//
//pub fn test_break_upvalue_inner() {
//    let state = check_break_upvalue_inner(10);
//    assert(state("get") == 10);
//    assert(state("inc") == 11);
//    assert(state("inc") == 12);
//    assert(state("get") == 12);
//    assert(state("dec") == 11);
//    assert(state("dec") == 10);
//    assert(state("get") == 10);
//}
//
//fn check_break_upvalue_outer(x: int) -> (fn(str) -> int) {
//    let f = |_: str| -1;
//    let i = 0;
//    let outer = x;
//    while i < 100 {
//        if i == x {
//            f = |action: str| {
//                if action == "inc" {
//                    outer = outer + 1;
//                } else if action == "dec" {
//                    outer = outer - 1;
//                }
//                return outer;
//            };
//            break;
//        }
//        i = i + 1;
//    }
//    return f; // close "outer"
//}
//
//pub fn test_break_upvalue_outer() {
//    let state = check_break_upvalue_outer(10);
//    assert(state("get") == 10);
//    assert(state("dec") == 9);
//    assert(state("dec") == 8);
//    assert(state("get") == 8);
//    assert(state("inc") == 9);
//    assert(state("inc") == 10);
//    assert(state("get") == 10);
//}
//
//pub fn test_ab() {
//    let f = || -1;
//    let a = 0;
//    while true {
//        let b = 0;
//        while true {
//            let c = 0;
//            while true {
//                let d = 0;
//                f = || a + b + c + d;
//                d = 4;
//                break;
//            }
//            c = 3;
//            break;
//        }
//        b = 2;
//        break;
//    }
//    a = 1;
//    assert(f() == 10); 
//
//    a = 10;
//    assert(f() == 19); 
//}
//
//pub fn test_bc() {
//    let f = || -1;
//    let a = 1;
//    let b = 0;
//    while true {
//        let c = 3;
//        let d = 0;
//        f = || a + b + c + d;
//        d = 4;
//        break;
//    }
//    b = 2;
//    assert(f() == 10); 
//
//    b = 20;
//    assert(f() == 28); 
//}
//
//enum Small {
//    A,
//    B,
//    C,
//}
//
//enum Large<Ty> {
//    First(Ty),
//    Second(Ty, Small),
//    Third(Ty, Small, Small),
//}
//
//fn get_large<T>(value: T, small: [Small]) -> Large<T> {
//    if #small == 0 {
//        return Large::First(value);
//    } else if #small == 1 {
//        return Large::Second(value, small[0]);
//    } else {
//        return Large::Third(value, small[0], small[-1]);
//    }
//}
//
//pub fn test_fjkdslafsdjfkdasjfka() {
//    let e = get_large(1, []);
//    let e = get_large(2.0, [Small::A]);
//    let e = get_large(true, [Small::B, Small::C]);
//}

//struct Thing<Ty>;
//
//impl<T> Thing<T> {
//    pub fn a(t: T) -> int {return 42;}
////    pub fn b() {}
//}
////impl Thing<int> {
////    pub fn c() {}
////}
//
//pub fn test_ins() {
//    Thing::<int>::a(1);
//}
//

//pub fn test_conversions() {
//    assert(1 == true as int);
//    assert(1.0 == true as float);
//    assert(1 == 1 as int);
//    assert(1.0 == 1 as float);
//}

//pub fn test_bitwise_ops() {
//    assert(0b0111 == 0b0110 | 0b0011);
//    assert(0b0010 == 0b0110 & 0b0011);
//    assert(0b0101 == 0b0110 ^ 0b0011);
//}

//fn id<Ty>(t: Ty) -> Ty {
//    let fty = |x: Ty| x;
//    return fty(t);
//}
//
//pub fn test_closure_inside_poly() {
//    let fb = |x: bool| id(x);
//    let fi = |x: int|h id(x);
//    let ff = |x: float| id(x);
//    assert(fb(false) == false);
//    assert(fb(true) == true);
//    assert(fi(-1) == -1);
//    assert(fi(1000) == 1000);
//}
//
//struct Constant {
//    value: int,
//}
//impl Constant {
//    pub fn new(x: int) -> Constant {
//        return Constant{value: x};
//    }
//    pub fn get(self) -> int {
//        return self.value;
//    }
//}
//
//fn call_basic_method<Ignore>(_: Ignore) -> int {
//    let c = Constant::new(42);
//    return c.get();
//}
//
//pub fn test_basic_method_483290482309510() {
//    let c = Constant::new(42);
//    assert(c.get() == 42);
//
//    assert(call_basic_method(true) == 42);
//    assert(call_basic_method(1) == 42);
//    assert(call_basic_method(2.0) == 42);
//}

//pub fn test_map_operators() {
//    let map = [:];
//    map["a"] = 1;
//    map["b"] = 2;
//    map["c"] = 3;
//    assert(map["a"] == 1);
//    assert(map["b"] == 2);
//    assert(map["c"] == 3);
//}
//
//pub fn test_map_methods() {
//    let map = [:];
//    map.erase("a");
//    map["a"] = "b";
//    assert(map["a"] == "b");
//    assert(map.get_or("a", "c") == "b");
//    assert(map.get_or("b", "c") == "c");
//}
//
//fn repeat_helper<Ty>(value: Ty, times: int) -> [Ty] {
//    let result = [];
//    while times > 0 {
//        result.push(value);
//        times = times - 1;
//    }
//    return result;
//}
//
//struct PolyConstant<T> {
//    value: T,
//}
//impl<X> PolyConstant<X> {
//    pub fn new(x: X) -> Self {
//        return PolyConstant{value: x};
//    }
//    pub fn get(self) -> X {
//        return self.value;
//    }
//    pub fn repeat(self, times: int) -> [X] {
//        return repeat_helper(self.get(), times);
//    }
//}
//
//fn call_poly_method<Ty>(value: Ty) -> Ty {
//    let c = PolyConstant::new(value);
//    return c.repeat(5)[-1];
//}
//
////pub fn test_poly_method_483290482309510() {
////    let c = PolyConstant::new(42);
////    assert(c.get() == 42);
////    assert(c.repeat(1)[-1] == c.get());
////    assert(#c.repeat(2) == 2);
////
////    assert(call_poly_method(false) == false);
////    assert(call_poly_method(1.23) == 1.23);
////    assert(call_poly_method(123) == 123);
////    assert(call_poly_method("abc") == "abc");
////    assert(call_poly_method(1.23) == 1.23);
////}
//
//struct CustomTag;
//
//impl PolyConstant<CustomTag> {
//    pub fn specialized(self) -> CustomTag {
//        return self.value;
//    }
//}
//
//impl PolyConstant<[CustomTag]> {
//    pub fn specialized(self) -> int {
//        return #self.value;
//    }
//}
//
//fn call_specialized_method(n: int) -> int {
//    let tags = [];
//    while n > 0 {
//        let k = PolyConstant::new(CustomTag);
//        tags.push(k.specialized());
//        n = n - 1;
//    }
//    let k = PolyConstant::new(tags);
//    return k.specialized();
//}
//
//pub fn test_method_specialization() {
//    assert(call_specialized_method(0) == 0);
//    assert(call_specialized_method(1) == 1);
//    assert(call_specialized_method(10) == 10);
//}
