// integer.paw

pub fn test_allows_leading_zero() {
    assert(00 == 0);
    assert(0123 == 123);
}

pub fn test_non_decimal() {
    assert(0b0 == 0);
    assert(0o0 == 0);
    assert(0x0 == 0);
    assert(0b00 == 0);
    assert(0o000 == 0);
    assert(0x0000 == 0);

    assert(0b1010 == 10);
    assert(0o1234 == 668);
    assert(0x5678 == 22136);

    // some C and C++ compilers fail to parse these
    // see https://stackoverflow.com/questions/49543516
    assert(0xe-1 == 0xe - 1);
    assert(0xe+1 == 0xe + 1);
}

fn check_parse(s: str, o: Option<int>) {
    check_parse_radix(s, o, 10);
}

fn check_parse_radix(s: str, o: Option<int>, base: int) {
    match (s.parse_int_radix(base), o) {
        (Option::Some(a), Option::Some(b)) => assert(a == b),
        (Option::None, Option::None) => {},
        _ => panic("check failed"),
    }
}

pub fn test_parse_valid() {
    check_parse('0', Option::Some(0));
    check_parse('1', Option::Some(1));
    check_parse('10', Option::Some(10));

    let i = 1234567890;
    check_parse("\{i}", Option::Some(i));
    check_parse("\{-i}", Option::Some(-i));
}

pub fn test_parse_invalid() {
    // invalid digit
    check_parse('  1', Option::None);
    check_parse('1  ', Option::None);
    check_parse('  -1', Option::None);
    check_parse('-1  ', Option::None);

    // overflow
    check_parse('99999999999999999999', Option::None);
    check_parse('-99999999999999999999', Option::None);
}

pub fn test_parse_radix_valid() {
    check_parse_radix("0", Option::Some(0), 2);
    check_parse_radix("DEF", Option::Some(3567), 16);
    check_parse_radix("xyz", Option::Some(44027), 36);
}

pub fn test_parse_radix_invalid() {
    check_parse_radix("0b0", Option::None, 2); // base prefix not supported
    check_parse_radix("EFG", Option::None, 16); // digit out of range for base
}

fn apply<T>(f: fn(T), target: [T]) {
    let i = 0;
    while i < #target {
        f(target[i]);
        i = i + 1;
    }
}

fn combine<T>(lhs: [T], rhs: [T]) -> [(T, T)] {
    let out = [];
    let i = 0;
    while i < #lhs {
        let j = 0;
        while j < #rhs {
            out.push((lhs[i], rhs[j]));
            j = j + 1;
        }
        i = i + 1;
    }
    return out;
}

pub fn test_boundary_values() {
    let imax = 0x7FFFFFFFFFFFFFFF;
    let imin = -imax - 1;
    let values = [
        -8835532,
        -532,
        -1,
        0,
        2,
        407,
        4073748,
    ];

    // Precedence helper
    let check = |x: int, y: int| {
        assert(x == y);
    };

    let test_single = |x: int| {
        check(x, x);
        check(x, ~~x);
        check(x, - -x);
        check(~x, ~~~x);
        check(-x, - - -x);

        // Relationship between '-' and '~':
        check(~x, -x - 1);

        // Identity property:
        check(x * 1, x);
        check(x + 0, x);

        check(x << 1, x * 2);
        check(x << 2, x * 4);
        check(x << 3 >> 1, x << 2);

        if x < 0 {
            // Right shift does sign extension
            check(x >> 10000, -1);
        } else {
            check(x >> 10000, 0);
        }
    };

    let test_arith = |a: (int, int)| {
        let x = a.0;
        let y = a.1;

        // Commutative property:
        check(x + y, y + x);
        check(x * y, y * x);

        // Associative property:
        check(x + (y + x), (x + y) + x);
        check(x * (y * x), (x * y) * x);

        // Distributive property:
        check(x * (x + y), x * x + x * y);
        check(x * (x - y), x * x - x * y);

        // Variations/other checks:
        check(x - y, -y + x);
        check(x + y + y, x + 2 * y);
        check(x + x + y + y + y, 2 * x + 3 * y);
        check(x * 100 / 50, x * 2);
        check(y * 100 / 50, y * 2);
        check(x * 369 / 3, x * 123);
        check(y * 369 / 3, y * 123);
        if x != 0 {
            check(y * x / x, y);
        };
        if y != 0 {
            check(x * y / y, x);
        };
        let checkmod = |a1: int, b1: int,
                        a2: int, b2: int,
                        m: int| {
            check((a1 - b1) % m, (a2 - b2) % m);
        };
        checkmod(x, y, x + 3, y + 3, 7);
        checkmod(x, y, x - 3, y - 3, 7);
    };

    let test_bitwise = |a: (int, int)| {
        let x = a.0;
        let y = a.1;

        // De Morgan's laws
        check(~(x & y), (~x | ~y));
        check(~(x | y), (~x & ~y));
    };

    let test_rel = |a: (int, int)| {
        let x = a.0;
        let y = a.1;

        // shadow 'check' with a version that operates on booleans
        let check = |x: bool, y: bool| {
            assert(x == y);
        };
        check(x == y, !(x != y));
        check(x < y, y > x);
        check(x <= y, y >= x);
    };

    apply(test_single, values);
    apply(test_arith, combine(values, values));
    apply(test_rel, combine(values, values));
    apply(test_bitwise, combine(values, values));
}

pub fn test_limits() {
    assert(1 << 0 == 1);
    assert(-1 << 0 == -1);

    let imin = -0x7FFFFFFFFFFFFFFF - 1;
    let imax = 0x7FFFFFFFFFFFFFFF;
    assert(imax == -(imin + 1));
    assert(imin == -imax - 1);

    assert(imin == -9223372036854775807 - 1);
    assert(imax == 9223372036854775807);
}

pub fn test_digit_separators() {
    assert(1_23 == 123);
    assert(12_3 == 123);
    assert(123_ == 123);

    assert(0b1_01 == 0b101);
    assert(0b10_1 == 0b101);
    assert(0b101_ == 0b101);

    assert(0o5_67 == 0o567);
    assert(0o56_7 == 0o567);
    assert(0o567_ == 0o567);

    assert(0xD_EF == 0xDEF);
    assert(0xDE_F == 0xDEF);
    assert(0xDEF_ == 0xDEF);
}

