// underscore.paw

fn underscore_as_parameter_name(_: int) { }

pub fn test_scalar() {
    let v: _ = 123;

    let v: _;
    v = 456;
}

pub fn test_list() {
    let v: [_] = [1, 2, 3];

    let v: [_] = [];
    v.push(456);

    let v: [_];
    v = []; // required before use
    v.push(789);
}

pub fn test_map() {
    let v: [int: _] = [1: "a", 2: "b", 3: "c"];
    let v: [str: _] = ["d": 4, "e": 5, "f": 6];
    let v: [_: _] = [7: "g", 8: "h", 9: "i"];

    let v: [str: _] = [:];
    v["abc"] = 123;

    let v: [_: str] = [:];
    v[456] = "def";

    let v: [_: _] = [:];
    v["ghi"] = 789;

    let v: [_: _];
    v = [:];
    v["jkl"] = 0xABC;
}

pub fn test_nested_types() {
    let v: [_: [[str: [_]]]];
    v = [1: [["b": [3.0]]]];

    let v: [int: Pair<_, [[_]]>];
    v = [1: Pair{a: "b", b: []}];
    v[1].b.push([1, 2, 3]);
}

struct Pair<A, B> {
    pub a: A,
    pub b: B,
}

pub fn test_adt() {
    let v: Pair<int, _> = Pair::<_, _>{a: 1, b: "b"};
    let v: Pair<_, _> = Pair::<_, str>{a: 1, b: "b"};
    let v: Pair<int, str> = Pair::<_, _>{a: 1, b: "b"};
    let v: Pair<_, _> = Pair{a: 1, b: "b"};

    let v: Pair<_, _>; 
    v = Pair{a: 1, b: "b"};
}

pub fn test_tuple() {
    let v: (_, _, _) = ("a", 2, 3.0);
    let v: (str, _, _) = ("b", 3, 4.0);
    let v: (str, int, _) = ("c", 4, 5.0);

    let v: (_, _, _);
    v = ("d", 5, 6.0);
}

struct Unit<T> {
    pub fn f(self, _: T) {}
}

pub fn test_unit_struct() {
    let v: Unit<_> = Unit;
    v.f(123);

    let v = Unit::<_>;
    v.f("abc");
}

pub fn test_type_alias() {
    type L<T> = [T];
    let l: L<_> = [1, 2, 3];
    assert(l[-1] == 3);

    type M<K, V> = [K: V];
    let m: M<_, _> = [1: "a", 2: "b", 3: "c"];
    assert(m[3] == "c");
}
