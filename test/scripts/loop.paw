// loop.paw

pub fn test_basic_loop() {
    let n = 0;
    for i in range(0, 3, 1) { 
        n = n + i;
    }
    assert(n == 3);
}

pub fn test_basic_loop_2() {
    let one = 1;
    for i in range(0, 8, 1) {
        let a = -1;
        let b = -1;
    }
    let two = 2;
    for i in range(1, 8, 1) {
        for j in range(1, i, 1) {}
    }
    let test = || -> int {
        return one + two;
    };
    assert(test() == 3);
}

pub fn test_numeric_for_loop() {
    let test = |start: int, end: int, step: int| -> int {
        let n = 0;
        for i in range(start, end, step) {
            n = n + 1;
        }
        return n;
    };
    assert(test(0, 0, 1) == 0);
    assert(test(0, 0, -1) == 0);
    assert(test(0, -1, 1) == 0);
    assert(test(0, 1, -1) == 0);
    assert(test(0, 0, 10) == 0);
    assert(test(0, 0, -10) == 0);
    assert(test(0, -1, 10) == 0);
    assert(test(0, 1, -10) == 0);

    assert(test(-1, 1, 1) == 2);
    assert(test(-10, 10, 1) == 20);
    assert(test(1, -1, -1) == 2);
    assert(test(10, -10, -1) == 20);
    assert(test(-1, 1, 2) == 1);
    assert(test(-10, 10, 2) == 10);
    assert(test(1, -1, -2) == 1);
    assert(test(10, -10, -2) == 10);
    assert(test(-1, 1, 4) == 1);
    assert(test(-10, 10, 4) == 5);
    assert(test(1, -1, -4) == 1);
    assert(test(10, -10, -4) == 5);

    // Loop bounds are copied onto the stack when the loop starts. Changing them
    // during the loop has no effect.
    let n = 0;
    let N = 10;
    for i in range(0, N, 1) {
        n = n + 1;
        N = 0;
    }
    assert(n == 10);

    let test = |n| {
        let f = || -1;
        for i in range(0, 100, 1) {
            if i == n {
                // Capture 'i', the loop variable, when it is equal to 'n'. It should
                // retain this value in the closure, since 'i' is closed over at the
                // end of the loop iteration.
                f = || i;
            }
        }
        return f;
    };
    assert(test(0)() == 0);
    assert(test(10)() == 10);
    assert(test(50)() == 50);
    assert(test(100)() == -1);
}

pub fn test_nested_loops() {
    for i in range(0, 8, 1) {
        for j in range(0, i, 1) {
            for k in range(j, 8, 1) {
                assert(j < i);
                assert(j <= k);
            }
        }
    }
}

pub fn test_capture_loop_var_0() {
    let test = |n| {
        let f = || -1;
        for i in range(0, 100, 1){
            if i == n {
                f = || i;
            }
        }
        return f;
    };
    assert(test(-1)() == -1);
    assert(test(100)() == -1);

    let t = test(10);
    assert(t() == 10);
    assert(t() == 10);
    let t = test(50);
    assert(t() == 50);
    assert(t() == 50);
}

pub fn test_capture_loop_var_1() {
    let test = |n| {
        let f = || -1;
        for i in range(0, 100, 1) {
            if i == n {
                let a = [i];
                f = || -> int {
                    // Capture 'a' as an upvalue.
                    let m = a[0];
                    a[0] = a[0] + 1;
                    // Equivalent to '3 * n' on the first call. Increases by 1
                    // each time.
                    return i + n + m;
                };
                break;
            }
        }
        return f;
    };
    assert(test(-1)() == -1);

    let t = test(10);
    assert(t() == 30);
    assert(t() == 31);
    assert(t() == 32);
}

fn check_capture_loop_var_2(b: bool) -> int {
    let f = || -1;
    let n = 0;
    for i in range(0, 8, 1) {
        let _0 = -1;
        let _1 = -1;
        {
            let _2 = -1;

            n = n + 1;
            let m = n;
            f = || m + n;

            // Need to emit instructions to close 'm' at the break and continue
            // statements.
            if b {
                break;
            } else {
                continue;
            }
            let _3 = -1;
        }
        let _4 = -1;
        let _5 = -1;
    }
    return f();
}

pub fn test_capture_loop_var_continue() {
    assert(check_capture_loop_var_2(false) == 16);
}

pub fn test_capture_loop_var_break() {
    assert(check_capture_loop_var_2(true) == 2);
}

pub fn test_while_loop() {
    let test = |n| {
        let count = 0;
        while count < n {
            count = count + 1;
        }
        return count;
    };
    assert(test(0) == 0);
    assert(test(1) == 1);
    assert(test(10) == 10);
}

pub fn test_break_continue_0() {
    let a = 'A';
    let b = 'B';
    for i in range(0, 100, 1) {
        let b = 'C';
        let c = 'C';
        let d = 'D';
        a = c;
        b = d;
        if i == 10 {
            break;
        } else {
            continue;
        }
    }
    let a = a;
    let b = b;
    assert(a == 'C');
    assert(b == 'B');
}

pub fn test_break_continue_1() {
    let a = 'A';
    let b = 'B';
    for i in range(0, 100, 1) {
        let b = 'C';
        let c = 'C';
        let d = 'D';
        a = c;
        b = d; // 'b' shadowed
        if i == 10 {
            break;
        } else {
            continue;
        }
    }
    let a = a;
    let b = b;
    assert(a == 'C');
    assert(b == 'B');
}

pub fn test_break_continue_2() {
    let n = -1;
    for i in range(0, 3, 1) {
        if i == 2 {
            break;
        }
        n = i;
    }
    assert(n == 1);

    let n = -1;
    for i in range(0, 3, 1) {
        if i == 2 {
            continue;
        }
        n = i;
    }
    assert(n == 1);

    // Capture loop variable 'i' as an upvalue.
    let test = |n| {
        let f = || -1;
        for i in range(0, 100, 1) {
            if i == n {
                let u = i;
                f = || -> int {
                    return n + i + u;
                };
                break;
            }
        } // 'i' closed here when i == n, popped otherwise
        return f;
    };
    assert(test(0)() == 0);
    assert(test(10)() == 30);
    assert(test(50)() == 150);
    assert(test(100)() == -1);

    let i = 0;
    while true {
        i = i + 1;
        break;
    }

    assert(i == 1);

    let i = 0;
    while true {
        if i == 10 {
            break;
        }
        i = i + 1;
    }

    assert(i == 10);

    let i = 0;
    while true {
        i = i + 1;
        if i >= 10 { 
            break; 
        } else {
            continue;
        }
    } 

    assert(i == 10);

    let i = 0;
    let n = 0;
    while true {
        i = i + 1;
        if i & 1 != 0 {
            continue;
        }
        n = n + 1;
        if i >= 10 { break; }
    }

    assert(n == 5);

    let i = 0;
    let n = 0;
    while true {
        i = i + 1;
        if i & 1 != 0 {
            continue;
        } else if i == 10 {
            break;
        }
        n = n + 1;
    }

    assert(n == 4);
} 

pub fn test_loop_bounds_are_constant() {
    let n = 0;
    let N = 10;
    for i in range(0, N, 1) {
        n = n + 1;
        N = 0;
    }
    assert(n == 10);
}

pub fn test_break_continue_3() {
    let n = 0;
    for i in range(0, 8, 1) {
        n = n + 1;
        break;
    }
    assert(n == 1);

    let test = |n: int| -> int {
        let count = 0;
        for i in range(0, 100, 1) {
            if i == n {
                break;
            }
            count = count + 1;
            continue;
        }
        return count;
    };
    assert(test(-1) == 100);
    assert(test(0) == 0);
    assert(test(25) == 25);
    assert(test(50) == 50);
}

pub fn test_shadowed_by_loop_var() {
    let i = -1;

    // 'i' shadowed by loop variable.
    for i in range(0, 8, 1) {}
    assert(i == -1);
}

pub fn test_load_and_store_instruction() {
    let i = 0;
    while true {
        i = i + 1;
        if i == 10 { 
            break; 
        }
    }
}
