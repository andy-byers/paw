-- array.paw

{
    let a = [1, 2, 3]
    a.push(4)
    a.push(5)
    a.push(6)
    assert(#a == 6)
    assert(a[0] == 1)
    assert(a[5] == 6)
    assert(a[-6] == 1)
    assert(a[-1] == 6)
}

{
    let a = []
    a.push(a) -- Cycle

    assert(#a == 1)
    assert(#a[0] == 1)
    assert(#a[0][0] == 1)
    assert(#a[0][0][0] == 1)
}

{
    let a = []
    for i = 0,100 {
        a.push(i)
    }
    assert(#a == 100)
    for i = 0,100 {
        assert(i in a)
    }
    let clone = a.clone()
    for i = 0,50 {
        a.pop(i)
    }
    for i = 0,100,2 {
        a.insert(i, i)
    }
    assert(a == clone)
}

{
    assert(![])
    assert(!![0])
    assert([0])

    assert([1, 2, 3].clone() == [1, 2, 3])
    assert([1, 2, 3] != [1, 2])
    assert([1, 2, 3] != [1, 2, 4])
}

-- Inclusion/contains operator:
{
    assert(3 in [1, 2, 3])
    assert(!(4 in [1, 2, 3]))
}

-- Arithmetic on arrays:
{
    assert([] + [] == [])
    assert([] + [] + [] == [])

    assert([] * -1 == [])
    assert([] * 0 == [])
    assert([] * 1 == [])
    assert([] * 2 == [])

    assert([] + [1, 2, 3] == [1, 2, 3])
    assert([1] + [2, 3] == [1, 2, 3])
    assert([1, 2] + [3] == [1, 2, 3])
    assert([1, 2, 3] + [] == [1, 2, 3])

    assert([1, 2] * -1 == [])
    assert([1, 2] * 0 == [])
    assert([1, 2] * 1 == [1, 2])
    assert([1, 2] * 2 == [1, 2, 1, 2])
    assert([1, 2] * 3 == [1, 2, 1, 2, 1, 2])
    assert(-1 * [1, 2] == [])
    assert(0 * [1, 2] == [])
    assert(1 * [1, 2] == [1, 2])
    assert(2 * [1, 2] == [1, 2, 1, 2])
    assert(3 * [1, 2] == [1, 2, 1, 2, 1, 2])
}

-- Slice syntax:
{
    fn check(a, begin, end) {
        let b = a[begin:end]
        begin = begin ?:  0 -- a[null:n] == a[:n] == a[0:n]
        end   = end   ?: #a -- a[n:null] == a[n:] == a[n:#a]
        for i = begin, end {
            assert(a[i] == b[0])
            b.pop(0)
        }
    }
    let a = [1, 2, 3]

    for i = 0, 3 {
        for j = 0, 3 {
            check(a, i, j)
        }
    }
    let result = a.clone()
    result.pop()
    assert(a[0:-1] == result)
    result.pop()
    assert(a[0:-2] == result)
    result.pop()
    assert(a[0:-3] == result)

    let result = a.clone()
    result.pop(0)
    assert(a[1:#a] == result)
    result.pop(0)
    assert(a[2:#a] == result)
    result.pop(0)
    assert(a[3:#a] == result)

    let result = a.clone()
    result.pop()
    assert(a[:-1] == result)
    result.pop()
    assert(a[:-2] == result)
    result.pop()
    assert(a[:-3] == result)

    let result = a.clone()
    result.pop(0)
    assert(a[1:] == result)
    result.pop(0)
    assert(a[2:] == result)
    result.pop(0)
    assert(a[3:] == result)

    let result = a.clone()
    assert(a[0:null] == result)
    assert(a[null:#a] == result)
    assert(a[0:] == result)
    assert(a[:#a] == result)
    assert(a[:] == result)
    assert(a[:1] == [1])
    assert(a[1:-1] == [2])
    assert(a[-1:] == [3])
}

{
    fn check(i, j, answer) {
        let a = [1, 2, 3]
        a[i:j] = [4, 5, 6]
        assert(a == answer)
    }
    check(0, 0, [4, 5, 6, 1, 2, 3])
    check(0, 1, [4, 5, 6, 2, 3])
    check(0, 2, [4, 5, 6, 3])
    check(0, 3, [4, 5, 6])
    check(3, 3, [1, 2, 3, 4, 5, 6])
    check(2, 3, [1, 2, 4, 5, 6])
    check(1, 3, [1, 4, 5, 6])
    check(0, 3, [4, 5, 6])
}

{
    fn check(i, j, answer) {
        let a = [1, 2, 3]
        a[i:j] = a
        assert(a == answer)
    }
    check(1, 3, [1, 1, 2, 3])
    check(2, 3, [1, 2, 1, 2, 3])
    check(3, 3, [1, 2, 3, 1, 2, 3])

    check(0, 2, [1, 2, 3, 3])
    check(0, 1, [1, 2, 3, 2, 3])
    check(0, 0, [1, 2, 3, 1, 2, 3])

    check(0, 3, [1, 2, 3])
    check(1, 2, [1, 1, 2, 3, 3])

    let a = [1] * 100
    a[:1] = a
    assert(a == [1] * 199)

    let a = [1, 2, 3, 4, 5]
    a[1:3] = a
    assert(a == [1, 1, 2, 3, 4, 5, 4, 5])
}

