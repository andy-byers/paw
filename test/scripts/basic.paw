// basic.paw

{
    // line comment
    /* block comment */
    /* multi-line
       block
       comment */
    /* /* */
    /* * / */

    // 2 block comments, side-by-side
    /**//**/
    /* *//* */
    /**/ /**/
}

{
    // Semicolons are not necessary in most cases.
    let x: int = 0 x = 1 + 2 + 3 assert(x == 6)
    x = 1 - 2 - 3 x = 4 + 5 + 6 assert(x == 15)    
}

{
    fn wrapper(n: int, f: fn(int) -> int) -> int {
        return f(n)
    }
    fn f1(n: int) -> int {
        return n
    }
    fn f2(n: int) -> int {
        fn f(n: int) -> int {
            return n
        }
        return f(n)
    }
    fn f3(n: int) -> int {
        fn f(n: int) -> fn() -> int {
            fn f() -> int {
                return n
            }
            return f
        }
        return f(n)()
    }
    assert(1 == wrapper(1, f1))
    assert(2 == wrapper(2, f2))
    assert(3 == wrapper(3, f3))
}

{
    let x: int = 0
    {;;;};;;{};;;
    {; x = 1; assert(x == 1)}
}

{
    fn f() {}
    f()
    fn f() {return}
    f()

    fn f() -> int {let x: int = 0; return x}
    assert(f() == 0)

    fn f(x: int) -> int {return x}
    assert(f(1) == 1)

    fn f(x: int, y: int) -> int {return x}
    assert(f(0, 1) == 0)
    fn f(x: int, y: int) -> int {return y}
    assert(f(0, 1) == 1)

    fn f(x: int, y: int, z: int) -> int {return x}
    assert(f(0, 1, 2) == 0)
    fn f(x: int, y: int, z: int) -> int {return y}
    assert(f(0, 1, 2) == 1)
    fn f(x: int, y: int, z: int) -> int {return z}
    assert(f(0, 1, 2) == 2)
}
//
//// __*attr, and __*item
//{
//    class C {f() {return 42}}
//    fn get() {return fn() {return C()}}
//    let c = C()
//    c.ins = C()
//    c.ins.get = get
//    c.ins.a = [0]
//    let a = [c]
//    // a = [
//    //     C { <--------------------------------------- a[0]
//    //         f() {return 42}, <---------------------- a[0].f
//    //         ins = C { <----------------------------- a[0].ins
//    //             f() {return 42}, <------------------ a[0].ins.f
//    //             get = fn() { <---------------------- a[0].ins.get
//    //                 return fn() { <----------------- a[0].ins.get()
//    //                     return C { <---------------- a[0].ins.get()()
//    //                         f = fn() {return 42} <-- a[0].ins.get()().f
//    //                     }
//    //                 }
//    //             }
//    //         }
//    //     }
//    // ]
//    //
//
//    // __set*
//    a[0].x = 1
//    a[0].ins.x = 2
//    a[0].ins.a[0] = 3
//
//    // __get*
//    assert(a[0].f() == 42)
//    assert(a[0].ins.f() == 42)
//    assert(a[0].ins.get()().f() == 42)
//    assert(a[0].x == 1)
//    assert(a[0].ins.x == 2)
//    assert(a[0].ins.a[0] == 3)
//}

{
    fn f() -> int {
        {
            // Return statement must be the last statement in the block.
            return 42
        }
        return 24 // Unreachable
    }
    assert(f() == 42)
}

// String literals: both types of quotes are okay, and strings can span 
// multiple lines.
{
    assert('abc' == "abc");
    assert('abc\n def\n ghi\n\n' == 'abc
 def
 ghi

')

}

//// Array and map are both 'prefixexpr' constructs, meaning they can appear to the
//// left of '[]' (__*item) or '.' (__*attr). See grammer.md for details.
//{
//    let a = [0, 1, 2][1]
//    assert(a == 1)
//    let m = {0: 0, 1: 1, 2: 2}[1]
//    assert(m == 1)
//}

{
    let s = ''
    for a = 0, 10 {
        s = s + 'a'
        for b = 0, 10 {
            s = s + 'b'
            for c = 0, 10 {
                s = s + 'c'
            }
        }
    }
}

// TODO: Consider short-circuiting behavior
//{
//    fn test(a, b) {
//        return a || b
//    }
//    assert(1 == test(0, 1))
//    assert(2 == test(2, 3))
//
//    fn test(a, b) {
//        return a && b
//    }
//    assert(0 == test(0, 1))
//    assert(3 == test(2, 3))
//
//    fn test(a, b, c) {
//        return a && b && c
//    }
//    assert(0 == test(0, 0, 0))
//    assert(0 == test(1, 0, 0))
//    assert(0 == test(1, 2, 0))
//    assert(3 == test(1, 2, 3))
//
//    fn test(a, b, c) {
//        return a || b || c
//    }
//    assert(0 == test(0, 0, 0))
//    assert(1 == test(0, 1, 2))
//    assert(2 == test(0, 0, 2))
//
//    assert(true || false && false)
//    assert(!(true && (false || false)))
//    assert(!((2 == 3) || (4 < 0) && (1 == 1)))
//}

