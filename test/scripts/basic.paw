// basic.paw

pub fn function_syntax
(
    a
    : int
    , b: int) -> int
{
    return
        a
        + b;
}

pub fn test_syntax() 
{
    let x: int = 0;
    {;;;};;;{};;;
    {; x = 1; assert(x == 1);};
    x = x
      + 0 +
        1;
    assert(24 == function_syntax(1, 23));
}

pub fn test_expr_stmts() {
    let x = 1;
    2;
    x + 3;
}

pub fn test_arguments() {
    let f = || {};
    f();
    let f = || {return;};
    f();

    let f = || -> int {let x: int = 0; return x;};
    assert(f() == 0);

    let f = |x: int| -> int {return x;};
    assert(f(1) == 1);

    let f = |x: int, y: int| -> int {return x;};
    assert(f(0, 1) == 0);
    let f = |x: int, y: int| -> int {return y;};
    assert(f(0, 1) == 1);

    let f = |x: int, y: int, z: int| -> int {return x;};
    assert(f(0, 1, 2) == 0);
    let f = |x: int, y: int, z: int| -> int {return y;};
    assert(f(0, 1, 2) == 1);
    let f = |x: int, y: int, z: int| -> int {return z;};
    assert(f(0, 1, 2) == 2);
}

pub fn test_return_must_be_last() {
    let f = || -> int {
        {
            // Return statement must be the last statement in the block.
            return 42;
        }
        return 24; // unreachable
    };
    assert(f() == 42);
}

// String literals: both types of quotes are okay, and strings can span 
// multiple lines.
pub fn test_multiline_string_literals() {
    assert('abc' == "abc");
    assert('abc\n def\n ghi\n\n' == 'abc
 def
 ghi

');
}

pub fn test_short_circuiting() {
    let counts = (0, 0, 0);
    let check2 = |a: int, b: int| {
        assert(counts.0 == a);
        assert(counts.1 == b);
        counts.0 = 0;
        counts.1 = 0;
    };
    let A = |value: int| -> bool {
        counts.0 = counts.0 + 1;
        return value as bool;
    };
    let B = |value: int| -> bool {
        counts.1 = counts.1 + 1;
        return value as bool;
    };
    let C = |value: int| -> bool {
        counts.2 = counts.2 + 1;
        return value as bool;
    };

    let or = |a: int, b: int| -> bool {
        return A(a) || B(b);
    };
    assert(!or(0, 0));
    check2(1, 1);
    assert(or(0, 1));
    check2(1, 1);
    assert(or(1, 0));
    check2(1, 0);
    assert(or(1, 1));
    check2(1, 0);

    let and = |a: int, b: int| -> bool {
        return A(a) && B(b);
    };
    assert(!and(0, 0));
    check2(1, 0);
    assert(!and(0, 1));
    check2(1, 0);
    assert(!and(1, 0));
    check2(1, 1);
    assert(and(1, 1));
    check2(1, 1);

    let check3 = |a: int, b: int, c: int| {
        check2(a, b);
        assert(counts.2 == c);
        counts.2 = 0;
    };

    let and_or = |a: int, b: int, c: int| -> bool {
        return A(a) && B(b) || C(c);
    };
    assert(!and_or(0, 0, 0));
    check3(1, 0, 1);
    assert(!and_or(1, 0, 0));
    check3(1, 1, 1);
    assert(!and_or(0, 1, 0));
    check3(1, 0, 1);
    assert(and_or(0, 0, 1));
    check3(1, 0, 1);
    assert(and_or(1, 1, 0));
    check3(1, 1, 0);
    assert(and_or(0, 1, 1));
    check3(1, 0, 1);
    assert(and_or(1, 0, 1));
    check3(1, 1, 1);
    assert(and_or(1, 1, 1));
    check3(1, 1, 0);
}

pub fn test_containers() {
    let v = [0, 1, 2][1];
    assert(v == 1);
    let m = [0: 0, 1: 1, 2: 2][1];
    assert(m == 1);
}

