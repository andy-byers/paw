// tuple.paw

pub fn test_empty_is_unit() {
    let empty = ();
    let empty: () = empty;
}

pub fn test_single_element() {
    let no_comma = (false);
    let with_comma = (false,);

    let expression: bool = no_comma;
    let one_tuple: (bool,) = with_comma;
}

pub fn test_multiple_elements() {
    let pair = (false, 1);
    let triplet = ('a', 5.0, -1);

    let pair: (bool, int) = pair;
    let triplet: (str, float, int) = triplet;
}

pub fn test_getters() {
    let t1 = (false,);
    let t2 = (false, 1);
    let t3 = (false, 1, 2.0);
    let t4 = (false, 1, 2.0, 'three');
    assert(t1.0 == t2.0 && t2.0 == t3.0 && t3.0 == t4.0 && t4.0 == false);
    assert(t2.1 == t3.1 && t3.1 == t4.1 && t4.1 == 1);
    assert(t3.2 == t4.2 && t4.2 == 2.0);
    assert(t4.3 == 'three');
}

fn alter_tuple(r: (int, str)) -> (str, int) {
    r.0 = r.0 * 2;
    r.1 = r.1 + r.1;
    return (r.1, r.0);
}

pub fn test_arguments() {
    let t = alter_tuple((1, 'two'));
    assert(t.0 == 'twotwo');
    assert(t.1 == 2);
}

struct Pair<T> {
    pub v: (T, T),
}

pub fn test_fields() {
    let p = Pair{v: (1, 2)};
    assert(p.v.0 == 1);
    assert(p.v.1 == 2);
}

pub fn test_dot_selectors() {
    let tuple = (1, (2, (3, 4, 5), 6), 7);
    assert(tuple.1.1.0 == 3);
    assert(tuple.1.1.1 == 4);
    assert(tuple.1.1.2 == 5);
    assert(tuple.1.2 == 6);
    assert(tuple.2 == 7);
}

pub fn test_dot_selectors_2() {
    let tuple = (|| 1, (|| 2, (|| 3,)));
    assert(tuple.0() == 1);
    assert(tuple.1.0() == 2);
    assert(tuple.1.1.0() == 3);
}

pub fn test_dot_selectors_3() {
    let list = [(|| 1, [(|| 2, [(|| 3,)])])];
    assert(list[0].0() == 1);
    assert(list[0].1[0].0() == 2);
    assert(list[0].1[0].1[0].0() == 3);
}

pub fn test_dot_selectors_4() {
    let tuple = ([((|| || (42, ),),)],);
    assert(tuple.0[0].0.0()().0 == 42);
}

pub fn test_multidigit_selector() {
    let t = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, (10,));
    assert(t.10.0 == 10);
}

