// tuple.paw

// Prevent DCE from getting rid of a variable
// Note that copy propagation may still get rid of some variables.
fn black_box<T>(_: T) {}


//
// Flat tuples
//

pub fn test_new_unit() {
    let t = ();
    black_box(t);
}

pub fn test_new_singleton() {
    let t = (123,);
    black_box(t);
}

pub fn test_new_multiplet() {
    let t = ("a", 5.0, -1);
    black_box(t);
}

pub fn test_assign_unit() {
    let t = ();
    let t: () = t;
    black_box(t);
}

pub fn test_assign_singleton() {
    let t = (false,);
    black_box(t);

    let t: (bool,) = t;
    black_box(t);
}

pub fn test_assign_multiplet() {
    let t = ("a", 5.0, -1);
    black_box(t);

    let t: (str, float, int) = t;
    black_box(t);
}

pub fn test_get_singleton_field() {
    let t = (42,);
    assert(t.0 == 42);
}

pub fn test_get_multiplet_fields() {
    let t = (false, 1, 2.0);
    assert(t.0 == false);
    assert(t.1 == 1);
    assert(t.2 == 2.0);
}

pub fn test_set_singleton_field() {
    let t = (1.23,);
    assert(t.0 == 1.23);

    t.0 = 3.21;
    assert(t.0 == 3.21);
}

pub fn test_set_multiplet_fields() {
    let t = ("one", 2, 3.0);
    assert(t.0 == "one");
    assert(t.1 == 2);
    assert(t.2 == 3.0);

    t.0 = "two";
    t.1 = 3;
    t.2 = 4.0;
    assert(t.0 == "two");
    assert(t.1 == 3);
    assert(t.2 == 4.0);
}

fn new_singleton(i: int) -> (int,) {
    (i,)
}

pub fn test_return_singleton() {
    let t = new_singleton(123);
    assert(t.0 == 123);
}

fn new_multiplet(i: int, s: str, f: float) -> (int, str, float) {
    (i, s, f)
}

pub fn test_return_multiplet() {
    let t = new_multiplet(1, "two", 3.0);
    assert(t.0 == 1);
    assert(t.1 == "two");
    assert(t.2 == 3.0);
}


//
// Nested tuples
//

pub fn test_assign_nested_singleton() {
    let t = ((false,),);
    black_box(t);

    let t: ((bool,),) = t;
    black_box(t);
}

pub fn test_assign_nested_multiplet() {
    let t = (("a", (5.0,)), -1);
    black_box(t);

    let t: ((str, (float,)), int) = t;
    black_box(t);
}

pub fn test_get_nested_singleton_field() {
    let t = ((42,),);
    assert(t.0.0 == 42);
}

pub fn test_get_nested_multiplet_fields() {
    let t = (false, ((1,), 2.0));
    assert(t.0 == false);
    assert(t.1.0.0 == 1);
    assert(t.1.1 == 2.0);
}

pub fn test_set_nested_singleton_field() {
    let t = ((1.23,),);
    assert(t.0.0 == 1.23);

    t.0.0 = 3.21;
    assert(t.0.0 == 3.21);
}

pub fn test_set_nested_multiplet_fields() {
    let t = ("one", ((2,), 3.5));
    assert(t.0 == "one");
    assert(t.1.0.0 == 2);
    assert(t.1.1 == 3.5);

    t.0 = "two";
    t.1.0.0 = 3;
    t.1.1 = 4.5;
    assert(t.0 == "two");
    assert(t.1.0.0 == 3);
    assert(t.1.1 == 4.5);
}

fn new_nested_singleton(i: int) -> ((int,),) {
    ((i,),)
}

pub fn test_return_nested_singleton() {
    let t = new_nested_singleton(123);
    assert(t.0.0 == 123);
}

fn new_nested_multiplet(i: int, s: str, f: float) -> (int, ((str,), float)) {
    (i, ((s,), f))
}

pub fn test_return_nested_multiplet() {
    let t = new_nested_multiplet(1, "two", 3.0);
    assert(t.0 == 1);
    assert(t.1.0.0 == "two");
    assert(t.1.1 == 3.0);
}


//
// Tuples as structure fields
//

struct SingletonStruct<T> {
    pub t: (T,),
}

pub fn test_singleton_struct_field() {
    let s = SingletonStruct{t: ("",)};
    assert(s.t.0 == "");

    s.t = ("abc",);
    assert(s.t.0 == "abc");

    s.t.0 = "def";
    assert(s.t.0 == "def");
}

pub fn test_nested_singleton_struct_field() {
    let s = SingletonStruct{t: ((0,),)};
    black_box(s);

    s.t = ((123,),);
    assert(s.t.0.0 == 123);

    s.t.0 = (456,);
    assert(s.t.0.0 == 456);

    s.t.0.0 = 789;
    assert(s.t.0.0 == 789);
}

struct MultipletStruct<A, B, C> {
    pub t: (A, B, C),
}

pub fn test_multiplet_struct_field() {
    let s = MultipletStruct{t: (false, 0, "")};
    assert(s.t.0 == false);
    assert(s.t.1 == 0);
    assert(s.t.2 == "");


    s.t = (true, 1, "abc");
    assert(s.t.0 == true);
    assert(s.t.1 == 1);
    assert(s.t.2 == "abc");

    s.t.0 = false;
    s.t.1 = 2;
    s.t.2 = "def";
    assert(s.t.0 == false);
    assert(s.t.1 == 2);
    assert(s.t.2 == "def");
}

pub fn test_nested_multiplet_struct_field() {
    let s = MultipletStruct{t: (false, ((0,), ""), (0.0, 0))};
    assert(s.t.0 == false);
    assert(s.t.1.0.0 == 0);
    assert(s.t.1.1 == "");
    assert(s.t.2.0 == 0.0);
    assert(s.t.2.1 == 0);

    s.t = (true, ((2,), "three"), (4.0, 5));
    assert(s.t.0 == true);
    assert(s.t.1.0.0 == 2);
    assert(s.t.1.1 == "three");
    assert(s.t.2.0 == 4.0);
    assert(s.t.2.1 == 5);

    s.t.1 = ((123,), "abc");
    assert(s.t.0 == true);
    assert(s.t.1.0.0 == 123);
    assert(s.t.1.1 == "abc");
    assert(s.t.2.0 == 4.0);
    assert(s.t.2.1 == 5);

    s.t.0 = false;
    s.t.1.0.0 = 1;
    s.t.1.1 = "two";
    s.t.2.0 = 3.0;
    s.t.2.1 = 4;
    assert(s.t.0 == false);
    assert(s.t.1.0.0 == 1);
    assert(s.t.1.1 == "two");
    assert(s.t.2.0 == 3.0);
    assert(s.t.2.1 == 4);
}

struct ComplexStruct<A, B, C, D> {
    pub t1: (A, (B,)),
    pub t2: ((B, C), D),
    pub t3: (C, D),
}

pub fn test_complex_struct_field() {
    let m = ComplexStruct{
        t1: (false, (0,)),
        t2: ((0, 0.0), ""),
        t3: (0.0, ""),
    };
    assert(m.t1.0 == false);
    assert(m.t1.1.0 == 0);
    assert(m.t2.0.0 == 0);
    assert(m.t2.0.1 == 0.0);
    assert(m.t2.1 == "");
    assert(m.t3.0 == 0.0);
    assert(m.t3.1 == "");

    m.t1 = (true, (2,));
    m.t2 = ((3, 4.0), "five");
    m.t3 = (6.0, "seven");
    assert(m.t1.0 == true);
    assert(m.t1.1.0 == 2);
    assert(m.t2.0.0 == 3);
    assert(m.t2.0.1 == 4.0);
    assert(m.t2.1 == "five");
    assert(m.t3.0 == 6.0);
    assert(m.t3.1 == "seven");

    m.t1.1 = (200,);
    m.t2.0 = (300, 400.0);
    assert(m.t1.0 == true);
    assert(m.t1.1.0 == 200);
    assert(m.t2.0.0 == 300);
    assert(m.t2.0.1 == 400.0);
    assert(m.t2.1 == "five");
    assert(m.t3.0 == 6.0);
    assert(m.t3.1 == "seven");

    m.t1.0 = false;
    m.t1.1.0 = 100;
    m.t2.0.0 = 200;
    m.t2.0.1 = 300.0;
    m.t2.1 = "four hundred";
    m.t3.0 = 500.0;
    m.t3.1 = "six hundred";
    assert(m.t1.0 == false);
    assert(m.t1.1.0 == 100);
    assert(m.t2.0.0 == 200);
    assert(m.t2.0.1 == 300.0);
    assert(m.t2.1 == "four hundred");
    assert(m.t3.0 == 500.0);
    assert(m.t3.1 == "six hundred");
}

//
// Tuples as variant fields
//

enum SingletonEnum<T> {
    First((T,)),
    Second(T),
}

fn match_singleton_variant_field<T>(e: SingletonEnum<T>) -> T {
    match e {
        SingletonEnum::First((t,)) => t,
        SingletonEnum::Second(t) => t,
    }
}

pub fn test_singleton_variant_field() {
    let f = match_singleton_variant_field;
    assert(f(SingletonEnum::First((123,))) == 123);
    assert(f(SingletonEnum::Second(456)) == 456);
}

pub fn test_nested_singleton_variant_field() {
    let f = match_singleton_variant_field;
    assert(f(SingletonEnum::First(((123,),))).0 == 123);
    assert(f(SingletonEnum::Second((456,))).0 == 456);
}

enum MultipletEnum<A, B, C> {
    First((A, B, C,)),
    Second(A, B, C),
}

fn match_multiplet_variant_field<A, B, C>(e: MultipletEnum<A, B, C>) -> (A, B, C) {
    match e {
        MultipletEnum::First((a, b, c)) => (a, b, c),
        MultipletEnum::Second(a, b, c) => (a, b, c),
    }
}

pub fn test_multiplet_variant_field() {
    let f = match_multiplet_variant_field;

    let t = f(MultipletEnum::First((false, 1, "two")));
    assert(t.0 == false);
    assert(t.1 == 1);
    assert(t.2 == "two");

    let t = f(MultipletEnum::Second(true, 2, "three"));
    assert(t.0 == true);
    assert(t.1 == 2);
    assert(t.2 == "three");
}

fn match_nested_multiplet_variant_field(e: MultipletEnum<(bool,), (int, float), str>) -> ((bool,), (int, float), str) {
    match e {
        MultipletEnum::First((a, b, c)) => (a, b, c),
        MultipletEnum::Second(a, b, c) => (a, b, c),
    }
}

pub fn test_nested_multiplet_variant_field() {
    let f = match_nested_multiplet_variant_field;

    let t = f(MultipletEnum::First(((false,), (1, 2.0), "three")));
    assert(t.0.0 == false);
    assert(t.1.0 == 1);
    assert(t.1.1 == 2.0);
    assert(t.2 == "three");

    let t = f(MultipletEnum::Second((true,), (2, 3.0), "four"));
    assert(t.0.0 == true);
    assert(t.1.0 == 2);
    assert(t.1.1 == 3.0);
    assert(t.2 == "four");
}


// Make sure tuples are treated as value types
pub fn test_tuple_is_value_type() {
    let base = (0, false);
    let copy = base;

    base.0 = 1;
    base.1 = true;
    black_box(base);

    assert(copy.0 == 0);
    assert(copy.1 == false);
}


//
// Tuple syntax tests
//

pub fn test_empty_tuple_is_unit_type() {
    let t: () = ();
    black_box(t);
}

pub fn test_single_element_requires_comma() {
    let b: bool = (false);
    black_box(b);

    let t: (bool,) = (false,);
    black_box(t);
}

pub fn test_multidigit_selector() {
    let t = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, (10,));
    assert(t.10.0 == 10);
}

pub fn test_call_fn_element() {
    let t = (|| 123,);
    t.0();
}

