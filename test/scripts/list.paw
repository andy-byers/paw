// list.paw

pub fn test_push_and_pop() {
    let v = [1];
//    while #v < 2 {
//        v.push(#v);
//    }
//    assert(#v == 2);
//    assert(v[0] == 0);
//    assert(v[1] == 1);
    while #v > 0 {
        v.pop();
    }
}

//fn are_lists_eq(a: [int], b: [int]) -> bool {
//    if #a != #b { return false; }
//    for i = 0, #a {
//        if a[i] != b[i] {
//            return false;
//        }
//    }
//    return true;
//}
//
//fn check_eq(a: [int], b: [int]) {
//    assert(are_lists_eq(a, b));
//}
//
//fn check_ne(a: [int], b: [int]) {
//    assert(!are_lists_eq(a, b));
//}
//
//pub fn test_initialization() {
//    let list: [int] = [];
//    assert(0 == #list);
//
//    let list: [int] = [1];
//    assert(1 == #list);
//
//    let list: [int] = [1, 2];
//    assert(2 == #list);
//
//    let list: [int] = [1, 2, 3];
//    assert(3 == #list);
//}
//
//pub fn test_list_of_unit() {
//    let list = [];
//    list.push(());
//    let unit = list[-1];
//}
//
//pub fn test_infer_initializer() {
//    let list = [1];
//    assert(1 == #list);
//
//    let list = [1, 2];
//    assert(2 == #list);
//
//    let list = [1, 2, 3];
//    assert(3 == #list);
//
//    let list = [false];
//    let list = [1.0, 2.0];
//    let list = ['three', 'four', 'five'];
//}
//
//pub fn test_getters() {
//    let list = [1, 2, 3];
//    assert(1 == list[0]);
//    assert(2 == list[1]);
//    assert(3 == list[2]);
//    assert(1 == list[-3]);
//    assert(2 == list[-2]);
//    assert(3 == list[-1]);
//}
//
//pub fn test_nesting() {
//    let list = [[1]];
//    assert(1 == #list);
//    assert(1 == #list[0]);
//    assert(1 == list[0][0]);
//    let list = [[[2]]];
//    assert(1 == #list);
//    assert(1 == #list[0]);
//    assert(1 == #list[0][0]);
//    assert(2 == list[0][0][0]);
//    let list = [[[[3]]]];
//    assert(1 == #list);
//    assert(1 == #list[0]);
//    assert(1 == #list[0][0]);
//    assert(1 == #list[0][0][0]);
//    assert(3 == list[0][0][0][0]);
//
//    let list = [
//        [[1, 2, 3], [0]],
//        [[4, 5, 6], [1]],
//        [[7, 8, 9], [2]],
//    ];
//
//    let list: [int] = [];
//
//    let list: [[int]] = [[]];
//    let list: [[int]] = [[], []];
//    let list: [[int]] = [[], [], []];
//
//    let list: [[[int]]] = [];
//    let list: [[[int]]] = [[]];
//    let list: [[[int]]] = [[], []];
//    let list: [[[int]]] = [[], [], []];
//    let list: [[[int]]] = [[[]]];
//    let list: [[[int]]] = [[[]], [[]]];
//    let list: [[[int]]] = [[[]], [[]], [[]]];
//
//    let check = |list: [[int]]| {
//        assert(1 == list[0][0]);
//        assert(4 == list[1][0]);
//        assert(6 == list[2][0]);
//        assert(2 == list[-3][-2]);
//        assert(3 == list[-3][-1]);
//        assert(5 == list[-2][-1]);
//    };
//    let list = [
//        [1, 2, 3],
//        [4, 5],
//        [6],
//    ];
//    check(list);
//
//    let list = [
//        [1, 2, 3],
//        [4, 5],
//        [6],
//    ];
//    check(list);
//
//    check([
//        [1, 2, 3],
//        [4, 5],
//        [6],
//    ]);
//}
//
//fn check<T>(list: [[T]], counts: (int, int, int)) {
//    assert(counts.0 == #list[0]);
//    assert(counts.1 == #list[1]);
//    assert(counts.2 == #list[2]);
//}
//
//enum E {X, Y, Z, W}
//
//pub fn test_empty_lists() {
//    check([[1], [2], [3]], (1, 1, 1));
//    check([[1], [2], []], (1, 1, 0));
//    check([[], [2], [3]], (0, 1, 1));
//    check([[1], [], [3]], (1, 0, 1));
//    check([[1], [], []], (1, 0, 0));
//    check([[], [2], []], (0, 1, 0));
//    check([[], [], [3]], (0, 0, 1));
//
//    check([[[1]], [], []], (1, 0, 0));
//    check([[], [[2]], []], (0, 1, 0));
//    check([[], [], [[3]]], (0, 0, 1));
//    check([[[[1]]], [[]], []], (1, 1, 0));
//    check([[], [[[2]]], [[]]], (0, 1, 1));
//    check([[[]], [], [[[3]]]], (1, 0, 1));
//
//    check([[[1]], [], []], (1, 0, 0));
//    check([[], [[2]], []], (0, 1, 0));
//    check([[], [], [[3]]], (0, 0, 1));
//    check([[[[1]]], [[]], []], (1, 1, 0));
//    check([[], [[[2]]], [[]]], (0, 1, 1));
//    check([[[]], [], [[[3]]]], (1, 0, 1));
//
//    check([[E::X, E::Y], [], [E::Z, E::W]], (2, 0, 2));
//    check([[[[], [E::X], [E::Y]]], [], [[[E::Z, E::W]]]], (1, 0, 1));
//
//    assert(2 == ([1] + [2] + [])[-1]);
//    assert(3 == ([1] + [] + [3])[-1]);
//    assert(3 == ([] + [2] + [3])[-1]);
//    assert(1 == ([1] + [] + [])[-1]);
//    assert(2 == ([] + [2] + [])[-1]);
//    assert(3 == ([] + [] + [3])[-1]);
//}
//
//pub fn test_slices() {
//    let list = [1, 2, 3];
//    assert(3 == #list[0:#list]);
//    assert(2 == #list[0:-1]);
//    assert(1 == #list[0:-2]);
//    assert(0 == #list[0:-3]);
//    assert(2 == #list[1:#list]);
//    assert(1 == #list[2:#list]);
//    assert(0 == #list[3:#list]);
//    assert(3 == #list[:]);
//
//    assert(2 == list[:-1][-1]);
//    assert(1 == list[:-2][-1]);
//    assert(1 == list[0:][0]);
//    assert(2 == list[1:][0]);
//    assert(3 == list[2:][0]);
//}
//
//// each list must have its type inferred at some point before it
//// goes out of scope
//pub fn test_infer_later() {
//    let list = [];
//    list = [0];
//
//    let list = [];
//    list = [0];
//    list = [1];
//
//    let list = [];
//    list = [];
//    list = [0];
//
//    let test = |list: [int]| {};
//    let a = [];
//    test(a);
//
//    let test = |list: [[int]]| {};
//    let a = [];
//    test(a);
//    let a = [[]];
//    test(a);
//
//    let a = [];
//    let b = a;
//    b = [1];
//    // type of 'a' inferred from 'b'
//    assert(#a == 0);
//
//    let a = [];
//    let b = a;
//    b = [1];
//    assert(#a == 0);
//    a = [2];
//    assert(a[0] == 2);
//
//    let a = [[]];
//    let b = a;
//    assert(#a == 1);
//    b = [[1]];
//    assert(#a == 1);
//    assert(#a[0] == 0);
//    a = [[2]];
//    assert(a[0][0] == 2);
//
//    let a = [];
//    let b = a;
//    let c = b;
//    let d = c;
//    d = [1];
//
//    let a = [];
//    assert(#a == 0);
//    assert(a.length() == 0);
//    a.push(42);
//}
//
//pub fn test_generic_ops() {
//    let a = [];
//    assert(#a == 0);
//    a.push(1);
//
//    let a = [];
//    let b = [];
//    let c = a + b;
//    c.push(1);
//
//    let a = [];
//    let b = [];
//    let c = [];
//    let d = a + b + c;
//    d.push(1);
//}
//
//pub fn test_push() {
//    let list: [int] = [];
//    list.push(1);
//    list.push(2);
//    list.push(3);
//    check_eq(list, [1, 2, 3]);
//
//    let list = [1];
//    list.push(2);
//    list.push(3);
//    list.push(4);
//    check_eq(list, [1, 2, 3, 4]);
//}
//
//pub fn test_pop() {
//    let list = [1, 2, 3];
//    assert(3 == list.pop());
//    assert(#list == 2);
//    assert(2 == list.pop());
//    assert(#list == 1);
//    assert(1 == list.pop());
//    assert(#list == 0);
//}
//
//pub fn test_insert() {
//    let list: [int] = [];
//    list.insert(0, 3);
//    list.insert(0, 2);
//    list.insert(0, 1);
//    check_eq(list, [1, 2, 3]);
//
//    let list: [int] = [1, 2, 3];
//    list.insert(1, 4);
//    list.insert(3, 5);
//    list.insert(5, 6);
//    check_eq(list, [1, 4, 2, 5, 3, 6]);
//}
//
//pub fn test_set_slice() {
//    let check = |i: int, j: int, answer: [int]| {
//        let list = [1, 2, 3];
//        list[i:j] = [4, 5, 6];
//        check_eq(list, answer);
//    };
//    check(0, 0, [4, 5, 6, 1, 2, 3]);
//    check(0, 1, [4, 5, 6, 2, 3]);
//    check(0, 2, [4, 5, 6, 3]);
//    check(0, 3, [4, 5, 6]);
//    check(3, 3, [1, 2, 3, 4, 5, 6]);
//    check(2, 3, [1, 2, 4, 5, 6]);
//    check(1, 3, [1, 4, 5, 6]);
//    check(0, 3, [4, 5, 6]);
//
//    let check = |i: int, j: int, answer: [int]| {
//        let list = [1, 2, 3];
//        list[i:j] = list;
//        check_eq(list, answer);
//    };
//    check(1, 3, [1, 1, 2, 3]);
//    check(2, 3, [1, 2, 1, 2, 3]);
//    check(3, 3, [1, 2, 3, 1, 2, 3]);
//
//    check(0, 2, [1, 2, 3, 3]);
//    check(0, 1, [1, 2, 3, 2, 3]);
//    check(0, 0, [1, 2, 3, 1, 2, 3]);
//
//    check(0, 3, [1, 2, 3]);
//    check(1, 2, [1, 1, 2, 3, 3]);
//
//    let list = [1, 2, 3, 4, 5];
//    list[1:3] = list;
//    check_eq(list, [1, 1, 2, 3, 4, 5, 4, 5]);
//}
//
//fn map<T>(f: fn(T) -> T, list: [T]) {
//    for i = 0, #list {
//        list[i] = f(list[i]);
//    }
//}
//
//pub fn test_infer_poly_function() {
//    let times2 = |i: int| -> int {
//        return i * 2;
//    };
//    let v = [1, 2, 3];
//    map(times2, v);
//    assert(v[0] == 2);
//    assert(v[1] == 4);
//    assert(v[2] == 6);
//}
//
//pub fn test_misc() {
//    let list: [int] = [];
//    for i = 0, 100 {
//        list.push(i);
//    }
//    assert(#list == 100);
//    let copy = [];
//    for i = 0, #list {
//        copy.push(list[i]);
//    }
//    for i = 0, 50 {
//        list.remove(i);
//    }
//    for i = 0, 100, 2 {
//        list.insert(i, i);
//    }
//    check_eq(list, copy);
//}
//
//pub fn test_addition() {
//    check_ne([], [1]);
//    check_ne([] + [], [2]);
//    check_ne([] + [] + [], [3]);
//    check_eq([1], [1]);
//    check_eq([] + [2], [2]);
//    check_eq([] + [] + [3], [3]);
//
//    check_eq([] + [1, 2, 3], [1, 2, 3]);
//    check_eq([1] + [2, 3], [1, 2, 3]);
//    check_eq([1, 2] + [3], [1, 2, 3]);
//    check_eq([1, 2, 3] + [], [1, 2, 3]);
//    check_eq([1] + [2] + [3], [1, 2, 3]);
//    check_eq([] + [1] + [2] + [] + [] + [3] + [], [1, 2, 3]);
//}
//
//pub fn test_infer_closure() {
//    let test = |list: [int]| {
//        assert(#list == 0);
//    };
//    test([]);
//    test([] + []);
//    test([] + [] + []);
//}
//
//pub fn test_infer_a() {
//    let a = [];
//    let b = [];
//    let c = [];
//    a = b;
//    b = c;
//    c.push(1);
//}
//
//pub fn test_infer_b() {
//    let a = [];
//    let b = [];
//    let c = [];
//    a = b;
//    b = c;
//    a.push(1);
//}
//
//pub fn test_infer_c() {
//    let a = [];
//    let b = [];
//    let c = [];
//    b = a;
//    c = a;
//    b = [1];
//    check_eq(a, c);
//    check_ne(a, b);
//    check_ne(b, c);
//}
//
//pub fn test_infer_d() {
//    let a = [];
//    let b = [];
//    let c = [];
//    b = a;
//    c = a;
//    a = [1];
//    assert(#a == 1);
//    assert(#b == 0);
//    assert(#c == 0);
//}
//
//pub fn test_infer_e() {
//    let a = [];
//    let b = [];
//    let c = [];
//    if true {
//        // do nothing
//    } else {
//        a.push(1);
//    }
//    b = c;
//    c = a;
//}
//
//pub fn test_infer_f() {
//    let list = [];
//    list.push(1);
//    assert(list[0] == 1);
//}
//
//pub fn test_infer_g() {
//    let a = [];
//    let b = a;
//    b.push(1);
//    assert(a[0] == 1);
//}
//
//fn infer_func<T>(list: [T], val: T) -> [T] {
//    return list + [val];
//}
//
//pub fn test_infer_h() {
//    assert(1 == infer_func([], 1)[-1]);
//    assert(2 == infer_func(infer_func([], 1), 2)[-1]);
//    assert(3 == infer_func(infer_func(infer_func([], 1), 2), 3)[-1]);
//}
//
//struct Vec<T> {
//    pub list: [T],
//}
//
//fn infer_fn_2<T>(list: [T], val: Vec<T>) -> [T] {
//    return list + val.list;
//}
//
//pub fn test_infer_i() {
//    let a = Vec::<int>{list: [1]};
//    assert(1 == infer_fn_2([], a)[-1]);
//    let b = Vec::<int>{list: [2, 3]};
//    assert(3 == infer_fn_2(infer_fn_2([], a), b)[-1]);
//    let c = Vec::<int>{list: [4, 5, 6]};
//    assert(6 == infer_fn_2(infer_fn_2(infer_fn_2([], a), b), c)[-1]);
//}
//
//fn infer_fn_3<T>(list: [T], vec2: [[T]]) {}
//
//pub fn test_infer_j() {
//    infer_fn_3([], [[1]]);
//    infer_fn_3([], [[[1]]]);
//    infer_fn_3([], [[1, 2, 3]]);
//    infer_fn_3([], [[[1], [2, 2], [3, 3, 3]]]);
//}
//
//fn infer_fn_4<T>(list: [T], val: T) -> int {
//    list.push(val);
//    return #list;
//}
//pub fn test_infer_k() {
//    assert(1 == infer_fn_4([], 1));
//    assert(1 == infer_fn_4([], infer_fn_4([], 2)));
//    assert(1 == infer_fn_4([], infer_fn_4([], infer_fn_4([], 3))));
//
//    let list = [];
//    assert(1 == infer_fn_4(list, 1));
//    let list = [];
//    assert(2 == infer_fn_4(list, infer_fn_4(list, 2)));
//    let list = [];
//    assert(3 == infer_fn_4(list, infer_fn_4(list, infer_fn_4(list, 3))));
//}
//
//pub fn test_slice_equality() {
//    let list = [1, 2, 3];
//    check_eq(list[0:], list[-3:3]);
//    check_eq(list[1:], list[-2:3]);
//    check_eq(list[2:], list[-1:3]);
//    check_eq(list[:3], list[0:3]);
//    check_eq(list[:2], list[0:-1]);
//    check_eq(list[:1], list[0:-2]);
//
//    check_eq(list[:0], []);
//    check_eq(list[3:], []);
//    check_eq(list[1:1], []);
//    check_eq(list[:3], list);
//    check_eq(list[0:], list);
//    check_eq(list[0:3], list);
//}
//
//fn map2<T>(list: [T], f: fn(T) -> T) -> [T] {
//    let result = [];
//    for i = 0, #list {
//        result.push(f(list[i]));
//    }
//    return result;
//}
//pub fn test_infer_l() {
//    let list = [
//        'abc',
//        'def',
//        'ghi',
//    ];
//    let list = map2(list, |val: str| -> str {
//        return val + val;
//    });
//    let result = '';
//    for i = 0, #list{
//        result = result + list[i];
//    }
//    assert(result == 'abcabcdefdefghighi');
//
//    let list = [
//        ['a', 'b', 'c'],
//        ['d', 'e', 'f'],
//        ['g', 'h', 'i'],
//    ];
//    let list = map2(list, |row: [str]| -> [str] {
//        return map2(row, |val: str| -> str {
//            return val + val + val;
//        });
//    });
//    let result = '';
//    for i = 0, #list {
//        for j = 0, #list[i] {
//            result = result + list[i][j];
//        }
//    }
//    assert(result == 'aaabbbcccdddeeefffggghhhiii');
//}
//
//struct ComplexStruct<T> {
//    pub value: ComplexEnum<T>
//}
//
//enum ComplexEnum<T> {
//    JustT(T),
//    WithStr(T, str),
//}
//
//pub fn test_complex_elem() {
//    let list = [];
//    for i = 0, 1000 {
//        if i < 500 {
//            list.push(ComplexStruct{
//                value: ComplexEnum::<int>::JustT(i),
//            });
//        } else {
//            list.push(ComplexStruct{
//                value: ComplexEnum::<int>::WithStr(i, 'str-' + i.to_string()),
//            });
//        }
//    }
//}
