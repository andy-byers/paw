// cfg.paw

pub fn test_variables() {
    let a = 1;
    let b = 2;
    let c = 3;
    assert(a + b + c == 6);

    let a = 2;
    let b = 3;
    let c = 4;
    assert(b + c == 7);

    let a = 3;
    let b = 4;
    let c = 5;
    assert(a + c == 8);

    let a = 4;
    let b = 5;
    let c = 6;
    assert(a + b == 9);

    let a = 5;
    let b = 6;
    let c = 7;
    assert(c == 7);

    let a = 6;
    let b = 7;
    let c = 8;
    assert(a == 6);

    let a = 6;
    let b = 7;
    let c = 8;
    assert(b == 7);
}

pub fn check_ifelse(cond: bool) -> int {
    let r = 0;
    if cond {
        r = 1;
    } else {
        r = 2;
    }
    return r;
}

pub fn test_ifelse() {
    assert(check_ifelse(true) == 1);
    assert(check_ifelse(false) == 2);
}

pub fn check_ifelse_chain(i: int) -> int {
    let r = 0;
    if i == 0 {
        r = 1;
    } else if i == 1 {
        r = 2;
    } else {
        r = 3;
    }
    return r;
}

pub fn test_ifelse_chain() {
    assert(check_ifelse_chain(0) == 1);
    assert(check_ifelse_chain(1) == 2);
    assert(check_ifelse_chain(2) == 3);
    assert(check_ifelse_chain(-1) == 3);
}

pub fn check_longer_ifelse_chain(i: int) -> int {
    let r = 0;
    if i == 0 {
        r = 1;
    } else if i == 1 {
        // NOOP
    } else if i == 2 {
        r = 3;
    } else {
        r = 4;
    }
    return r;
}

pub fn test_longer_ifelse_chain() {
    assert(check_longer_ifelse_chain(0) == 1);
    assert(check_longer_ifelse_chain(1) == 0);
    assert(check_longer_ifelse_chain(2) == 3);
    assert(check_longer_ifelse_chain(3) == 4);
}

pub fn check_guard(cond: bool) -> int {
    let r = 0;
    if cond {
        r = 1;
    }
    return r;
}

pub fn test_guard() {
    assert(check_guard(true) == 1);
    assert(check_guard(false) == 0);
}

pub fn check_lifetime_hole(b: bool) -> int {
    let r = 0;
    if b { r = 1; }
    else { r = r + 2; }
    return r;
}

pub fn test_lifetime_hole() {
    assert(check_lifetime_hole(true) == 1);
    assert(check_lifetime_hole(false) == 2);
}

pub fn check_while(n: int) -> int {
    let r = 0;
    let i = 0;
    while i < n {
        r = r + 1;
        i = i + 1;
    }
    return r;
}

pub fn test_while() {
    assert(check_while(0) == 0);
    assert(check_while(1) == 1);
    assert(check_while(10) == 10);
}

pub fn check_nested_while(n: int, m: int) -> int {
    let r = 0;
    let i = 0;
    while i < n {
        let j = 0;
        while j < m {
            r = r + 1;
            j = j + 1;
        }
        i = i + 1;
    }
    return r;
}

pub fn test_nested_while() {
    assert(check_nested_while(0, 0) == 0);
    assert(check_nested_while(0, 1) == 0);
    assert(check_nested_while(1, 0) == 0);

    assert(check_nested_while(1, 2) == 2);
    assert(check_nested_while(1, 10) == 10);
    assert(check_nested_while(10, 1) == 10);
    assert(check_nested_while(10, 2) == 20);
}

pub fn check_while_ifelse(n: int, cond: bool) -> int {
    let r = 0;
    let i = 0;
    while i < n {
        if cond { 
            r = r;
        } else {
            r = r + 1;
        }
        i = i + 1;
    }
    return r;
}

pub fn test_while_ifelse() {
    assert(check_while_ifelse(1, true) == 0);
    assert(check_while_ifelse(3, true) == 0);
    assert(check_while_ifelse(6, false) == 6);
    assert(check_while_ifelse(11, true) == 0);
    assert(check_while_ifelse(11, false) == 11);
}

pub fn check_while_guard(n: int, cond: bool) -> int {
    let r = 0;
    let i = 0;
    while i < n {
        if cond { 
            r = r + 1; 
        }
        i = i + 1;
    }
    return r;
}

pub fn test_while_guard() {
    assert(check_while_guard(3, true) == 3);
    assert(check_while_guard(6, false) == 0);
    assert(check_while_guard(11, true) == 11);
}

pub fn test_while_header_var_unused_in_body() {
    let n = 42;
    let m = 0;
    // "n" is used in the loop header but not in the body, meaning it must be
    // live for the entire body so it can be used in subsequent iterations.
    // Otherwise, "n" may be overwritten before it is used in the second check.
    while n != m { m = 42; }
    assert(n == m);
    assert(n == 42);
}

pub fn check_break(b: int) -> int {
    let r = 0;
    let i = 0;
    while i < 10 {
        if i == b { 
            break; 

            // unreachable basic blocks
            if true { r = -1; }
            else { r = -2; }
            while true { r = -3; }
        }
        r = r + 1;
        i = i + 1;
    }
    return r;
}

pub fn test_break() {
    assert(check_break(10) == 10);
    assert(check_break(9) == 9);
    assert(check_break(2) == 2);
    assert(check_break(0) == 0);
}

pub fn test_unconditional_break() {
    while true { break; }

    let r = 0;
    while r < 10 {
        r = r + 1;
        break;
    }
    assert(r == 1);
}

pub fn check_continue(b: int) -> int {
    let r = 0;
    let i = 0;
    while i < 10 {
        if i >= b { 
            i = i + 1;
            continue; 

            // unreachable basic blocks
            if true { r = -1; }
            else { r = -2; }
            while true { r = -3; }
        }
        r = r + 1;
        i = i + 1;
    }
    return r;
}

pub fn test_continue() {
    assert(check_continue(10) == 10);
    assert(check_continue(9) == 9);
    assert(check_continue(2) == 2);
    assert(check_continue(0) == 0);
}

pub fn test_unconditional_continue() {
    let i = 0;
    while i < 10 { 
        i = i + 10;
        continue; 
    }
    assert(i == 10);
}

pub fn test_and_or() {
    assert(!(false && false));
    assert(!(true && false));
    assert(!(false && true));
    assert(true && true);

    assert(!(false || false));
    assert(true || false);
    assert(false || true);
    assert(true || true);

    assert(!(false && false && false));
    assert(!(true && false && false));
    assert(!(false && true && false));
    assert(!(false && false && true));

    assert(!(true && true && false));
    assert(!(false && true && true));
    assert(!(true && false && true));
    assert(true && true && true);

    assert(!(false || false || false));
    assert(true || false || false);
    assert(false || true || false);
    assert(false || false || true);
    assert(true || true || false);
    assert(false || true || true);
    assert(true || false || true);
    assert(true || true || true);

    assert(!(false && false || false));
    assert(!(true && false || false));
    assert(!(false && true || false));
    assert(true && true || false);
    assert(false && false || true);
    assert(false && true || true);
    assert(true && false || true);
    assert(true && true || true);
}

fn maybe_times_2(o: Option<int>) -> Option<int> {
    return Some(o? * 2);
}

pub fn test_chain() {
    assert(maybe_times_2(None).is_none());
    assert(maybe_times_2(None).is_none());
    assert(maybe_times_2(Some(-11)).unwrap() == -22);
    assert(maybe_times_2(Some(111)).unwrap() == 222);
}

fn and_or_chain_2(aa: bool, bb: bool) -> Option<bool> {
    let a = Some(aa);
    let b = Some(bb);

    assert((a? && b?) == (aa && bb));
    assert((a? || b?) == (aa || bb));
    return None;
}

fn and_or_chain_3(aa: bool, bb: bool, cc: bool) -> Option<bool> {
    let a = Some(aa);
    let b = Some(bb);
    let c = Some(cc);

    assert((a? && b? && c?) == (aa && bb && cc));
    assert((a? || b? && c?) == (aa || bb && cc));
    assert((a? && b? || c?) == (aa && bb || cc));
    assert((a? || b? || c?) == (aa || bb || cc));
    return None;
}

// Test logical expressions with extra control flow 
pub fn test_and_or_chain_3() {
    and_or_chain_2(false, false);
    and_or_chain_2(false, true);
    and_or_chain_2(true, false);
    and_or_chain_2(true, true);

    and_or_chain_3(false, false, false);
    and_or_chain_3(false, false, true);
    and_or_chain_3(false, true, false);
    and_or_chain_3(true, false, false);
    and_or_chain_3(false, true, true);
    and_or_chain_3(true, true, false);
    and_or_chain_3(true, true, false);
    and_or_chain_3(true, true, true);
}
