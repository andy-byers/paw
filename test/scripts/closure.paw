// closure.paw

// TODO: should be parsed as block followed by closure.
//       parens should allow parsing as logical OR
fn check_logical_or_ambiguity(b: bool) -> bool {
    // parsed as logical OR rather than a block followed by a closure
    { false } || b
}

pub fn test_logical_or_ambiguity() {
    assert(check_logical_or_ambiguity(true));
    assert(!check_logical_or_ambiguity(false));
}

pub fn test_expr_result() {
    let f = || 1;
    assert(f() == 1);
    assert(f() == 1);
    let f = || 2.3;
    assert(f() == 2.3);

    let f = |a| a + 1;
    assert(f(1) == 2);
    assert(f(2) == 3);
    let f = |a| a + 1.0;
    assert(f(0.0) == 1.0);
    assert(f(2.0) == 3.0);

    let f = |a, b, c| [[[a]], [[b], [c]]];
    let v = f(0, 1, 2);
    assert(v[0][0][0] == 0);
    assert(v[1][0][0] == 1);
    assert(v[1][1][0] == 2);
}

pub fn test_empty_block() {
    let f = || -> () {};
    let f = || -> () {return;};
}

pub fn test_infer_empty_block() {
    let f = || {};
    let f = || {return;};
}

pub fn test_infer_block_return() {
    let choose = |i| {
        if i == 0 {
            return 1;
        } else if i == 1 {
            return 2;
        } else if i == 2 {
            return 3;
        } else {
            return 4;
        }
    };

    assert(14 == choose(-1) +
                 choose(0) +
                 choose(1) +
                 choose(2) +
                 choose(3));

}

pub fn test_infer_from_annotation() {
    // this line would result in an inference error if not for the annotation,
    // since we never call it and the parameters are never used, meaning the type
    // cannot be inferred
    let f: fn(int, float) = |a, b| {};

    // infer inner: fn(int) -> int
    let outer = |a: fn(int) -> int| {};
    let inner = |a| a;
    outer(inner) ;

    // infer inner: fn(str) -> (bool, str)
    let outer = |a: fn(str) -> (bool, str)| {};
    let inner = |a| (false, a);
    outer(inner);
    assert(inner('one').0 == false);
    assert(inner('one').1 == 'one');
}

pub fn test_infer_param_from_body() {
    let f = |a| {return a + 1;};
    let f = |a| {return a + 'two';};

    // one of the two parameters must be annotated: the type of each operand to
    // binary '+' must be known.
    let f = |a, b: int| {return a + b;};
    assert(f(1, 2) == 3);
    assert(f(10, 20) == 30);

    let f = |a: float, b| {return a + b;};
    assert(f(0.0, 1.0) == 1.0);
    assert(f(2.0, 3.0) == 5.0);
}

pub fn test_infer_param_from_call() {
    let f = |a| {return a;};
    assert(f(1) == 1);
    assert(f(10) == 10);

    let f = |a| {return a;};
    assert(f('a') == 'a');
    assert(f('bc') == 'bc');
}

fn map<A, B>(f: fn(A) -> B, a: [A]) -> [B] {
    let b = [];
    let i = 0;
    while i < #a {
        let x = a[i];
        let y = f(x);
        b.push(y);
        i = i + 1;
    }
    return b;
}

pub fn test_generics() {
    let b = map(|a| a, [1]);
    assert(b[-1] == 1);
    let b = map(|a| a, [2, 3]);
    assert(b[-1] == 3);

    // infer type of 'a' and '[]' from '-> int' (requires block due to presence of
    // arrow, otherwise the syntax looks strange)
    let b = map(|a| -> int {return a;}, []);
    assert(#b == 0);
    // infer closure return type and '[]' from annotation on 'a'
    let b = map(|a: int| a, []);
    assert(#b == 0);
}

fn create_get_last<T>(t: [T]) -> fn() -> T {
    return || t[-1];
}

pub fn test_generic_with_closure() {
    let f = create_get_last([1, 2, 3]);
    assert(f() == 3);

    let f = create_get_last(['a', 'b', 'c']);
    assert(f() == 'c');
}

fn pipeline<A, B, C>(
        f: fn(A) -> B,
        g: fn(B) -> C,
        a: A) -> C {
    let b = f(a);
    let c = g(b);
    return c;
}

pub fn test_pipeline() {
    let c = pipeline(|a| a, |b| b, 42);
    assert(c == 42);
    let c = pipeline(|a| 2, |b| 3, 1);
    assert(c == 3);
    let c = pipeline(|a: float| a as int,
                     |b: int| b as float,
                     2.5);
    assert(c == 2.0);
}

fn pipeline_2<A, B, C>(a: A, b: B, c: C) -> C {
    return pipeline(|a| b, |b| c, a);
}

pub fn test_pipeline_2() {
    let c = pipeline_2(1, 2, 3);
    assert(c == 3);

    let c = pipeline_2(1, 2.0, 'three');
    assert(c == 'three');
}

fn compose<A, B>(
        f: fn(A) -> B,
        a: A) -> (A, B) {
    return (a, f(a));
}

pub fn test_compose() {
    let x = compose(|a| 2, 1);
    assert(x.0 == 1);
    assert(x.1 == 2);
    let x = compose(|a| 2.0, true);
    assert(x.0 == true);
    assert(x.1 == 2.0);
}

pub fn test_basic_capture() {
    let make = || {
        let b = 1;
        |a| a + b
    };
    let f = make();
    assert(f(1) == 2);
    assert(f(2) == 3);
}

pub fn test_upvalue_assignment() {
    let f = {
        let upvalue = -1;
        let closure = || upvalue;
        upvalue = 42;
        closure
    };
    assert(f() == 42);
}

fn use_var<T>(t: T) {}

pub fn check_upvalue_merge(b: bool) -> int {
    let f = {
        let upvalue = 0;
        if b { upvalue = 1; } 
        else { 
            let x = b; 
            upvalue = 2; 
            use_var(x); 
        }; 
        // semicolon required due to ambiguity with logical OR
        || upvalue
    };

    f()
}

pub fn test_upvalue_merge() {
    assert(check_upvalue_merge(true) == 1);
    assert(check_upvalue_merge(false) == 2);
}

pub fn check_upvalue_merge_2(n: int) -> (int, int) {
    let f = {
        let a = 0;
        let b = 1;
        while n > 0 {
            a = a + b;
            b = b + a;
            n = n - 1;
        }; // TODO: shouldn't need semicolon here!
        || (a, b)
    };
    return f();
}

pub fn test_upvalue_merge_2() {
    assert(check_upvalue_merge_2(0).0 == 0);
    assert(check_upvalue_merge_2(0).1 == 1);
    assert(check_upvalue_merge_2(1).0 == 1);
    assert(check_upvalue_merge_2(1).1 == 2);
    assert(check_upvalue_merge_2(2).0 == 3);
    assert(check_upvalue_merge_2(2).1 == 5);
}

pub fn test_capture_multiple() {
    let f = {
        let a = 1;
        let c = 3;
        let b = 2;
        || (a, b, c)
    };

    assert(f().0 == 1);
    assert(f().1 == 2);
    assert(f().2 == 3);
}

pub fn test_nested_closures() {
    let make_closure = |a: int| {
        let b = 2;
        let c = 1;
        || (c, b, a)
    };
    let t = make_closure(3)();
    assert(t.0 == 1);
    assert(t.1 == 2);
    assert(t.2 == 3);

    let make_closure = || {
        let c = 5;
        |a| {
            let b = 6;
            || (a, c, b)
        }
    };
    let t = make_closure()(4)();
    assert(t.0 == 4);
    assert(t.1 == 5);
    assert(t.2 == 6);
}

pub fn test_capture_separate_lists() {
    let make_closures = || {
        let make_1 = || {
            let a = [];
            || {
                a.push(#a);
                a
            }
        }; // close a
        let make_2 = || {
            let a = [];
            || {
                a.push(#a);
                a
            }
        }; // close a
        (make_1(), make_2())
    };
    let r = make_closures();
    let f = r.0;
    let g = r.1;
    assert(#f() == 1);
    assert(#g() == 1);
    assert(#f() == 2);
    assert(#g() == 2);
}

