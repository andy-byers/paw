// closure.paw

{
    let f = None
    {
        let i = 123
        let a = []
        
        f = Some(|v: int| -> [int] {
            i = v
            _vector_push(a, i)
            return a
        })
    }
    assert(f.unwrap()(1)[0] == 1)
    assert(f.unwrap()(2)[1] == 2)
    assert(#f.unwrap()(3) == 3)
}

{
    let f
    {
        let b = 1
        let closure = fn(a) {
            return a + b
        }
        f = closure
    }
    assert(f(2) == 3)
}

{
    let f
    let g

    {
        {
            let a = []
            let closure = || {
                a.push(#a)
                return a
            }
            f = closure
        } // Close a
        {
            let a = []
            let closure = || {
                a.push(#a)
                return a
            }
            g = closure
        } // Close a
    }
    assert(#f() == 1)
    assert(#g() == 1)
    assert(#f() == 2)
    assert(#g() == 2)
}

{
    let f
    let g

    let test = || {
        assert(f(1) == 1)
        assert(f(2) == 3)
        assert(g(1) == 4)
        assert(g(2) == 6)
    }

    {
        let x = 0

        let _1 = |n| { {
            let _2 = || {
                let _3 = || {
                    x = x + n
                    return x
                }
                return _3()
            }
            return _2()
        }
        f = _1
        g = _1
    }
    test()

    {
        let x = 0

        let _1a = |n: int| { {
            let _2 = || {
                x = x + n
                return x
            }
            return _2()
        }
        let _1b = |n: int| { {
            let _2 = || {
                x = x + n
                return x
            }
            return _2()
        }
        f = _1a
        g = _1b
    }
    test()
}

{
    let f
    {
        let a = [0, 1]
        let fib = |n: int| { {
            assert(n >= 0)
            if n < #a {
                return a[n]
            }
            a.push(fib(n - 2) + fib(n - 1))
            return a[-1]
        }
        f = fib        
    }
    assert(f(10) == 55)
    assert(f(20) == 6765)
    assert(f(30) == 832040)
}

