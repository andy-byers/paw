-- The Computer Language Benchmarks Game
-- http://benchmarksgame.alioth.debian.org/
-- contributed by Mike Pall
-- modified by Andrew Byers

fn Tree(item, depth) {
    if depth > 0 {
        let i = item + item
        depth = depth - 1
        return [item, Tree(i - 1, depth), Tree(i, depth)]
    } else {
        return [item, null, null]
    }
}

fn ItemCheck(tree) {
    if tree[1] {
        return tree[0] + ItemCheck(tree[1]) - ItemCheck(tree[2])
    } else {
        return tree[0]
    }
}

fn Main(N) {
    let mindepth = 4
    let maxdepth = mindepth + 2
    if maxdepth < N { 
        maxdepth = N 
    }

    {
      let stretchdepth = maxdepth + 1
      let stretchtree = Tree(0, stretchdepth)
      print('stretch tree of depth', stretchdepth, 
            '\t check: ', ItemCheck(stretchtree))
    }

    let longlivedtree = Tree(0, maxdepth)

    for depth = mindepth, maxdepth + 1, 2 {
      let iterations = 1 << (maxdepth - depth + mindepth)
      let check = 0
      for i = 0, iterations {
        check = check + ItemCheck(Tree(1, depth))
                      + ItemCheck(Tree(-1, depth))
      }
      print(iterations*2, '\t trees of depth ', 
            depth, '\t check: ', check)
    }

    print('long lived tree of depth ', maxdepth, 
          '\t check: ', ItemCheck(longlivedtree))
}

Main(#argv ?? int(argv[0]) :: 0)
