
fn f() {
    // implicit 'return'
}
fn fi(a: int) {
    return
}

fn test_empty_return() {
    f()
    fi(1)
}

fn f_i() -> int {
    return 1
}
fn fi_i(a: int) -> int {
    return a + 2
}
fn fii_i(a: int, b: int) -> int {
    return a + b + 3
}

fn test_return() {
    assert(f_i() == 1) 
    assert(fi_i(1) == 3) 
    assert(fii_i(1, 2) == 6) 
}

fn test_function_value() {
    let f: fn(int, int) -> int = fii_i
    f(1, 2)

    let f = fii_i
    f(3, 4)
}

fn test_global_visibility() {
    assert(42 == global_function(42))
}

fn counter(n: int) -> int {
    if n > 0 {
        return 1 + counter(n - 1)
    }
    return 0
}

fn test_recursion() {
    assert(0 == counter(-1))
    assert(0 == counter(0))
    assert(1 == counter(1))

    let r = counter
    assert(20 == r(20))

    let r: fn(int) -> int = counter
    assert(30 == r(30))
}

fn is_even(n: int) -> bool {
    assert(n >= 0)
    if n == 0 {
        return true
    }
    return is_odd(n - 1)
}

fn is_odd(n: int) -> bool {
    assert(n >= 0)
    if n == 0 {
        return false
    }
    return is_even(n - 1)
}

fn test_mutual_recursion() {
    assert(is_even(0))
    assert(is_odd(1))
    assert(is_even(2))
    assert(is_even(10))
    assert(is_odd(11))
    assert(is_even(12))

    assert(!is_odd(0))
    assert(!is_even(1))
    assert(!is_odd(2))
    assert(!is_odd(10))
    assert(!is_even(11))
    assert(!is_odd(12))
}

fn global_function(n: int) -> int {
    return n
}
