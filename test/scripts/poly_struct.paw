
struct Singleton<Value> {
    value: Value,
}

pub fn test_initialization() {
    let singleton: Singleton<int> = Singleton::<int>{value: 1};
    let singleton = Singleton::<int>{value: 1};

    let a = Singleton::<(int,)>{value: (1,)};
    let b = Singleton::<fn(int) -> float>{value: |x: int| x as float};
    let c = Singleton::<Singleton<int>>{value: Singleton::<int>{value: 2}};

    let a2 = Singleton{value: (1,)};
    let b2 = Singleton{value: |x: int| x as float};
    let c2 = Singleton{value: Singleton{value: 2}};

    a = a2;
    b = b2;
    c = c2;

    // from further down in the file
    let b = TopLevelB{t: 42};
}

struct Empty<T>;

fn touch_empty<T>(v: Empty<T>) {}
fn touch_nested_empty<T>(v: Empty<Empty<T>>) {}

pub fn test_arguments() {
    touch_empty::<bool>(Empty::<bool>);
    let empty = Empty::<str>;
    touch_empty::<str>(empty);
    touch_empty(Empty::<float>);
    touch_empty(empty);

    touch_empty::<Empty<int>>(Empty::<Empty<int>>);
    let a = Empty::<Empty<int>>;
    touch_empty::<Empty<int>>(a);
    touch_empty(Empty::<Empty<int>>);
    touch_empty(a);

    touch_empty::<Empty<Empty<float>>>(Empty::<Empty<Empty<float>>>);
    let a = Empty::<Empty<Empty<float>>>;
    touch_empty::<Empty<Empty<float>>>(a);
    touch_empty(Empty::<Empty<Empty<float>>>);
    touch_empty(a);

    touch_nested_empty(Empty::<Empty<str>>);
    touch_nested_empty(Empty::<Empty<Empty<float>>>);
}

pub fn test_field_access() {
    let a = Singleton{value: 42};
    let b = Singleton{value: a};
    let c = Singleton{value: b};
    let d = Singleton{value: c};
    let e = d.value;
    let f = e.value;
    let g = f.value;
    let h = g.value;
    assert(h == 42);
}

struct TypeShadowsName<TypeShadowsName> {
    value: TypeShadowsName,
}

pub fn test_type_shadows_name() {
    let tsn = TypeShadowsName::<int>{value: 123};
    assert(tsn.value == 123);
}

// TODO: This should not be allowed: requires indirection, which is not yet possible
//    struct B<T> {
//        b: B::<T>
//    }

struct Pair<First, Second> {
    first: First,
    second: Second,
}

fn new_pair<A, B>(a: A, b: B) -> Pair<A, B> {
    return Pair::<A, B>{
        first: a,
        second: b,
    };
}

pub fn test_two_generics() {
    assert(false == new_pair(false, true).first);
    assert(1 == new_pair(1, 2).first);
    assert(3.0 == new_pair(2.0, 3.0).second);
    assert('five' == new_pair('four', 'five').second);
}

struct NestedSingleton<T> {
    value: Singleton<T>,
}

struct ExtraNestedSingleton<T> {
    value: NestedSingleton<T>,
}

pub fn test_basic_inference() {
    let a = Singleton{value: 123};
    assert(a.value == 123);

    let b = NestedSingleton{value: a};
    assert(b.value.value == 123);

    let c = ExtraNestedSingleton{value: b};
    assert(c.value.value.value == 123);
}

struct Container<T> {
    values: [T],
}

fn check_length<T>(n: int, c: Container<T>) {
    assert(#c.values == n);
}

fn check_types<T>(t: T, c: Container<T>) {}

pub fn test_inference_with_fn() {

    check_length(1, Container{values: [1]});
    check_length(2, Container{values: [[], [2]]});
    check_length(3, Container{values: [[], [[]], [[3]]]});

    check_types(['a', 'b'], Container{values: []});
    check_types([[], ['c']], Container{values: []});
    check_types('a', Container{values: ['a']});
    check_types([], Container{values: [['b']]});
}

struct MultiPairs<A, B, C> {
    a: (A, B),
    b: (B, C),
    c: (C, A),
}

pub fn test_inference_with_tuple() {
    let t = MultiPairs{
        a: (true, 2),
        b: (2, 3.0),
        c: (3.0, true),
    };
    assert(t.a.1 == t.b.0);
    assert(t.b.1 == t.c.0);
    assert(t.a.0 == t.c.1);
}

struct PairWithVec<T> {
    a: T,
    b: [T],
}

pub fn test_infer_vec_field() {
    let p = PairWithVec{
        a: true,
        b: [],
    };
    _list_push(p.b, p.a);
    assert(p.a == p.b[0]);
}

pub fn test_scope() {
    let a = TopLevelA{
        b: TopLevelB{
            t: TopLevelB{t: 42}
        }
    };
    assert(a.b.t.t == 42);
    let b = toplevel_call(a);
    assert(b.t.t == 42);
}

struct TopLevelA<T> {
    b: TopLevelB<T>
}

struct TopLevelB<T> {
    t: T
}

fn toplevel_call<T>(a: TopLevelA<T>) -> TopLevelB<T> {
    return a.b;
}

// Recursive ADTs will compile, since every ADT is implicitly boxed. It is
// not possible to actually create one of these ADTs, however.

// TODO: Wrap fields in Option to allow construction

struct PolyRecursive<X, Y> {
    value: Option<PolyRecursive<X, Y>>,
    value2: Option<PolyRecursive<Empty<Y>, Y>>,
    value3: Option<PolyRecursive<bool, str>>,
}

pub fn test_recursion() {
    let pr = PolyRecursive{
        value: Option::<PolyRecursive<int, bool>>::None,
        value2: Option::<PolyRecursive<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecursive<bool, str>>::None,
    };
    pr.value = Option::<PolyRecursive<int, bool>>::Some(PolyRecursive {
        value: Option::<PolyRecursive<int, bool>>::None,
        value2: Option::<PolyRecursive<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecursive<bool, str>>::None,
    });
    pr.value2 = Option::<PolyRecursive<Empty<bool>, bool>>::Some(PolyRecursive {
        value: Option::<PolyRecursive<Empty<bool>, bool>>::None,
        value2: Option::<PolyRecursive<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecursive<bool, str>>::None,
    });
// TODO: This commented-out code crashes the program. Somewhere along the line, we end up
//       with an instantiation of PolyRecursive that has no fields. When we set the fields
//       that should exist, we write past the end of the Tuple struct's flex array, causing
//       some allocator metadata to become corrupted, tripping an assertion. Really should
//       invest some time to get the allocator redzones working: it is possible that having
//       redzones would have caused a trap right when the bad write happens to avoid having
//       to mess with watchpoints and such.
//       NOTE: 'value3' is the only field that does not depend on generic parameters from
//             PolyRecursive's binder.
//    pr.value3 = Option::<PolyRecursive<bool, str>>::Some(PolyRecursive {
//        value: Option::<PolyRecursive<bool, str>>::None,
//        value2: Option::<PolyRecursive<Empty<str>, str>>::None,
//        value3: Option::<PolyRecursive<bool, str>>::None,
//    });
}

// TODO: Use Option to test these, like the above test
struct PolyRecursiveA<X, Y, Z> {
    value: PolyRecursiveB<X, Y, Z>,
    value2: PolyRecursiveB<X, str, Z>,
    value3: PolyRecursiveB<bool, [int], str>,
}

struct PolyRecursiveB<X, Y, Z> {
    value: PolyRecursiveA<Z, X, Y>,
    value2: PolyRecursiveA<Z, X, [bool]>,
    value3: PolyRecursiveA<str, float, Empty<X>>,
}
