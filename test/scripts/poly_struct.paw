// poly_struct.paw

pub fn instantiate_in_signature<T>(s: Struct<T>) -> Struct<int> {
    return Struct{v: 42};
}

struct Struct<T> {
    pub v: T
}

pub fn test_instantiate_in_signature() {
    let s = instantiate_in_signature(Struct{v: true});
    assert(s.v == 42);
}

struct Singleton<Value> {
    pub value: Value,
}

pub fn test_initialization() {
    let singleton: Singleton<int> = Singleton::<int>{value: 1};
    let singleton = Singleton::<int>{value: 1};

    let a = Singleton::<(int,)>{value: (1,)};
    let b = Singleton::<fn(int) -> float>{value: |x: int| x as float};
    let c = Singleton::<Singleton<int>>{value: Singleton::<int>{value: 2}};

    let a2 = Singleton{value: (1,)};
    let b2 = Singleton{value: |x: int| x as float};
    let c2 = Singleton{value: Singleton{value: 2}};

    a = a2;
    b = b2;
    c = c2;

    // from further down in the file
    let b = TopLevelB{t: 42};
}

struct Empty<T>;

fn touch_empty<T>(v: Empty<T>) {}
fn touch_nested_empty<T>(v: Empty<Empty<T>>) {}

pub fn test_arguments() {
    touch_empty::<bool>(Empty::<bool>);
    let empty = Empty::<str>;
    touch_empty::<str>(empty);
    touch_empty(Empty::<float>);
    touch_empty(empty);

    touch_empty::<Empty<int>>(Empty::<Empty<int>>);
    let a = Empty::<Empty<int>>;
    touch_empty::<Empty<int>>(a);
    touch_empty(Empty::<Empty<int>>);
    touch_empty(a);

    touch_empty::<Empty<Empty<float>>>(Empty::<Empty<Empty<float>>>);
    let a = Empty::<Empty<Empty<float>>>;
    touch_empty::<Empty<Empty<float>>>(a);
    touch_empty(Empty::<Empty<Empty<float>>>);
    touch_empty(a);

    touch_nested_empty(Empty::<Empty<str>>);
    touch_nested_empty(Empty::<Empty<Empty<float>>>);
}

pub fn test_multiple_objects() {
    let av = 1;
    let a = Singleton{value: av};
    let bv = 2;
    let b = Singleton{value: bv};
    let cv = 3;
    let c = Singleton{value: cv};
    let dv = 4;
    let d = Singleton{value: dv};
    let ev = 5;
    let e = Singleton{value: ev};
    let fv = 6;
    let f = Singleton{value: fv};
    assert(a.value == av);
    assert(b.value == bv);
    assert(c.value == cv);
    assert(d.value == dv);
    assert(e.value == ev);
    assert(f.value == fv);
    assert(av == 1);
    assert(bv == 2);
    assert(cv == 3);
    assert(dv == 4);
    assert(ev == 5);
    assert(fv == 6);
}

//pub fn test_field_access() {
//    let a = Singleton{value: 42};
//    let b = Singleton{value: a};
//    let c = b.value;
//    let d = c.value;
//    assert(d == 42);
//}

struct TypeShadowsName<TypeShadowsName> {
    pub value: TypeShadowsName,
}

pub fn test_type_shadows_name() {
    let tsn = TypeShadowsName::<int>{value: 123};
    assert(tsn.value == 123);
}

struct Pair<First, Second> {
    pub first: First,
    pub second: Second,
}

fn new_pair<A, B>(a: A, b: B) -> Pair<A, B> {
    return Pair::<A, B>{
        first: a,
        second: b,
    };
}

pub fn test_two_generics() {
    assert(false == new_pair(false, true).first);
    assert(1 == new_pair(1, 2).first);
    assert(3.0 == new_pair(2.0, 3.0).second);
    assert("five" == new_pair("four", "five").second);
}

struct NestedSingleton<T> {
    pub value: Singleton<T>,
}

struct ExtraNestedSingleton<T> {
    pub value: NestedSingleton<T>,
}

pub fn test_basic_inference() {
    let a = Singleton{value: 123};
    assert(a.value == 123);

    let b = NestedSingleton{value: a};
    assert(b.value.value == 123);

    let c = ExtraNestedSingleton{value: b};
    assert(c.value.value.value == 123);
}

struct Container<T> {
    pub values: [T],
}

fn check_length<T>(n: int, c: Container<T>) {
    assert(#c.values == n);
}

fn check_types<T>(t: T, c: Container<T>) {}

pub fn test_inference_with_fn() {

    check_length(1, Container{values: [1]});
    check_length(2, Container{values: [[], [2]]});
    check_length(3, Container{values: [[], [[]], [[3]]]});

    check_types(["a", "b"], Container{values: []});
    check_types([[], ["c"]], Container{values: []});
    check_types("a", Container{values: ["a"]});
    check_types([], Container{values: [["b"]]});
}

struct MultiPairs<A, B, C> {
    pub a: (A, B),
    pub b: (B, C),
    pub c: (C, A),
}

pub fn test_inference_with_tuple() {
    let t = MultiPairs{
        a: (true, 2),
        b: (2, 3.0),
        c: (3.0, true),
    };
    assert(t.a.1 == t.b.0);
    assert(t.b.1 == t.c.0);
    assert(t.a.0 == t.c.1);
}

struct PairWithVec<T> {
    pub a: T,
    pub b: [T],
}

pub fn test_infer_vec_field() {
    let p = PairWithVec{
        a: true,
        b: [],
    };
    p.b.push(p.a);
    assert(p.a == p.b[0]);
}

pub fn test_scope() {
    let a = TopLevelA{
        b: TopLevelB{
            t: TopLevelB{t: 42}
        }
    };
    assert(a.b.t.t == 42);
    let b = toplevel_call(a);
    assert(b.t.t == 42);
}

struct TopLevelA<T> {
    pub b: TopLevelB<T>
}

struct TopLevelB<T> {
    pub t: T
}

fn toplevel_call<T>(a: TopLevelA<T>) -> TopLevelB<T> {
    return a.b;
}

struct PolyRecur2<X, Y> {
    pub value: Option<PolyRecur2<X, Y>>,
    pub value2: Option<PolyRecur2<Empty<Y>, Y>>,
    pub value3: Option<PolyRecur2<bool, str>>,
}

pub fn test_recursion() {
    let pr = PolyRecur2{
        value: Option::<PolyRecur2<int, bool>>::None,
        value2: Option::<PolyRecur2<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecur2<bool, str>>::None,
    };
    pr.value = Option::<PolyRecur2<int, bool>>::Some(PolyRecur2 {
        value: Option::<PolyRecur2<int, bool>>::None,
        value2: Option::<PolyRecur2<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecur2<bool, str>>::None,
    });
    pr.value2 = Option::<PolyRecur2<Empty<bool>, bool>>::Some(PolyRecur2 {
        value: Option::<PolyRecur2<Empty<bool>, bool>>::None,
        value2: Option::<PolyRecur2<Empty<bool>, bool>>::None,
        value3: Option::<PolyRecur2<bool, str>>::None,
    });
    pr.value3 = Option::<PolyRecur2<bool, str>>::Some(PolyRecur2 {
        value: Option::<PolyRecur2<bool, str>>::None,
        value2: Option::<PolyRecur2<Empty<str>, str>>::None,
        value3: Option::<PolyRecur2<bool, str>>::None,
    });
}

struct PolyRecur2A<X, Y, Z> {
    pub value: Option<PolyRecur2B<X, Y, Z>>,
    pub value2: Option<PolyRecur2B<X, str, Z>>,
    pub value3: Option<PolyRecur2B<bool, [int], str>>,
}

struct PolyRecur2B<X, Y, Z> {
    pub value: Option<PolyRecur2A<Z, X, Y>>,
    pub value2: Option<PolyRecur2A<Z, X, [bool]>>,
    pub value3: Option<PolyRecur2A<str, float, X>>,
}

pub fn test_recursion2() {
    let pr = PolyRecur2A{
        value: Option::<PolyRecur2B<bool, int, float>>::None,
        value2: Option::<PolyRecur2B<bool, str, float>>::None,
        value3: Option::<PolyRecur2B<bool, [int], str>>::None,
    };
    pr.value = Option::<PolyRecur2B<bool, int, float>>::Some(PolyRecur2B{
        value: Option::<PolyRecur2A<float, bool, int>>::None,
        value2: Option::<PolyRecur2A<float, bool, [bool]>>::None,
        value3: Option::<PolyRecur2A<str, float, bool>>::None,
    });
    pr.value2 = Option::<PolyRecur2B<bool, str, float>>::Some(PolyRecur2B{
        value: Option::<PolyRecur2A<float, bool, str>>::None,
        value2: Option::<PolyRecur2A<float, bool, [bool]>>::None,
        value3: Option::<PolyRecur2A<str, float, bool>>::None,
    });
    pr.value3 = Option::<PolyRecur2B<bool, [int], str>>::Some(PolyRecur2B{
        value: Option::<PolyRecur2A<str, bool, [int]>>::None,
        value2: Option::<PolyRecur2A<str, bool, [bool]>>::None,
        value3: Option::<PolyRecur2A<str, float, bool>>::None,
    });
}

struct TestSelfPoly<A, B> {
    pub fn not_method(s: TestSelfPoly<A, B>) {}
    pub fn not_method2(s: Self) {}
    pub fn method(self: TestSelfPoly<A, B>) {}
}

pub fn test_self_poly() {
    let ts = TestSelfPoly::<int, float>;
    ts.method();

    TestSelfPoly::not_method(ts);
    TestSelfPoly::not_method2(ts);

    TestSelfPoly::method(ts);
}

