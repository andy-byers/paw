// poly_match.paw

enum WithoutFields<T> {
    First,
    Second,
}

fn check_match_without_fields_concrete(target: WithoutFields<int>) -> int {
    match target {
        // generic type inferred by unifying with "target"
        WithoutFields::First => {return 1;},
        WithoutFields::Second => {return 2;},
    }
}

pub fn test_without_fields_concrete() {
    let check = check_match_without_fields_concrete;
    assert(check(WithoutFields::First) == 1);
    assert(check(WithoutFields::Second) == 2);
}

fn check_match_without_fields<Ty>(target: WithoutFields<Ty>) -> int {
    match target {
        WithoutFields::First => {return 1;},
        WithoutFields::Second => {return 2;},
    }
}

pub fn test_without_fields() {
    let check = check_match_without_fields::<int>;
    assert(check(WithoutFields::First) == 1);
    assert(check(WithoutFields::Second) == 2);
}

fn check_match_with_fields_concrete(target: Option<int>) -> int {
    match target {
        Some(42) => {return 1;},
        None => {return 2;},
        _ => {return 3;}
    }
}

pub fn test_with_fields_concrete() {
    let check = check_match_with_fields_concrete;
    assert(check(Some(42)) == 1);
    assert(check(None) == 2);
    assert(check(Some(0)) == 3);
}

fn check_match_with_fields<Ty>(target: Option<Ty>) -> Result<Ty, ()> {
    match target {
        Some(x) => {return Result::Ok(x);},
        _ => {return Result::Err(());},
    }
}

pub fn test_with_fields() {
    let check = check_match_with_fields::<int>;
    assert(check(Some(1)).unwrap() == 1);
    assert(check(Some(2)).unwrap() == 2);
    assert(check(None).is_err());
}

fn check_match_nested_fields_poly(target: Option<Option<int>>) -> int {
    match target {
        None => {return 0;},
        Some(None) => {return 1;},
        Some(Some(x)) => {return 2 + x;},
    }
}

pub fn test_nested_fields_poly() {
    let check = check_match_nested_fields_poly;
    assert(check(None) == 0);
    assert(check(Some(None)) == 1);
    assert(check(Some(Some(0))) == 2);
    assert(check(Some(Some(1))) == 3);
}

enum Nat {
    Zero,
    Succ(Nat),
}

pub fn eval(nat: Nat) -> int {
    match nat {
        Nat::Zero => {
            return 0;
        },
        Nat::Succ(x) => {
            return eval(x) + 1;
        },
    }
}

fn describe(target: Option<(int, Nat)>) -> str {
    match target {
        None => {
            return "a";
        },
        Some(
            (0, Nat::Zero)
            | (1, Nat::Succ(Nat::Zero))
            | (2, Nat::Succ(Nat::Succ(Nat::Zero)))
        ) => {
            return "b";
        },
        Some((x, y)) => {
            if x == eval(y) {
                return "c";
            }
            return "d";
        },
    }
}

pub fn test_describe() {
    let one = Nat::Succ(Nat::Zero);
    let two = Nat::Succ(one);
    let three = Nat::Succ(two);

    assert(describe(None) == "a");
    assert(describe(Some((1, one))) == "b");
    assert(describe(Some((1, two))) == "d");
    assert(describe(Some((2, two))) == "b");
    assert(describe(Some((3, three))) == "c");
    assert(describe(Some((0, three))) == "d");
}
