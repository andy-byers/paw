-- class.paw

{
    class A {}
    let a = A()

    -- Functions added after __init are not bound to the instance. They
    -- can be called and assigned to variables, but they will not receive
    -- the hidden 'self' parameter, nor will they have access to 'super'.
    a.a = fn() {}
    a.b = fn(a) {return a}
    assert(a.a() == null)
    assert(a.b(42) == 42)

    let aa = a.a
    let ab = a.b
    assert(aa() == null)
    assert(ab(42) == 42)
}

{
    fn test(code) {
        fn test() {
            load(code)() 
        }
        assert(0 != try(test))
    }
    -- Classes are closed after creation (after closing '}' is encountered
    -- in class the definition).
    test('class A {}; A.a = 123')
    test('class A {}; A.a = fn() {}')

    -- Non-bound functions cannot access 'self' or 'super'.
    test('class A {}; let a = A(); a.a = fn() {self.value = 123}; a.a()')
    test('class A {}; let a = A(); a.a = fn() {super.value = 123}; a.a()')
}

{
    fn test(ins) {
        -- 'c' and 'd' do not exist. Attempting to access either is an error.
        assert(ins.a == 1)
        assert(ins.b == null)

        ins.method()
        assert(ins.a == 1)
        assert(ins.b == 2)
        assert(ins.c == 3)
    }

    class Class {
        __init(self) {
            self.a = 1
            self.b = null
        }

        method(self) {
            self.b = 2
            self.c = 3
        }
    }

    test(Class())

    let cls = Class
    test(cls())
}

{
    let cls
    let a = [0]
    {
        let b = [0]
        {
            let c = [0]

            class Capture {
                __init(self) {
                    self.a = a
                    self.b = b
                    self.c = c
                }
            }
            cls = Capture
            c[0] = 3
        }
        b[0] = 2
    }
    a[0] = 1

    let ins = cls()
    assert(ins.a[0] == 1)
    assert(ins.b[0] == 2)
    assert(ins.c[0] == 3)
}

{
    let get
    let set
    let ins
    let num

    fn setup(cls, n) {
        num = n
        ins = cls()
        ins.setter(n)
        assert(ins.getter() == n)

        get = ins.getter
        set = ins.setter
        assert(get() == n)
    }

    fn test() {
        assert(get() == num)
        set(123) 
        assert(get() == 123)
    }

    {
        {
            class Class {
                setter(self, x) {
                    self.x = x
                }
                getter(self) {
                    return self.x
                }
            }
            -- NOTE: Default __init() returns an instance of the class
            setup(Class, 42)
            assert(ins.x == 42)
        }
        test()
    }

    {
        {
            let x = 0
            class Class {
                setter(self, y) {
                    x = y
                }
                getter(self) {
                    return x
                }
            }
            setup(Class, 321)
            assert(x == 321)
        }
        test()
    }
}

{
    class Class {
        __init(self) {
            self.cls = Class
            self.num = 42
        }
        test(self) {
            self.ins = self.cls()
        }
    }
    let ins = Class()
    ins.test()

    assert(ins.num == 42)
    assert(ins.ins.num == 42)
}

{
    class Class {
        count(self, n) {
            assert(n >= 0)
            return n == 0 ?? 0 :: 1 + self.count(n - 1)
        }
    }
    let c = Class()
    assert(c.count(10) == 10)
    assert(c.count(20) == 20)
    assert(c.count(30) == 30)
}

-- Test inheritance:
{
    class Parent {}
    class Child: Parent {}
    let c = Child()

    let n = 0
    class Parent {method(self) {n = n + 1}}
    class Child: Parent {}
    let c = Child()
    let m = c.method
    m()        -- Call bound method
    c.method() -- Invoke directly
    assert(n == 2)

    let n = 0
    class Grandparent {method(self) {n = -1}}
    class Parent {method(self) {n = n + 1}}
    class Child: Parent {}
    let c = Child()
    let m = c.method
    -- Calls Parent.method()
    m()
    c.method()
    assert(n == 2)
}

{
    class Parent {
        __init(self) {
            self.name = 'Parent'
        }
    }
    class Child: Parent {}
    let c = Child()
    -- __init method is not inherited
    assert('not found' == getattr(c, '__init', 'not found'))
}

-- Inheritance from self is not possible
{
    class A {f(self) {}}
    class A: A {} -- superclass is 'A' from the previous line
    let a = A()
    a.f()
}

-- Test 'super':
{

    class Parent {
        __init(self) {
            self.name = 'Parent'
        }
    }
    class Child: Parent {
        __init(self) {
            super.__init()            
        }
    }
    let c = Child()
    assert(c.name == 'Parent')
}

{
    class A {
        method(self) {
            return 'A'
        }
    }

    class B: A {
        method(self) {
            return 'B'
        }

        test(self) {
            return super.method()
        }
    }

    class C: B {}

    assert('A' == C().test()) 
}

{
    class A {
        __init(self) {
            self.v = 'A'
        }
    }
    class B: A {
        __init(self) {}
    }
    let b = B()
    assert(null == getattr(b, 'v', null))

    class B: A {
        __init(self, x) {
            super.__init()
        }
    }
    let b = B('unused')
    assert('A' == getattr(b, 'v', null))
}

{
    fn test(code) {
        load(code)()
    }
    assert(0 != try(test, 'class _ABC: _ABC {}')) -- '_ABC' not declared (declared/defined at '}')
    assert(0 != try(test, 'class A: 1 {}')) -- inherit from primitive
    assert(0 != try(test, 'class A: [] {}')) -- inherit from builtin type

    -- In the second statement, the superclass 'A' refers to the class defined
    -- in the first statement (class name is 'registered' at the '{').
    class A {} 
    class A: A {}
}
