// trait.paw

pub trait InstanceGet {
    fn get(self) -> int;
}

pub trait AssociatedGet {
    fn get_default() -> int;
}

struct Int: InstanceGet + AssociatedGet {
    pub value: int,

    pub fn get(self) -> int {
        self.value
    }

    pub fn get_default() -> int {
        42
    }
}

pub fn test_call_method() {
    let i = Int{value: 123};
    assert(i.get() == 123);
}

fn call_method<Ty: InstanceGet>(t: Ty) -> int {
    t.get()
}

fn call_call_method<Ty: InstanceGet>(t: Ty) -> int {
    call_method(t)
}

pub fn test_indirect_call_method() {
    let i = Int{value: 42};
    assert(call_method(i) == 42);
    assert(call_call_method(i) == 42);
}

pub fn test_call_associated_fn() {
    assert(Int::get_default() == 42);
}

fn call_both_functions<Ty: InstanceGet + AssociatedGet>(t: Ty) -> int {
    t.get() + Ty::get_default()
}

fn call_call_both_functions<Ty: AssociatedGet + InstanceGet>(t: Ty) -> int {
    call_both_functions::<Ty>(t)
}

pub fn test_indirect_call_both_functions() {
    let i = Int{value: 123};
    assert(call_both_functions(i) == 123 + 42);
    assert(call_call_both_functions(i) == 123 + 42);
}
