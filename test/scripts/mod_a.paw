// mod_a.paw

use mod_b;

pub fn test_external() {
    let e = mod_b::external('hello');
    assert(e.value == 'hello');

    let e = mod_b::External{value: 'world'};
    assert(e.value == 'world');

    let e = mod_b::poly_external(42);
    assert(e.value == 42);

    let e = mod_b::PolyExternal{value: true};
    assert(e.value == true);
}

pub fn recursive(n: int) -> int {
    if n > 0 {
        return mod_b::recursive(n - 1) + 1;
    }
    return 0;
}

fn poly_recursive<T>(n: int, t: T, list: [T]) -> int {
    if n > 0 {
        list.push(t);
        mod_b::poly_recursive(n - 1, t, list);
    }
    return #list;
}

fn check_poly_recursive(n: int) -> int {
    let ilist = [];
    let icount = poly_recursive(n, 123, ilist);
    let blist = [];
    let bcount = poly_recursive(n, false, blist);
    assert(icount == #ilist);
    assert(icount == #blist);
    assert(icount == bcount);
    return icount;
}

pub fn test_recursive() {
    assert(recursive(-1) == 0);
    assert(recursive(1) == 1);
    assert(recursive(10) == 10);

    assert(check_poly_recursive(-1) == 0);
    assert(check_poly_recursive(1) == 1);
    assert(check_poly_recursive(10) == 10);
}

pub fn get_test(k: str) -> fn() {
    if k == 'external' {
        return test_external;
    } else if k == 'recursive' {
        return test_recursive;
    } else {
        return || assert(false);
    }
}

pub fn return_42() -> int {
    return 42;
}

pub struct Obj<T> {
    t: T,

    pub fn new(x: T) -> Self {
        return Self{t: x};
    }
    
    pub fn get_t(self) -> T {
        return self.t;
    }
}
