// match_guard.paw

fn sign(value: int) -> int {
    match value {
        x if x < 0 => {return -1;},
        0 => {return 0;},
        _ => {return 1;},
    }
}

pub fn test_guard() {
    assert(sign(-100) == -1);
    assert(sign(-1) == -1);
    assert(sign(0) == 0);
    assert(sign(1) == 1);
    assert(sign(1000) == 1);
}

fn check_guard_2(value: Option<int>) -> int {
    match value {
        Option::Some(x) if x == 100 => {return 1;},
        Option::Some(x) if x < -10 => {return 2;},
        Option::Some(x) if x < 0 => {return 3;},
        Option::Some(x) => {return 4;},
        Option::None => {return 5;},
    }
}

pub fn test_guard_2() {
    let check = check_guard_2;
    assert(check(Option::Some(100)) == 1);
    assert(check(Option::Some(-11)) == 2);
    assert(check(Option::Some(-10)) == 3);
    assert(check(Option::Some(0)) == 4);
    assert(check(Option::None) == 5);
}

fn check_guard_3(value: (int, int)) -> int {
    match value {
        (x, y) if x == y => {return x + y + 1;},
        (x, y) => {return x + y + 2;},
    }
}

pub fn test_guard_3() {
    let check = check_guard_3;
    assert(check((0, 0)) == 1);
    assert(check((1, 1)) == 3);
    assert(check((1, 0)) == 3);
    assert(check((2, 2)) == 5);
}

