// poly_enum.paw

enum Enum<T> {
    X,
    Y(T),
    Z(T, T),
}

pub fn test_initialization() {
    let ex = Enum::<int>::X;
    let ey = Enum::<int>::Y(1);
    let ez = Enum::<int>::Z(2, 3);
}

fn noop(e: Enum<int>) -> Enum<int> {
    let e2 = e;
    return e2;
}

pub fn test_arguments() {
    noop(Enum::<int>::X);
    noop(Enum::<int>::Y(1));
    noop(Enum::<int>::Z(2, 3));
}

pub fn test_assignment() {
    let ex = Enum::<int>::X;
    let ey = Enum::<int>::Y(1);
    let ez = Enum::<int>::Z(2, 3);

    ez = ex;
    ex = ey;
    ey = ez;
}

struct Struct<T> {
    pub x: Enum<int>,
    pub y: Enum<T>,
}

pub fn test_fields() {
    let s = Struct::<bool>{
        x: Enum::<int>::X,
        y: Enum::<bool>::Y(true),
    };
    let s = Struct::<float>{
        x: Enum::<int>::Y(1),
        y: Enum::<float>::Z(2.0, 3.0),
    };
}

pub fn test_add_warning() {
    print('warning: run the ? tests!');
}

//// Chain ('?') expressions:
//fn option(b: bool) -> Option<int> {
//    if b {
//        return Option::<int>::Some(42);
//    } else {
//        return Option::<int>::None;
//    }
//}
//
//pub fn test_chain_option() {
//    let val = -1;
//    let test = || -> Option<int> {
//        let i = option(true)?;
//        val = i;
//        return Option::<int>::Some(i);
//    };
//    test();
//    assert(val == 42);
//
//    let test = || -> Option<int> {
//        let i = option(false)?;
//        assert(false);
//        return Option::<int>::Some(i);
//    };
//    test();
//
//    let test = |o: Option<int>| {}    ;
//    test(Option::<int>::Some(123));
//    test(Option::<int>::None);
//}
//
//fn option2<Ty>(b: bool, v: Ty) -> Option<Ty> {
//    if b {
//        return Option::<Ty>::Some(v);
//    } else {
//        return Option::<Ty>::None;
//    }
//}
//
//fn chain_option2_aux<Ty2>(v: Ty2) -> Option<Ty2> {
//    let t = option2(false, v)?;
//    assert(false);
//    return Option::<Ty2>::Some(t);
//}
//
//pub fn test_chain_option2() {
//    chain_option2_aux(123);
//    chain_option2_aux('abc');
//}
//
//fn result(b: bool) -> Result<int, str> {
//    if b {
//        return Result::<int, str>::Ok(42);
//    } else {
//        return Result::<int, str>::Err('bad');
//    }
//}
//
//pub fn test_chain_result() {
//    let val = -1;
//    let test = || -> Result<int, str> {
//        let i = result(true)?;
//        val = i;
//        return Result::<int, str>::Ok(i);
//    };
//    test();
//    assert(val == 42);
//
//    let test = || -> Result<int, str> {
//        let i = result(false)?;
//        assert(false);
//        return Result::<int, str>::Ok(i);
//    };
//    test();
//}

struct Inner<T> {
    pub val: T,
}

struct Outer<T> {
    pub option: Option<Inner<T>>
}

fn construct_option<Ty3>(t: Ty3, a: bool, b: bool) -> Option<Outer<Ty3>> {
    if a {
        if b {
            return Option::<Outer<Ty3>>::Some(Outer::<Ty3>{
                option: Option::<Inner<Ty3>>::Some(Inner::<Ty3>{val: t}),
            });
        } else {
            return Option::<Outer<Ty3>>::Some(Outer::<Ty3>{
                option: Option::<Inner<Ty3>>::None,
            });
        }
    } else {
        return Option::<Outer<Ty3>>::None;
    }
}

pub fn test_option_construction() {
    construct_option(42, true, true);
    construct_option(42, true, false);
    construct_option(42, false, false);
}

pub fn test_option_methods() {
    let o = Option::<int>::Some(123);
    assert(o.is_some());
    assert(o.unwrap() == 123);
    assert(o.unwrap_or(456) == 123);

    let o = Option::<int>::None;
    assert(o.is_none());
    assert(o.unwrap_or(456) == 456);
}

pub fn test_result_methods() {
    let o = Result::<int, str>::Ok(123);
    assert(o.is_ok());
    assert(o.unwrap() == 123);
    assert(o.unwrap_or(456) == 123);

    let o = Result::<int, str>::Err('abc');
    assert(o.is_err());
    assert(o.unwrap_or(456) == 456);
}
