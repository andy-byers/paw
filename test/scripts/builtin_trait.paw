// builtin_trait.paw

// Terrible hash combine for testing
fn bad_hash_combine<K: Hash>(a: K, b: K) -> int {
    a.hash() * 123456789 + b.hash()
}

struct MultiIntKey: Hash + Equals {
    pub value: (int, int),
    pub fn hash(self) -> int {
        bad_hash_combine(self.value.0, self.value.1)
    }
    pub fn eq(self, rhs: Self) -> bool {
        self.value.0 == rhs.value.0
            && self.value.1 == rhs.value.1
    }
}

fn mik(a: int, b: int) -> MultiIntKey {
    MultiIntKey{value: (a, b)}
}

pub fn test_custom_key() {
    let m = [:];

    m[mik(1, 1)] = 11;
    m[mik(2, 2)] = 22;

    for i in range(1, 100, 2) {
        m[mik(i, i + 1)] = i;
    }
    for i in range(1, 100, 2) {
        assert(m[mik(i, i + 1)] == i);
    }

    assert(m[mik(1, 1)] == 11);
    assert(m[mik(2, 2)] == 22);
}

struct Key: Hash + Equals {
    pub value: int,

    pub fn hash(self) -> int {
        self.value
    }

    pub fn eq(self, rhs: Self) -> bool {
        self.value == rhs.value
    }
}

// NOTE: Make sure not to call MultiKey<T>::hash or MultiKey<T>::equals directly.
//       This causes a special case where both functions must be added manually
//       during monomorphization.
struct MultiKey<T: Hash + Equals>: Hash + Equals {
    value: (T, T),

    pub fn new(a: T, b: T) -> Self {
        Self{value: (a, b)}
    }

    pub fn hash(self) -> int {
        bad_hash_combine(self.value.0, self.value.1)
    }

    pub fn eq(self, rhs: Self) -> bool {
        self.value.0.eq(rhs.value.0)
            && self.value.1.eq(rhs.value.1)
    }
}

fn mk(a: int, b: int) -> MultiKey<Key> {
    let a = Key{value: a};
    let b = Key{value: b};
    MultiKey::new(a, b)
}

pub fn test_custom_key2() {
    let m = [:];

    m[mk(1, 1)] = 11;
    m[mk(2, 2)] = 22;

    for i in range(1, 100, 2) {
        m[mk(i, i + 1)] = i;
    }
    for i in range(1, 100, 2) {
        assert(m[mk(i, i + 1)] == i);
    }

    assert(m[mk(1, 1)] == 11);
    assert(m[mk(2, 2)] == 22);
}

pub fn iterate_list<T: Equals>(L: [T], iter: ListIterator<T>) {
    assert(iter.next().unwrap().eq(L[0]));
    assert(iter.next().unwrap().eq(L[1]));
    assert(iter.next().unwrap().eq(L[2]));
    assert(iter.next().is_none());
    assert(iter.next().is_none());
}

pub fn test_iterate_list() {
    let L = [1, 2, 3];
    iterate_list(L, ListIterator::new(L));
    iterate_list(L, L.iterator());
}

fn iterate_map<K: Hash + Equals, V>(m: [K: V], iter: MapIterator<K, V>) {
    m.erase(iter.next().unwrap());
    m.erase(iter.next().unwrap());
    m.erase(iter.next().unwrap());
    assert(#m == 0);
    assert(iter.next().is_none());
    assert(iter.next().is_none());
}

pub fn test_iterate_map() {
    let m = ["a": 1, "b": 2, "c": 3];
    iterate_map(m, MapIterator::new(m));

    let m = ["d": 4, "e": 5, "f": 6];
    iterate_map(m, m.iterator());
}

//pub fn test_iterate_range() {
//    let r = Range{start: 0, end: 3};
//    let iter = r.iterator();
//    assert(iter.next().unwrap() == 0);
//    assert(iter.next().unwrap() == 1);
//    assert(iter.next().unwrap() == 2);
//    assert(iter.next().is_none());
//}
//
