(* Paw language grammer (EBNF) *)

(* Items *)
Item     = ["pub"] ItemDecl .
ItemDecl = ConstDecl | FunctionDecl | StructDecl | 
           EnumDecl | TypeDecl | UseDecl .

(* Functions *)
FunctionDecl = "fn" Function .
Function     = name [Generics] Signature Block .
FParameters  = {FParam ","} FParam [","] .
Signature    = "(" [FParameters] ")" ["->" Type] .
FParam       = name ":" Type .

(* Constants *)
ConstDecl = "const" name ":" Type "=" Expr .

(* Structures *)
StructDecl = "struct" name [Generics] (StructBody | ";") .
StructBody = "{" {Field ","} Field [","] "}" .
Field      = ["pub"] name ":" Type .

(* Enumerations *)
EnumDecl = "enum" name [Generics] EnumBody .
EnumBody = "{" {Variant ","} Variant [","] "}" .
Variant  = name ["(" TypeList ")"] .

(* Statements *)
Stmt     = ExprStmt | DeclStmt .
ExprStmt = Expr ";" | BlockExpr [";"] .
DeclStmt = Declaration .

(* Paths *)
Path        = {Segment "::"} Segment .
Segment     = name ["::" TypeArgs] .

(* Patterns *)
Pattern    = LiteralPat | TuplePat | StructPat | 
             VariantPat | PathPat .
LiteralPat = string_lit | int_lit | float_lit | bool_lit .
PatList    = {Pattern ","} Pattern [","] .
TuplePat   = "(" [{Pattern ","} Pattern "," [Pattern]] ")".
VariantPat = Path "(" PatList ")" .
StructPat  = Path "{" PatFields "}" .
PatFields  = {PatField ","} PatField [","] .
PatField   = name [":" Pattern] .
PathPat    = Path .

(* Declarations *)
Declaration = UseDecl | VarDecl | TypeDecl .
UseDecl     = "use" name ["::" (name | "*")] ["as" name] .
VarDecl     = "let" name [":" Type] "=" Expr .
TypeDecl    = "type" name [Generics] "=" Type .
Generics    = "<" {name ","} name [","] ">" .

(* Operators *)
UnOp     = "-" | "~" | "!" | "#" .
BinOp    = "+" | "-" | "*" | "/" |
           "%" | "&" | "^" | "|" |
           "<<" | ">>" | "<" | "<=" | 
           ">" | ">=" | "==" | "!=" | 
           "&&" | "||" | "+=" | "-=" | 
           "*=" | "/=" | "%=" | "&=" | 
           "^=" | "|=" | "<<=" | ">>=" .

(* Types *)
Type        = GroupedType | FnType | ListType | MapType | 
              TupleType | PathType .
GroupedType = "(" Type ")" .
FnType      = "fn" "(" [TypeList] ")" ["->" Type] .
TypeList    = {Type ","} Type [","] .
TypeArgs    = "<" TypeList ">" .
PathType    = {TypeSegment "::"} TypeSegment .
TypeSegment = name [TypeArgs] .
ListType    = "[" Type "]" .
MapType     = "[" Type ":" Type "]" .
TupleType   = "(" [{Type ","} Type "," [Type]] ")".

(* Expressions *)
Expr        = BasicExpr | BlockExpr .
BasicExpr   = PrimaryExpr | UnOp Expr | Expr BinOp Expr | 
              RangeExpr | Closure | JumpExpr | ReturnExpr . 
BlockExpr   = Block | IfElse | ForLoop | WhileLoop | Loop .
PrimaryExpr = Operand | Call | "(" Expr ")" .
Call        = PrimaryExpr "(" [ExprList] ")" .
Index       = PrimaryExpr "[" Expr [":" Expr] "]" .
Selector    = PrimaryExpr "." name .
ExprList    = {Expr ","} Expr .
Block       = "{" Stmts "}" .
Stmts       = {Stmt} | {Stmt} BasicExpr | BasicExpr .
RangeExpr   = [Expr] RangeSep [Expr - Block] .
RangeSep    = ".." | "..=" .
Closure     = "|" [CParameters] "|" (("->" Type Block) | Expr) .
CParameters = {CParam ","} CParam [","] .
CParam      = name [":" Type] .
JumpExpr    = "break" | "continue" .
ReturnExpr  = "return" [Expr] .

(* StructLit is forbidden in the target of a block expression to avoid 
   an ambiguity that cannot be resolved at the parser level. *)
TargetExpr  = Expr - StructLit .

(* Loops *)
WhileLoop = "while" TargetExpr Block .
ForLoop   = "for" name "in" TargetExpr Block .
Loop      = "loop" Block .

(* If-else construct *)
IfElse    = "if" TargetExpr Block [{"else" IfElse} | "else" Block] .

(* Pattern matching *)
MatchExpr   = "match" TargetExpr MatchBody .
MatchBody   = "{" {MatchClause ","} MatchClause "}" .
MatchClause = Pattern "=>" Expr .

(* Operands *)
Operand  = Path | Index | Selector | Literal .
Literal  = BasicLit | CompositeLit .
BasicLit = int_lit | bool_lit | float_lit | string_lit .

(* Composite literals *)
CompositeLit = TupleLit | ListLit | MapLit | StructLit .
TupleLit     = "(" [{Expr ","} Expr "," [Expr]] ")".
ListLit      = "[" [ExprList [","]] "]" .
MapLit       = "[" ":" "]" | "[" [MapElems [","]] "]" .
MapElems     = MapElem {"," MapElem} [","] .
MapElem      = Expr ":" Expr .
StructLit    = Path ["{" [StructFields [","]] "}"] .
StructFields = StructField {"," StructField} [","] .
StructField  = name ":" Expr .

(* Primitive literals *)
int_lit     = decimal_lit | binary_lit | octal_lit | hex_lit .
bool_lit    = "true" | "false" .
char_lit    = "'" (character | hex_escape | unicode_escape) "'" .
string_lit  = "\"" {char_lit} "\"" .
istring_lit = "\"" istring_middle "\"" .
decimal_lit = "0" | ("1".."9") [decimal_digits] .
binary_lit  = "0" ("b" | "B") binary_digits .
octal_lit   = "0" ("o" | "O") octal_digits .
hex_lit     = "0" ("x" | "X") hex_digits .

(* String interpolation *)
istring_middle = {char_lit | istring_expr} .
istring_expr   = "\\{" Expr "}" .

(* Float literals *)
float_lit = decimal_digits "." [decimal_digits] [exponent] |
            decimal_digits exponent .
exponent  = ("e" | "E") ["+" | "-"] decimal_digits .

(* Miscellaneous *)
name           = letter {letter | decimal_digit} .
letter         = "A".."Z" | "a".."z" | "_" .
decimal_digit  = "0".."9" .
binary_digit   = "0" | "1" .
octal_digit    = "0".."7" .
hex_digit      = "0".."9" | "A".."F" | "a".."f" .
decimal_digits = decimal_digit {decimal_digit | "_"} .
binary_digits  = binary_digit {binary_digit | "_"} .
octal_digits   = octal_digit {octal_digit | "_"} .
hex_digits     = hex_digit {hex_digit | "_"} .
character      = byte | hex_escape | unicode_escape .
hex_escape     = "\\x" hex_digit hex_digit .
unicode_escape = "\\u{" {hex_digit} hex_digit "}" .
byte           = ("\x00".."\xFF") - "\n" .

